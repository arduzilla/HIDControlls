
hidjoyL4R5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  00007114  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  00007114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20040000  08005358  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20040114  0800546c  00007114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040c44  0800546c  00007c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae30  00000000  00000000  00007144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e4  00000000  00000000  00021f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00025858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c97  00000000  00000000  00026900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbfc  00000000  00000000  00027597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bec9  00000000  00000000  00053193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100ce7  00000000  00000000  0006f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016fd43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  0016fd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000b2a7  00000000  00000000  00172740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0017d9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040114 	.word	0x20040114
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005278 	.word	0x08005278

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040118 	.word	0x20040118
 80001f8:	08005278 	.word	0x08005278

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	2500      	movs	r5, #0
 80004f2:	9507      	str	r5, [sp, #28]
 80004f4:	9508      	str	r5, [sp, #32]
 80004f6:	9509      	str	r5, [sp, #36]	@ 0x24
 80004f8:	950a      	str	r5, [sp, #40]	@ 0x28
 80004fa:	950b      	str	r5, [sp, #44]	@ 0x2c
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4c37      	ldr	r4, [pc, #220]	@ (80005dc <MX_GPIO_Init+0xf0>)
 80004fe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000506:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000510:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000516:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000518:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800052a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	9303      	str	r3, [sp, #12]
 8000532:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800053c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800053e:	f003 0308 	and.w	r3, r3, #8
 8000542:	9304      	str	r3, [sp, #16]
 8000544:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000546:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800054c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800054e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000554:	9305      	str	r3, [sp, #20]
 8000556:	9b05      	ldr	r3, [sp, #20]
  HAL_PWREx_EnableVddIO2();
 8000558:	f001 fa6e 	bl	8001a38 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000564:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	9306      	str	r3, [sp, #24]
 800056c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800056e:	4f1c      	ldr	r7, [pc, #112]	@ (80005e0 <MX_GPIO_Init+0xf4>)
 8000570:	462a      	mov	r2, r5
 8000572:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000576:	4638      	mov	r0, r7
 8000578:	f000 fbf2 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800057c:	4c19      	ldr	r4, [pc, #100]	@ (80005e4 <MX_GPIO_Init+0xf8>)
 800057e:	462a      	mov	r2, r5
 8000580:	2140      	movs	r1, #64	@ 0x40
 8000582:	4620      	mov	r0, r4
 8000584:	f000 fbec 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000592:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000596:	a907      	add	r1, sp, #28
 8000598:	4813      	ldr	r0, [pc, #76]	@ (80005e8 <MX_GPIO_Init+0xfc>)
 800059a:	f000 fae9 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800059e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80005a2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2601      	movs	r6, #1
 80005a6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	a907      	add	r1, sp, #28
 80005ae:	4638      	mov	r0, r7
 80005b0:	f000 fade 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005b4:	2320      	movs	r3, #32
 80005b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005bc:	a907      	add	r1, sp, #28
 80005be:	4620      	mov	r0, r4
 80005c0:	f000 fad6 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005c4:	2340      	movs	r3, #64	@ 0x40
 80005c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005ce:	a907      	add	r1, sp, #28
 80005d0:	4620      	mov	r0, r4
 80005d2:	f000 facd 	bl	8000b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d6:	b00d      	add	sp, #52	@ 0x34
 80005d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000400 	.word	0x48000400
 80005e4:	48001800 	.word	0x48001800
 80005e8:	48000800 	.word	0x48000800

080005ec <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ee:	e7fe      	b.n	80005ee <Error_Handler+0x2>

080005f0 <MX_LPUART1_UART_Init>:
{
 80005f0:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 80005f2:	4816      	ldr	r0, [pc, #88]	@ (800064c <MX_LPUART1_UART_Init+0x5c>)
 80005f4:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_LPUART1_UART_Init+0x60>)
 80005f6:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <MX_LPUART1_UART_Init+0x64>)
 80005fa:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80005fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000600:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000602:	2300      	movs	r3, #0
 8000604:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000606:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	220c      	movs	r2, #12
 800060a:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060c:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000610:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000612:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000614:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000616:	f002 fe3e 	bl	8003296 <HAL_UART_Init>
 800061a:	b970      	cbnz	r0, 800063a <MX_LPUART1_UART_Init+0x4a>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800061c:	2100      	movs	r1, #0
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <MX_LPUART1_UART_Init+0x5c>)
 8000620:	f002 feb1 	bl	8003386 <HAL_UARTEx_SetTxFifoThreshold>
 8000624:	b958      	cbnz	r0, 800063e <MX_LPUART1_UART_Init+0x4e>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	4808      	ldr	r0, [pc, #32]	@ (800064c <MX_LPUART1_UART_Init+0x5c>)
 800062a:	f002 fed1 	bl	80033d0 <HAL_UARTEx_SetRxFifoThreshold>
 800062e:	b940      	cbnz	r0, 8000642 <MX_LPUART1_UART_Init+0x52>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <MX_LPUART1_UART_Init+0x5c>)
 8000632:	f002 fe89 	bl	8003348 <HAL_UARTEx_DisableFifoMode>
 8000636:	b930      	cbnz	r0, 8000646 <MX_LPUART1_UART_Init+0x56>
}
 8000638:	bd08      	pop	{r3, pc}
    Error_Handler();
 800063a:	f7ff ffd7 	bl	80005ec <Error_Handler>
    Error_Handler();
 800063e:	f7ff ffd5 	bl	80005ec <Error_Handler>
    Error_Handler();
 8000642:	f7ff ffd3 	bl	80005ec <Error_Handler>
    Error_Handler();
 8000646:	f7ff ffd1 	bl	80005ec <Error_Handler>
 800064a:	bf00      	nop
 800064c:	200401d4 	.word	0x200401d4
 8000650:	40008000 	.word	0x40008000
 8000654:	00033324 	.word	0x00033324

08000658 <MX_USART3_UART_Init>:
{
 8000658:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800065a:	4815      	ldr	r0, [pc, #84]	@ (80006b0 <MX_USART3_UART_Init+0x58>)
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_USART3_UART_Init+0x5c>)
 800065e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000660:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000664:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	2300      	movs	r3, #0
 8000668:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800066a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800066c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800066e:	220c      	movs	r2, #12
 8000670:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000678:	6243      	str	r3, [r0, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800067c:	f002 fe0b 	bl	8003296 <HAL_UART_Init>
 8000680:	b970      	cbnz	r0, 80006a0 <MX_USART3_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <MX_USART3_UART_Init+0x58>)
 8000686:	f002 fe7e 	bl	8003386 <HAL_UARTEx_SetTxFifoThreshold>
 800068a:	b958      	cbnz	r0, 80006a4 <MX_USART3_UART_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <MX_USART3_UART_Init+0x58>)
 8000690:	f002 fe9e 	bl	80033d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000694:	b940      	cbnz	r0, 80006a8 <MX_USART3_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_USART3_UART_Init+0x58>)
 8000698:	f002 fe56 	bl	8003348 <HAL_UARTEx_DisableFifoMode>
 800069c:	b930      	cbnz	r0, 80006ac <MX_USART3_UART_Init+0x54>
}
 800069e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006a0:	f7ff ffa4 	bl	80005ec <Error_Handler>
    Error_Handler();
 80006a4:	f7ff ffa2 	bl	80005ec <Error_Handler>
    Error_Handler();
 80006a8:	f7ff ffa0 	bl	80005ec <Error_Handler>
    Error_Handler();
 80006ac:	f7ff ff9e 	bl	80005ec <Error_Handler>
 80006b0:	20040140 	.word	0x20040140
 80006b4:	40004800 	.word	0x40004800

080006b8 <SystemClock_Config>:
{
 80006b8:	b500      	push	{lr}
 80006ba:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006bc:	2244      	movs	r2, #68	@ 0x44
 80006be:	2100      	movs	r1, #0
 80006c0:	a805      	add	r0, sp, #20
 80006c2:	f004 fdac 	bl	800521e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2000      	movs	r0, #0
 80006c8:	9000      	str	r0, [sp, #0]
 80006ca:	9001      	str	r0, [sp, #4]
 80006cc:	9002      	str	r0, [sp, #8]
 80006ce:	9003      	str	r0, [sp, #12]
 80006d0:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006d2:	f001 f923 	bl	800191c <HAL_PWREx_ControlVoltageScaling>
 80006d6:	bb38      	cbnz	r0, 8000728 <SystemClock_Config+0x70>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006d8:	2322      	movs	r3, #34	@ 0x22
 80006da:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e2:	2301      	movs	r3, #1
 80006e4:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2340      	movs	r3, #64	@ 0x40
 80006e8:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006f0:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80006f2:	221e      	movs	r2, #30
 80006f4:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f8:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	a805      	add	r0, sp, #20
 80006fe:	f001 fa81 	bl	8001c04 <HAL_RCC_OscConfig>
 8000702:	b998      	cbnz	r0, 800072c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000714:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	2105      	movs	r1, #5
 800071a:	4668      	mov	r0, sp
 800071c:	f001 fdb0 	bl	8002280 <HAL_RCC_ClockConfig>
 8000720:	b930      	cbnz	r0, 8000730 <SystemClock_Config+0x78>
}
 8000722:	b017      	add	sp, #92	@ 0x5c
 8000724:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000728:	f7ff ff60 	bl	80005ec <Error_Handler>
    Error_Handler();
 800072c:	f7ff ff5e 	bl	80005ec <Error_Handler>
    Error_Handler();
 8000730:	f7ff ff5c 	bl	80005ec <Error_Handler>

08000734 <main>:
{
 8000734:	b508      	push	{r3, lr}
  HAL_Init();
 8000736:	f000 f969 	bl	8000a0c <HAL_Init>
  SystemClock_Config();
 800073a:	f7ff ffbd 	bl	80006b8 <SystemClock_Config>
  MX_GPIO_Init();
 800073e:	f7ff fed5 	bl	80004ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000742:	f7ff ff55 	bl	80005f0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000746:	f7ff ff87 	bl	8000658 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800074a:	f004 fab9 	bl	8004cc0 <MX_USB_DEVICE_Init>
 800074e:	e01f      	b.n	8000790 <main+0x5c>
		  rep.button1 = !rep.button1;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <main+0xc4>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	f082 0101 	eor.w	r1, r2, #1
 8000758:	f361 0200 	bfi	r2, r1, #0, #1
 800075c:	701a      	strb	r2, [r3, #0]
		  rep.button2 = !rep.button1;
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	f082 0101 	eor.w	r1, r2, #1
 8000764:	f361 0241 	bfi	r2, r1, #1, #1
 8000768:	701a      	strb	r2, [r3, #0]
		  rep.button3 = !rep.button2;
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	0851      	lsrs	r1, r2, #1
 800076e:	f081 0101 	eor.w	r1, r1, #1
 8000772:	f361 0282 	bfi	r2, r1, #2, #1
 8000776:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, (void *)&rep, sizeof(rep));
 8000778:	220b      	movs	r2, #11
 800077a:	491f      	ldr	r1, [pc, #124]	@ (80007f8 <main+0xc4>)
 800077c:	481f      	ldr	r0, [pc, #124]	@ (80007fc <main+0xc8>)
 800077e:	f003 fc93 	bl	80040a8 <USBD_HID_SendReport>
	  HAL_Delay(10);
 8000782:	200a      	movs	r0, #10
 8000784:	f000 f964 	bl	8000a50 <HAL_Delay>
	  val += 10;
 8000788:	4a1d      	ldr	r2, [pc, #116]	@ (8000800 <main+0xcc>)
 800078a:	8813      	ldrh	r3, [r2, #0]
 800078c:	330a      	adds	r3, #10
 800078e:	8013      	strh	r3, [r2, #0]
	  rep.x_axis = val;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <main+0xcc>)
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	f3c2 0c0b 	ubfx	ip, r2, #0, #12
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <main+0xc4>)
 800079a:	6819      	ldr	r1, [r3, #0]
 800079c:	f36c 2113 	bfi	r1, ip, #8, #12
 80007a0:	6019      	str	r1, [r3, #0]
	  rep.y_axis = UINT16_MAX - val;
 80007a2:	43d1      	mvns	r1, r2
 80007a4:	fa5f fe81 	uxtb.w	lr, r1
 80007a8:	f883 e003 	strb.w	lr, [r3, #3]
 80007ac:	f3c1 2103 	ubfx	r1, r1, #8, #4
 80007b0:	7918      	ldrb	r0, [r3, #4]
 80007b2:	f020 000f 	bic.w	r0, r0, #15
 80007b6:	4308      	orrs	r0, r1
 80007b8:	7118      	strb	r0, [r3, #4]
	  rep.z_axis = val;
 80007ba:	6858      	ldr	r0, [r3, #4]
 80007bc:	f36c 2013 	bfi	r0, ip, #8, #12
 80007c0:	6058      	str	r0, [r3, #4]
	  rep.rx_axis = UINT16_MAX - val;
 80007c2:	f883 e007 	strb.w	lr, [r3, #7]
 80007c6:	7a18      	ldrb	r0, [r3, #8]
 80007c8:	f020 000f 	bic.w	r0, r0, #15
 80007cc:	4301      	orrs	r1, r0
 80007ce:	7219      	strb	r1, [r3, #8]
	  rep.ry_axis = val;
 80007d0:	f883 c009 	strb.w	ip, [r3, #9]
 80007d4:	7a99      	ldrb	r1, [r3, #10]
 80007d6:	f021 010f 	bic.w	r1, r1, #15
 80007da:	ea41 211c 	orr.w	r1, r1, ip, lsr #8
 80007de:	7299      	strb	r1, [r3, #10]
	  if(!(val % 500))
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <main+0xd0>)
 80007e2:	fba3 1302 	umull	r1, r3, r3, r2
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007ec:	fb01 2213 	mls	r2, r1, r3, r2
 80007f0:	b292      	uxth	r2, r2
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d0ac      	beq.n	8000750 <main+0x1c>
 80007f6:	e7bf      	b.n	8000778 <main+0x44>
 80007f8:	20040130 	.word	0x20040130
 80007fc:	20040270 	.word	0x20040270
 8000800:	2004013c 	.word	0x2004013c
 8000804:	10624dd3 	.word	0x10624dd3

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_MspInit+0x2c>)
 800080c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800080e:	f042 0201 	orr.w	r2, r2, #1
 8000812:	661a      	str	r2, [r3, #96]	@ 0x60
 8000814:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000816:	f002 0201 	and.w	r2, r2, #1
 800081a:	9200      	str	r2, [sp, #0]
 800081c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000820:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000824:	659a      	str	r2, [r3, #88]	@ 0x58
 8000826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000830:	b002      	add	sp, #8
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b510      	push	{r4, lr}
 800083a:	b0ae      	sub	sp, #184	@ 0xb8
 800083c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	2100      	movs	r1, #0
 8000840:	9129      	str	r1, [sp, #164]	@ 0xa4
 8000842:	912a      	str	r1, [sp, #168]	@ 0xa8
 8000844:	912b      	str	r1, [sp, #172]	@ 0xac
 8000846:	912c      	str	r1, [sp, #176]	@ 0xb0
 8000848:	912d      	str	r1, [sp, #180]	@ 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084a:	2294      	movs	r2, #148	@ 0x94
 800084c:	a804      	add	r0, sp, #16
 800084e:	f004 fce6 	bl	800521e <memset>
  if(huart->Instance==LPUART1)
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	4a30      	ldr	r2, [pc, #192]	@ (8000918 <HAL_UART_MspInit+0xe0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d004      	beq.n	8000864 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800085a:	4a30      	ldr	r2, [pc, #192]	@ (800091c <HAL_UART_MspInit+0xe4>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d02f      	beq.n	80008c0 <HAL_UART_MspInit+0x88>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000860:	b02e      	add	sp, #184	@ 0xb8
 8000862:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000864:	2320      	movs	r3, #32
 8000866:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	a804      	add	r0, sp, #16
 800086a:	f001 ff9d 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	bb20      	cbnz	r0, 80008ba <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000870:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <HAL_UART_MspInit+0xe8>)
 8000872:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	65da      	str	r2, [r3, #92]	@ 0x5c
 800087a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800087c:	f002 0201 	and.w	r2, r2, #1
 8000880:	9200      	str	r2, [sp, #0]
 8000882:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000884:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800088a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8000896:	f001 f8cf 	bl	8001a38 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800089a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800089e:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	932b      	str	r3, [sp, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	932c      	str	r3, [sp, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ac:	2308      	movs	r3, #8
 80008ae:	932d      	str	r3, [sp, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	a929      	add	r1, sp, #164	@ 0xa4
 80008b2:	481c      	ldr	r0, [pc, #112]	@ (8000924 <HAL_UART_MspInit+0xec>)
 80008b4:	f000 f95c 	bl	8000b70 <HAL_GPIO_Init>
 80008b8:	e7d2      	b.n	8000860 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80008ba:	f7ff fe97 	bl	80005ec <Error_Handler>
 80008be:	e7d7      	b.n	8000870 <HAL_UART_MspInit+0x38>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008c0:	2304      	movs	r3, #4
 80008c2:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	a804      	add	r0, sp, #16
 80008c6:	f001 ff6f 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 80008ca:	bb10      	cbnz	r0, 8000912 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <HAL_UART_MspInit+0xe8>)
 80008ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80008d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80008d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008d8:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80008dc:	9202      	str	r2, [sp, #8]
 80008de:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008e2:	f042 0208 	orr.w	r2, r2, #8
 80008e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	9303      	str	r3, [sp, #12]
 80008f0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008f6:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	932b      	str	r3, [sp, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	932c      	str	r3, [sp, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000904:	2307      	movs	r3, #7
 8000906:	932d      	str	r3, [sp, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	a929      	add	r1, sp, #164	@ 0xa4
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <HAL_UART_MspInit+0xf0>)
 800090c:	f000 f930 	bl	8000b70 <HAL_GPIO_Init>
}
 8000910:	e7a6      	b.n	8000860 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8000912:	f7ff fe6b 	bl	80005ec <Error_Handler>
 8000916:	e7d9      	b.n	80008cc <HAL_UART_MspInit+0x94>
 8000918:	40008000 	.word	0x40008000
 800091c:	40004800 	.word	0x40004800
 8000920:	40021000 	.word	0x40021000
 8000924:	48001800 	.word	0x48001800
 8000928:	48000c00 	.word	0x48000c00

0800092c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler>

0800092e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler>

08000930 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler>

08000932 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler>

08000934 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler>

08000936 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	4770      	bx	lr

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093e:	f000 f875 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000942:	bd08      	pop	{r3, pc}

08000944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000944:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000946:	4802      	ldr	r0, [pc, #8]	@ (8000950 <OTG_FS_IRQHandler+0xc>)
 8000948:	f000 fcb3 	bl	80012b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094c:	bd08      	pop	{r3, pc}
 800094e:	bf00      	nop
 8000950:	20040760 	.word	0x20040760

08000954 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4a03      	ldr	r2, [pc, #12]	@ (8000964 <SystemInit+0x10>)
 8000956:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800095a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800096c:	f7ff fff2 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f004 fc4b 	bl	8005230 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099a:	f7ff fecb 	bl	8000734 <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80009a4:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80009a8:	20040114 	.word	0x20040114
  ldr r2, =_sidata
 80009ac:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 80009b0:	20040114 	.word	0x20040114
  ldr r4, =_ebss
 80009b4:	20040c44 	.word	0x20040c44

080009b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_IRQHandler>
	...

080009bc <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <HAL_InitTick+0x44>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b90b      	cbnz	r3, 80009c6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80009c4:	4770      	bx	lr
{
 80009c6:	b510      	push	{r4, lr}
 80009c8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80009d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <HAL_InitTick+0x48>)
 80009d4:	6810      	ldr	r0, [r2, #0]
 80009d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80009da:	f000 f8b5 	bl	8000b48 <HAL_SYSTICK_Config>
 80009de:	b968      	cbnz	r0, 80009fc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	2c0f      	cmp	r4, #15
 80009e2:	d901      	bls.n	80009e8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80009e4:	2001      	movs	r0, #1
 80009e6:	e00a      	b.n	80009fe <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	4621      	mov	r1, r4
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f896 	bl	8000b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <HAL_InitTick+0x4c>)
 80009f6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2000      	movs	r0, #0
 80009fa:	e000      	b.n	80009fe <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
}
 80009fe:	bd10      	pop	{r4, pc}
 8000a00:	20040004 	.word	0x20040004
 8000a04:	20040000 	.word	0x20040000
 8000a08:	20040008 	.word	0x20040008

08000a0c <HAL_Init>:
{
 8000a0c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 f874 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ffd1 	bl	80009bc <HAL_InitTick>
 8000a1a:	b110      	cbz	r0, 8000a22 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000a1c:	2401      	movs	r4, #1
}
 8000a1e:	4620      	mov	r0, r4
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	4604      	mov	r4, r0
    HAL_MspInit();
 8000a24:	f7ff fef0 	bl	8000808 <HAL_MspInit>
 8000a28:	e7f9      	b.n	8000a1e <HAL_Init+0x12>
	...

08000a2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <HAL_IncTick+0x10>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4a03      	ldr	r2, [pc, #12]	@ (8000a40 <HAL_IncTick+0x14>)
 8000a32:	6811      	ldr	r1, [r2, #0]
 8000a34:	440b      	add	r3, r1
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20040004 	.word	0x20040004
 8000a40:	20040268 	.word	0x20040268

08000a44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a44:	4b01      	ldr	r3, [pc, #4]	@ (8000a4c <HAL_GetTick+0x8>)
 8000a46:	6818      	ldr	r0, [r3, #0]
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20040268 	.word	0x20040268

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff fff6 	bl	8000a44 <HAL_GetTick>
 8000a58:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a5e:	d002      	beq.n	8000a66 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <HAL_Delay+0x24>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	f7ff ffed 	bl	8000a44 <HAL_GetTick>
 8000a6a:	1b40      	subs	r0, r0, r5
 8000a6c:	42a0      	cmp	r0, r4
 8000a6e:	d3fa      	bcc.n	8000a66 <HAL_Delay+0x16>
  {
  }
}
 8000a70:	bd38      	pop	{r3, r4, r5, pc}
 8000a72:	bf00      	nop
 8000a74:	20040004 	.word	0x20040004

08000a78 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	db07      	blt.n	8000a8c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7c:	f000 021f 	and.w	r2, r0, #31
 8000a80:	0940      	lsrs	r0, r0, #5
 8000a82:	2301      	movs	r3, #1
 8000a84:	4093      	lsls	r3, r2
 8000a86:	4a02      	ldr	r2, [pc, #8]	@ (8000a90 <__NVIC_EnableIRQ+0x18>)
 8000a88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a94:	2800      	cmp	r0, #0
 8000a96:	db08      	blt.n	8000aaa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	0109      	lsls	r1, r1, #4
 8000a9a:	b2c9      	uxtb	r1, r1
 8000a9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000aa0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000aa4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000aa8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	f000 000f 	and.w	r0, r0, #15
 8000aae:	0109      	lsls	r1, r1, #4
 8000ab0:	b2c9      	uxtb	r1, r1
 8000ab2:	4b01      	ldr	r3, [pc, #4]	@ (8000ab8 <__NVIC_SetPriority+0x24>)
 8000ab4:	5419      	strb	r1, [r3, r0]
  }
}
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed14 	.word	0xe000ed14

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac2:	f1c0 0c07 	rsb	ip, r0, #7
 8000ac6:	f1bc 0f04 	cmp.w	ip, #4
 8000aca:	bf28      	it	cs
 8000acc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad0:	1d03      	adds	r3, r0, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d90f      	bls.n	8000af6 <NVIC_EncodePriority+0x3a>
 8000ad6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 3eff 	mov.w	lr, #4294967295
 8000adc:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ae0:	ea21 0100 	bic.w	r1, r1, r0
 8000ae4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000aea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000aee:	ea41 0002 	orr.w	r0, r1, r2
 8000af2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	2300      	movs	r3, #0
 8000af8:	e7ee      	b.n	8000ad8 <NVIC_EncodePriority+0x1c>
	...

08000afc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000afe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	0200      	lsls	r0, r0, #8
 8000b0a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b18:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_NVIC_SetPriority+0x1c>)
 8000b26:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b28:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b2c:	f7ff ffc6 	bl	8000abc <NVIC_EncodePriority>
 8000b30:	4601      	mov	r1, r0
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff ffae 	bl	8000a94 <__NVIC_SetPriority>
}
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b42:	f7ff ff99 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000b46:	bd08      	pop	{r3, pc}

08000b48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	3801      	subs	r0, #1
 8000b4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b4e:	d20b      	bcs.n	8000b68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b54:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <HAL_SYSTICK_Config+0x24>)
 8000b58:	21f0      	movs	r1, #240	@ 0xf0
 8000b5a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5e:	2000      	movs	r0, #0
 8000b60:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	2207      	movs	r2, #7
 8000b64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8000b74:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e062      	b.n	8000c3e <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b7a:	005e      	lsls	r6, r3, #1
 8000b7c:	2403      	movs	r4, #3
 8000b7e:	40b4      	lsls	r4, r6
 8000b80:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b84:	68cc      	ldr	r4, [r1, #12]
 8000b86:	40b4      	lsls	r4, r6
 8000b88:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000b8a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b8e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b92:	684c      	ldr	r4, [r1, #4]
 8000b94:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000b9c:	6044      	str	r4, [r0, #4]
 8000b9e:	e060      	b.n	8000c62 <HAL_GPIO_Init+0xf2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba0:	08dd      	lsrs	r5, r3, #3
 8000ba2:	3508      	adds	r5, #8
 8000ba4:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba8:	f003 0c07 	and.w	ip, r3, #7
 8000bac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bb0:	f04f 0e0f 	mov.w	lr, #15
 8000bb4:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000bb8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bbc:	690c      	ldr	r4, [r1, #16]
 8000bbe:	fa04 f40c 	lsl.w	r4, r4, ip
 8000bc2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000bc6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000bca:	e061      	b.n	8000c90 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bcc:	2407      	movs	r4, #7
 8000bce:	e000      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000bd0:	2400      	movs	r4, #0
 8000bd2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000bd6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd8:	f10c 0c02 	add.w	ip, ip, #2
 8000bdc:	4d5c      	ldr	r5, [pc, #368]	@ (8000d50 <HAL_GPIO_Init+0x1e0>)
 8000bde:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be2:	4c5c      	ldr	r4, [pc, #368]	@ (8000d54 <HAL_GPIO_Init+0x1e4>)
 8000be4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8000be6:	43d4      	mvns	r4, r2
 8000be8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bec:	684f      	ldr	r7, [r1, #4]
 8000bee:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8000bf2:	d001      	beq.n	8000bf8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8000bf4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000bf8:	4d56      	ldr	r5, [pc, #344]	@ (8000d54 <HAL_GPIO_Init+0x1e4>)
 8000bfa:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8000bfc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000bfe:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c02:	684f      	ldr	r7, [r1, #4]
 8000c04:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8000c08:	d001      	beq.n	8000c0e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8000c0a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000c0e:	4d51      	ldr	r5, [pc, #324]	@ (8000d54 <HAL_GPIO_Init+0x1e4>)
 8000c10:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c12:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000c14:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c18:	684f      	ldr	r7, [r1, #4]
 8000c1a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8000c1e:	d001      	beq.n	8000c24 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8000c20:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8000c24:	4d4b      	ldr	r5, [pc, #300]	@ (8000d54 <HAL_GPIO_Init+0x1e4>)
 8000c26:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8000c28:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8000c2a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c2c:	684e      	ldr	r6, [r1, #4]
 8000c2e:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000c32:	d001      	beq.n	8000c38 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8000c34:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8000c38:	4a46      	ldr	r2, [pc, #280]	@ (8000d54 <HAL_GPIO_Init+0x1e4>)
 8000c3a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8000c3c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	680a      	ldr	r2, [r1, #0]
 8000c40:	fa32 f403 	lsrs.w	r4, r2, r3
 8000c44:	f000 8081 	beq.w	8000d4a <HAL_GPIO_Init+0x1da>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8000c50:	ea1c 0202 	ands.w	r2, ip, r2
 8000c54:	d0f2      	beq.n	8000c3c <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c56:	684c      	ldr	r4, [r1, #4]
 8000c58:	f004 0403 	and.w	r4, r4, #3
 8000c5c:	3c01      	subs	r4, #1
 8000c5e:	2c01      	cmp	r4, #1
 8000c60:	d98a      	bls.n	8000b78 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c62:	684c      	ldr	r4, [r1, #4]
 8000c64:	f004 0403 	and.w	r4, r4, #3
 8000c68:	2c03      	cmp	r4, #3
 8000c6a:	d00c      	beq.n	8000c86 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000c6c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c6e:	005d      	lsls	r5, r3, #1
 8000c70:	f04f 0c03 	mov.w	ip, #3
 8000c74:	fa0c fc05 	lsl.w	ip, ip, r5
 8000c78:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7c:	688c      	ldr	r4, [r1, #8]
 8000c7e:	40ac      	lsls	r4, r5
 8000c80:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8000c84:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c86:	684c      	ldr	r4, [r1, #4]
 8000c88:	f004 0403 	and.w	r4, r4, #3
 8000c8c:	2c02      	cmp	r4, #2
 8000c8e:	d087      	beq.n	8000ba0 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8000c90:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c92:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c96:	f04f 0c03 	mov.w	ip, #3
 8000c9a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000c9e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca2:	684c      	ldr	r4, [r1, #4]
 8000ca4:	f004 0403 	and.w	r4, r4, #3
 8000ca8:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cac:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000cb0:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cb2:	684c      	ldr	r4, [r1, #4]
 8000cb4:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8000cb8:	d0c0      	beq.n	8000c3c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4c27      	ldr	r4, [pc, #156]	@ (8000d58 <HAL_GPIO_Init+0x1e8>)
 8000cbc:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8000cbe:	f045 0501 	orr.w	r5, r5, #1
 8000cc2:	6625      	str	r5, [r4, #96]	@ 0x60
 8000cc4:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8000cc6:	f004 0401 	and.w	r4, r4, #1
 8000cca:	9401      	str	r4, [sp, #4]
 8000ccc:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cce:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8000cd2:	f10c 0502 	add.w	r5, ip, #2
 8000cd6:	4c1e      	ldr	r4, [pc, #120]	@ (8000d50 <HAL_GPIO_Init+0x1e0>)
 8000cd8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cdc:	f003 0e03 	and.w	lr, r3, #3
 8000ce0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ce4:	240f      	movs	r4, #15
 8000ce6:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cea:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cee:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f43f af6d 	beq.w	8000bd0 <HAL_GPIO_Init+0x60>
 8000cf6:	4c19      	ldr	r4, [pc, #100]	@ (8000d5c <HAL_GPIO_Init+0x1ec>)
 8000cf8:	42a0      	cmp	r0, r4
 8000cfa:	d01a      	beq.n	8000d32 <HAL_GPIO_Init+0x1c2>
 8000cfc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d00:	42a0      	cmp	r0, r4
 8000d02:	d018      	beq.n	8000d36 <HAL_GPIO_Init+0x1c6>
 8000d04:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d08:	42a0      	cmp	r0, r4
 8000d0a:	d016      	beq.n	8000d3a <HAL_GPIO_Init+0x1ca>
 8000d0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d10:	42a0      	cmp	r0, r4
 8000d12:	d014      	beq.n	8000d3e <HAL_GPIO_Init+0x1ce>
 8000d14:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d18:	42a0      	cmp	r0, r4
 8000d1a:	d012      	beq.n	8000d42 <HAL_GPIO_Init+0x1d2>
 8000d1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d20:	42a0      	cmp	r0, r4
 8000d22:	d010      	beq.n	8000d46 <HAL_GPIO_Init+0x1d6>
 8000d24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d28:	42a0      	cmp	r0, r4
 8000d2a:	f43f af4f 	beq.w	8000bcc <HAL_GPIO_Init+0x5c>
 8000d2e:	2408      	movs	r4, #8
 8000d30:	e74f      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000d32:	2401      	movs	r4, #1
 8000d34:	e74d      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000d36:	2402      	movs	r4, #2
 8000d38:	e74b      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000d3a:	2403      	movs	r4, #3
 8000d3c:	e749      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000d3e:	2404      	movs	r4, #4
 8000d40:	e747      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000d42:	2405      	movs	r4, #5
 8000d44:	e745      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
 8000d46:	2406      	movs	r4, #6
 8000d48:	e743      	b.n	8000bd2 <HAL_GPIO_Init+0x62>
  }
}
 8000d4a:	b003      	add	sp, #12
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010000 	.word	0x40010000
 8000d54:	40010400 	.word	0x40010400
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d60:	b10a      	cbz	r2, 8000d66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d62:	6181      	str	r1, [r0, #24]
 8000d64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d66:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8000d68:	4770      	bx	lr

08000d6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000d6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d6e:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8000d70:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000d74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d854      	bhi.n	8000e2a <PCD_WriteEmptyTxFifo+0xc0>
 8000d80:	4680      	mov	r8, r0
 8000d82:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8000d84:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8000d86:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8000d8a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000d8e:	69d2      	ldr	r2, [r2, #28]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d300      	bcc.n	8000d96 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8000d94:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8000d96:	f102 0903 	add.w	r9, r2, #3
 8000d9a:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000d9e:	e013      	b.n	8000dc8 <PCD_WriteEmptyTxFifo+0x5e>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000da0:	f106 0903 	add.w	r9, r6, #3
 8000da4:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8000da8:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8000dac:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8000db0:	b2b3      	uxth	r3, r6
 8000db2:	b2e2      	uxtb	r2, r4
 8000db4:	6a29      	ldr	r1, [r5, #32]
 8000db6:	4638      	mov	r0, r7
 8000db8:	f002 fe1d 	bl	80039f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8000dbc:	6a2b      	ldr	r3, [r5, #32]
 8000dbe:	4433      	add	r3, r6
 8000dc0:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8000dc2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000dc4:	4433      	add	r3, r6
 8000dc6:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000dc8:	eb07 1344 	add.w	r3, r7, r4, lsl #5
 8000dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d312      	bcc.n	8000dfe <PCD_WriteEmptyTxFifo+0x94>
 8000dd8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000ddc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8000de0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d20a      	bcs.n	8000dfe <PCD_WriteEmptyTxFifo+0x94>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000de8:	b14b      	cbz	r3, 8000dfe <PCD_WriteEmptyTxFifo+0x94>
    len = ep->xfer_len - ep->xfer_count;
 8000dea:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8000dec:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8000df0:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8000df4:	69d6      	ldr	r6, [r2, #28]
 8000df6:	429e      	cmp	r6, r3
 8000df8:	d3d2      	bcc.n	8000da0 <PCD_WriteEmptyTxFifo+0x36>
    len = ep->xfer_len - ep->xfer_count;
 8000dfa:	461e      	mov	r6, r3
 8000dfc:	e7d0      	b.n	8000da0 <PCD_WriteEmptyTxFifo+0x36>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000dfe:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000e02:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8000e06:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8000e0a:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d80e      	bhi.n	8000e30 <PCD_WriteEmptyTxFifo+0xc6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e12:	f004 040f 	and.w	r4, r4, #15
 8000e16:	2201      	movs	r2, #1
 8000e18:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e1a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8000e1e:	ea23 0302 	bic.w	r3, r3, r2
 8000e22:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
  }

  return HAL_OK;
 8000e26:	2000      	movs	r0, #0
 8000e28:	e000      	b.n	8000e2c <PCD_WriteEmptyTxFifo+0xc2>
    return HAL_ERROR;
 8000e2a:	2001      	movs	r0, #1
}
 8000e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8000e30:	2000      	movs	r0, #0
 8000e32:	e7fb      	b.n	8000e2c <PCD_WriteEmptyTxFifo+0xc2>

08000e34 <HAL_PCD_Init>:
{
 8000e34:	b530      	push	{r4, r5, lr}
 8000e36:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d07c      	beq.n	8000f36 <HAL_PCD_Init+0x102>
 8000e3c:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e3e:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8000e42:	b1bb      	cbz	r3, 8000e74 <HAL_PCD_Init+0x40>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e44:	2303      	movs	r3, #3
 8000e46:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  hpcd->Init.dma_enable = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71a3      	strb	r3, [r4, #6]
  __HAL_PCD_DISABLE(hpcd);
 8000e4e:	6820      	ldr	r0, [r4, #0]
 8000e50:	f002 fb9e 	bl	8003590 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e54:	7c23      	ldrb	r3, [r4, #16]
 8000e56:	f88d 3000 	strb.w	r3, [sp]
 8000e5a:	1d23      	adds	r3, r4, #4
 8000e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5e:	6820      	ldr	r0, [r4, #0]
 8000e60:	f002 fb00 	bl	8003464 <USB_CoreInit>
 8000e64:	b158      	cbz	r0, 8000e7e <HAL_PCD_Init+0x4a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e66:	2302      	movs	r3, #2
 8000e68:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000e6c:	2501      	movs	r5, #1
}
 8000e6e:	4628      	mov	r0, r5
 8000e70:	b003      	add	sp, #12
 8000e72:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000e74:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8000e78:	f003 ffe6 	bl	8004e48 <HAL_PCD_MspInit>
 8000e7c:	e7e2      	b.n	8000e44 <HAL_PCD_Init+0x10>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	6820      	ldr	r0, [r4, #0]
 8000e82:	f002 ff9a 	bl	8003dba <USB_SetCurrentMode>
 8000e86:	4602      	mov	r2, r0
 8000e88:	b908      	cbnz	r0, 8000e8e <HAL_PCD_Init+0x5a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e017      	b.n	8000ebe <HAL_PCD_Init+0x8a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000e94:	2501      	movs	r5, #1
 8000e96:	e7ea      	b.n	8000e6e <HAL_PCD_Init+0x3a>
    hpcd->IN_ep[i].is_in = 1U;
 8000e98:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000e9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8000ea4:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ea6:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eac:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eae:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eb0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000eb4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000eb8:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	7920      	ldrb	r0, [r4, #4]
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d8e9      	bhi.n	8000e98 <HAL_PCD_Init+0x64>
 8000ec4:	e016      	b.n	8000ef4 <HAL_PCD_Init+0xc0>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec6:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000eca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8000ed4:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ed8:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000edc:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ee0:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ee4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000ee8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000eec:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef0:	3201      	adds	r2, #1
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	4290      	cmp	r0, r2
 8000ef6:	d8e6      	bhi.n	8000ec6 <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ef8:	7c23      	ldrb	r3, [r4, #16]
 8000efa:	f88d 3000 	strb.w	r3, [sp]
 8000efe:	1d23      	adds	r3, r4, #4
 8000f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f02:	6820      	ldr	r0, [r4, #0]
 8000f04:	f002 fb9a 	bl	800363c <USB_DevInit>
 8000f08:	4605      	mov	r5, r0
 8000f0a:	b958      	cbnz	r0, 8000f24 <HAL_PCD_Init+0xf0>
  hpcd->USB_Address = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f10:	2301      	movs	r3, #1
 8000f12:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8000f16:	7b23      	ldrb	r3, [r4, #12]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d008      	beq.n	8000f2e <HAL_PCD_Init+0xfa>
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	f002 ff0b 	bl	8003d38 <USB_DevDisconnect>
  return HAL_OK;
 8000f22:	e7a4      	b.n	8000e6e <HAL_PCD_Init+0x3a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f24:	2302      	movs	r3, #2
 8000f26:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000f2a:	2501      	movs	r5, #1
 8000f2c:	e79f      	b.n	8000e6e <HAL_PCD_Init+0x3a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f000 fcce 	bl	80018d0 <HAL_PCDEx_ActivateLPM>
 8000f34:	e7f2      	b.n	8000f1c <HAL_PCD_Init+0xe8>
    return HAL_ERROR;
 8000f36:	2501      	movs	r5, #1
 8000f38:	e799      	b.n	8000e6e <HAL_PCD_Init+0x3a>

08000f3a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f3a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8000f3c:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d016      	beq.n	8000f72 <HAL_PCD_Start+0x38>
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if (hpcd->Init.battery_charging_enable == 1U)
 8000f4e:	7b43      	ldrb	r3, [r0, #13]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d009      	beq.n	8000f68 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	f002 fb15 	bl	8003584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f5a:	6820      	ldr	r0, [r4, #0]
 8000f5c:	f002 fede 	bl	8003d1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8000f66:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000f68:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f6e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f70:	e7f0      	b.n	8000f54 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8000f72:	2002      	movs	r0, #2
}
 8000f74:	4770      	bx	lr
	...

08000f78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f7a:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8000f7c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000f7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8000f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000f86:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000f88:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <PCD_EP_OutXfrComplete_int+0x40>)
 8000f8a:	4294      	cmp	r4, r2
 8000f8c:	d10f      	bne.n	8000fae <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000f8e:	f415 4f00 	tst.w	r5, #32768	@ 0x8000
 8000f92:	d003      	beq.n	8000f9c <PCD_EP_OutXfrComplete_int+0x24>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000f94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	e00b      	b.n	8000fb4 <PCD_EP_OutXfrComplete_int+0x3c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f9c:	f015 0f20 	tst.w	r5, #32
 8000fa0:	d001      	beq.n	8000fa6 <PCD_EP_OutXfrComplete_int+0x2e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000fa6:	b2c9      	uxtb	r1, r1
 8000fa8:	f003 ffc2 	bl	8004f30 <HAL_PCD_DataOutStageCallback>
 8000fac:	e002      	b.n	8000fb4 <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000fae:	b2c9      	uxtb	r1, r1
 8000fb0:	f003 ffbe 	bl	8004f30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	4f54310a 	.word	0x4f54310a

08000fbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000fbc:	b510      	push	{r4, lr}
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fbe:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8000fc0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000fc2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8000fc6:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000fca:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <PCD_EP_OutSetupPacket_int+0x2c>)
 8000fcc:	4294      	cmp	r4, r2
 8000fce:	d907      	bls.n	8000fe0 <PCD_EP_OutSetupPacket_int+0x24>
 8000fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000fd4:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8000fd8:	d002      	beq.n	8000fe0 <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000fda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fde:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000fe0:	f003 ff9e 	bl	8004f20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	4f54300a 	.word	0x4f54300a

08000fec <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000fec:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00c      	beq.n	800100e <HAL_PCD_SetAddress+0x22>
{
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8000ffe:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001000:	6800      	ldr	r0, [r0, #0]
 8001002:	f002 fe7b 	bl	8003cfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001006:	2000      	movs	r0, #0
 8001008:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800100c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800100e:	2002      	movs	r0, #2
}
 8001010:	4770      	bx	lr

08001012 <HAL_PCD_EP_Open>:
{
 8001012:	b538      	push	{r3, r4, r5, lr}
 8001014:	4605      	mov	r5, r0
 8001016:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001018:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800101c:	d12b      	bne.n	8001076 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800101e:	f001 0e0f 	and.w	lr, r1, #15
 8001022:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8001026:	00a4      	lsls	r4, r4, #2
 8001028:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 800102c:	4404      	add	r4, r0
 800102e:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8001030:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8001034:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001038:	2000      	movs	r0, #0
 800103a:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800103e:	f00c 0c0f 	and.w	ip, ip, #15
 8001042:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001046:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800104a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800104c:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800104e:	784a      	ldrb	r2, [r1, #1]
 8001050:	b10a      	cbz	r2, 8001056 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8001052:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001056:	2b02      	cmp	r3, #2
 8001058:	d01c      	beq.n	8001094 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 800105a:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 800105e:	2b01      	cmp	r3, #1
 8001060:	d01b      	beq.n	800109a <HAL_PCD_EP_Open+0x88>
 8001062:	2301      	movs	r3, #1
 8001064:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001068:	6828      	ldr	r0, [r5, #0]
 800106a:	f002 fba7 	bl	80037bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800106e:	2000      	movs	r0, #0
 8001070:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8001074:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001076:	f001 000f 	and.w	r0, r1, #15
 800107a:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800107e:	0089      	lsls	r1, r1, #2
 8001080:	3110      	adds	r1, #16
 8001082:	4429      	add	r1, r5
 8001084:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001086:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800108a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800108e:	2401      	movs	r4, #1
 8001090:	7544      	strb	r4, [r0, #21]
 8001092:	e7d4      	b.n	800103e <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	714b      	strb	r3, [r1, #5]
 8001098:	e7df      	b.n	800105a <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 800109a:	2002      	movs	r0, #2
 800109c:	e7ea      	b.n	8001074 <HAL_PCD_EP_Open+0x62>

0800109e <HAL_PCD_EP_Close>:
{
 800109e:	b510      	push	{r4, lr}
 80010a0:	4604      	mov	r4, r0
 80010a2:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80010a4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80010a8:	d120      	bne.n	80010ec <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010aa:	f001 000f 	and.w	r0, r1, #15
 80010ae:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80010b8:	4423      	add	r3, r4
 80010ba:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 80010bc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80010c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80010c4:	2300      	movs	r3, #0
 80010c6:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ca:	f002 020f 	and.w	r2, r2, #15
 80010ce:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80010d0:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d018      	beq.n	800110a <HAL_PCD_EP_Close+0x6c>
 80010d8:	2301      	movs	r3, #1
 80010da:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	f002 fbba 	bl	8003858 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80010ea:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ec:	f001 000f 	and.w	r0, r1, #15
 80010f0:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	3310      	adds	r3, #16
 80010f8:	4423      	add	r3, r4
 80010fa:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80010fc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001100:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001104:	2301      	movs	r3, #1
 8001106:	7543      	strb	r3, [r0, #21]
 8001108:	e7df      	b.n	80010ca <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 800110a:	2002      	movs	r0, #2
 800110c:	e7ed      	b.n	80010ea <HAL_PCD_EP_Close+0x4c>

0800110e <HAL_PCD_EP_Receive>:
{
 800110e:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001110:	f001 0c0f 	and.w	ip, r1, #15
 8001114:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001118:	0089      	lsls	r1, r1, #2
 800111a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800111e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001120:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001124:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001128:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 800112c:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8001130:	2400      	movs	r4, #0
 8001132:	f8ce 4268 	str.w	r4, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8001136:	f88e 4255 	strb.w	r4, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800113a:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800113e:	3104      	adds	r1, #4
 8001140:	6800      	ldr	r0, [r0, #0]
 8001142:	f002 fc6d 	bl	8003a20 <USB_EPStartXfer>
}
 8001146:	4620      	mov	r0, r4
 8001148:	bd10      	pop	{r4, pc}

0800114a <HAL_PCD_EP_Transmit>:
{
 800114a:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800114c:	f001 0c0f 	and.w	ip, r1, #15
 8001150:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001154:	0089      	lsls	r1, r1, #2
 8001156:	3110      	adds	r1, #16
 8001158:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800115a:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800115e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001162:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8001166:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 800116a:	2400      	movs	r4, #0
 800116c:	f8ce 4028 	str.w	r4, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8001170:	2301      	movs	r3, #1
 8001172:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001176:	f88e c014 	strb.w	ip, [lr, #20]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800117a:	3104      	adds	r1, #4
 800117c:	6800      	ldr	r0, [r0, #0]
 800117e:	f002 fc4f 	bl	8003a20 <USB_EPStartXfer>
}
 8001182:	4620      	mov	r0, r4
 8001184:	bd10      	pop	{r4, pc}

08001186 <HAL_PCD_EP_SetStall>:
{
 8001186:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001188:	f001 050f 	and.w	r5, r1, #15
 800118c:	7902      	ldrb	r2, [r0, #4]
 800118e:	42aa      	cmp	r2, r5
 8001190:	d337      	bcc.n	8001202 <HAL_PCD_EP_SetStall+0x7c>
 8001192:	4604      	mov	r4, r0
 8001194:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001196:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800119a:	d11f      	bne.n	80011dc <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800119c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80011a0:	0089      	lsls	r1, r1, #2
 80011a2:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80011a6:	4401      	add	r1, r0
 80011a8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80011aa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80011ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 80011b8:	2301      	movs	r3, #1
 80011ba:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011bc:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80011be:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d01f      	beq.n	8001206 <HAL_PCD_EP_SetStall+0x80>
 80011c6:	2301      	movs	r3, #1
 80011c8:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011cc:	6820      	ldr	r0, [r4, #0]
 80011ce:	f002 fd3a 	bl	8003c46 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011d2:	b185      	cbz	r5, 80011f6 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80011da:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011dc:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80011e0:	0089      	lsls	r1, r1, #2
 80011e2:	3110      	adds	r1, #16
 80011e4:	4401      	add	r1, r0
 80011e6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80011e8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80011ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80011f0:	2201      	movs	r2, #1
 80011f2:	755a      	strb	r2, [r3, #21]
 80011f4:	e7e0      	b.n	80011b8 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80011f6:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80011fa:	6820      	ldr	r0, [r4, #0]
 80011fc:	f002 fe1e 	bl	8003e3c <USB_EP0_OutStart>
 8001200:	e7e8      	b.n	80011d4 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
 8001204:	e7e9      	b.n	80011da <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001206:	2002      	movs	r0, #2
 8001208:	e7e7      	b.n	80011da <HAL_PCD_EP_SetStall+0x54>

0800120a <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800120a:	f001 030f 	and.w	r3, r1, #15
 800120e:	7902      	ldrb	r2, [r0, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	d330      	bcc.n	8001276 <HAL_PCD_EP_ClrStall+0x6c>
{
 8001214:	b510      	push	{r4, lr}
 8001216:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001218:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800121c:	d11e      	bne.n	800125c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800121e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001222:	0089      	lsls	r1, r1, #2
 8001224:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001228:	4401      	add	r1, r0
 800122a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800122c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001234:	2000      	movs	r0, #0
 8001236:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 800123a:	2200      	movs	r2, #0
 800123c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800123e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001240:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001244:	2b01      	cmp	r3, #1
 8001246:	d018      	beq.n	800127a <HAL_PCD_EP_ClrStall+0x70>
 8001248:	2301      	movs	r3, #1
 800124a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800124e:	6820      	ldr	r0, [r4, #0]
 8001250:	f002 fd26 	bl	8003ca0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001254:	2000      	movs	r0, #0
 8001256:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800125a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001260:	0089      	lsls	r1, r1, #2
 8001262:	3110      	adds	r1, #16
 8001264:	4401      	add	r1, r0
 8001266:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001268:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800126c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001270:	2001      	movs	r0, #1
 8001272:	7550      	strb	r0, [r2, #21]
 8001274:	e7e1      	b.n	800123a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8001276:	2001      	movs	r0, #1
}
 8001278:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800127a:	2002      	movs	r0, #2
 800127c:	e7ed      	b.n	800125a <HAL_PCD_EP_ClrStall+0x50>

0800127e <HAL_PCD_EP_Abort>:
{
 800127e:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001280:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001284:	d10c      	bne.n	80012a0 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001286:	f001 010f 	and.w	r1, r1, #15
 800128a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800128e:	0089      	lsls	r1, r1, #2
 8001290:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001294:	4401      	add	r1, r0
 8001296:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001298:	6800      	ldr	r0, [r0, #0]
 800129a:	f002 fb4d 	bl	8003938 <USB_EPStopXfer>
}
 800129e:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012a0:	f001 010f 	and.w	r1, r1, #15
 80012a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80012a8:	0089      	lsls	r1, r1, #2
 80012aa:	3110      	adds	r1, #16
 80012ac:	4401      	add	r1, r0
 80012ae:	3104      	adds	r1, #4
 80012b0:	e7f2      	b.n	8001298 <HAL_PCD_EP_Abort+0x1a>

080012b2 <HAL_PCD_IRQHandler>:
{
 80012b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b6:	b083      	sub	sp, #12
 80012b8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ba:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012bc:	4628      	mov	r0, r5
 80012be:	f002 fd78 	bl	8003db2 <USB_GetMode>
 80012c2:	b110      	cbz	r0, 80012ca <HAL_PCD_IRQHandler+0x18>
}
 80012c4:	b003      	add	sp, #12
 80012c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ca:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012cc:	6820      	ldr	r0, [r4, #0]
 80012ce:	f002 fd41 	bl	8003d54 <USB_ReadInterrupts>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0f6      	beq.n	80012c4 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012d6:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80012e0:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012e4:	6820      	ldr	r0, [r4, #0]
 80012e6:	f002 fd35 	bl	8003d54 <USB_ReadInterrupts>
 80012ea:	f010 0f02 	tst.w	r0, #2
 80012ee:	d004      	beq.n	80012fa <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	6953      	ldr	r3, [r2, #20]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012fa:	6820      	ldr	r0, [r4, #0]
 80012fc:	f002 fd2a 	bl	8003d54 <USB_ReadInterrupts>
 8001300:	f010 0f10 	tst.w	r0, #16
 8001304:	d014      	beq.n	8001330 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	6993      	ldr	r3, [r2, #24]
 800130a:	f023 0310 	bic.w	r3, r3, #16
 800130e:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001310:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001314:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001318:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800131c:	2b02      	cmp	r3, #2
 800131e:	d069      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x142>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001320:	2b06      	cmp	r3, #6
 8001322:	f000 808d 	beq.w	8001440 <HAL_PCD_IRQHandler+0x18e>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001326:	6822      	ldr	r2, [r4, #0]
 8001328:	6993      	ldr	r3, [r2, #24]
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001330:	6820      	ldr	r0, [r4, #0]
 8001332:	f002 fd0f 	bl	8003d54 <USB_ReadInterrupts>
 8001336:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 800133a:	f040 8093 	bne.w	8001464 <HAL_PCD_IRQHandler+0x1b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800133e:	6820      	ldr	r0, [r4, #0]
 8001340:	f002 fd08 	bl	8003d54 <USB_ReadInterrupts>
 8001344:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8001348:	f040 80fc 	bne.w	8001544 <HAL_PCD_IRQHandler+0x292>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	f002 fd01 	bl	8003d54 <USB_ReadInterrupts>
 8001352:	2800      	cmp	r0, #0
 8001354:	f2c0 8163 	blt.w	800161e <HAL_PCD_IRQHandler+0x36c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	f002 fcfb 	bl	8003d54 <USB_ReadInterrupts>
 800135e:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001362:	d009      	beq.n	8001378 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f013 0f01 	tst.w	r3, #1
 800136a:	f040 8170 	bne.w	800164e <HAL_PCD_IRQHandler+0x39c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800136e:	6822      	ldr	r2, [r4, #0]
 8001370:	6953      	ldr	r3, [r2, #20]
 8001372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001376:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	f002 fceb 	bl	8003d54 <USB_ReadInterrupts>
 800137e:	f010 6f00 	tst.w	r0, #134217728	@ 0x8000000
 8001382:	d015      	beq.n	80013b0 <HAL_PCD_IRQHandler+0xfe>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	6953      	ldr	r3, [r2, #20]
 8001388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800138c:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800138e:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 815f 	bne.w	8001656 <HAL_PCD_IRQHandler+0x3a4>
        hpcd->LPM_State = LPM_L1;
 8001398:	2101      	movs	r1, #1
 800139a:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a2:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80013a6:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f003 ff00 	bl	80051b0 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	f002 fccf 	bl	8003d54 <USB_ReadInterrupts>
 80013b6:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 80013ba:	f040 8150 	bne.w	800165e <HAL_PCD_IRQHandler+0x3ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	f002 fcc8 	bl	8003d54 <USB_ReadInterrupts>
 80013c4:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 80013c8:	f040 819c 	bne.w	8001704 <HAL_PCD_IRQHandler+0x452>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80013cc:	6820      	ldr	r0, [r4, #0]
 80013ce:	f002 fcc1 	bl	8003d54 <USB_ReadInterrupts>
 80013d2:	f010 0f08 	tst.w	r0, #8
 80013d6:	f040 81ad 	bne.w	8001734 <HAL_PCD_IRQHandler+0x482>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80013da:	6820      	ldr	r0, [r4, #0]
 80013dc:	f002 fcba 	bl	8003d54 <USB_ReadInterrupts>
 80013e0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80013e4:	f000 81c0 	beq.w	8001768 <HAL_PCD_IRQHandler+0x4b6>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80013e8:	69ab      	ldr	r3, [r5, #24]
 80013ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013ee:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80013f0:	2601      	movs	r6, #1
 80013f2:	e1a9      	b.n	8001748 <HAL_PCD_IRQHandler+0x496>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013f4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013f8:	ea18 0f03 	tst.w	r8, r3
 80013fc:	d093      	beq.n	8001326 <HAL_PCD_IRQHandler+0x74>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013fe:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800140c:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001410:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001414:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001418:	4628      	mov	r0, r5
 800141a:	f002 fbf1 	bl	8003c00 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141e:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001422:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001426:	4453      	add	r3, sl
 8001428:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800142c:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8001430:	9a01      	ldr	r2, [sp, #4]
 8001432:	444a      	add	r2, r9
 8001434:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001438:	4453      	add	r3, sl
 800143a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 800143e:	e772      	b.n	8001326 <HAL_PCD_IRQHandler+0x74>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001440:	2208      	movs	r2, #8
 8001442:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001446:	4628      	mov	r0, r5
 8001448:	f002 fbda 	bl	8003c00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001454:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001458:	f3c8 180a 	ubfx	r8, r8, #4, #11
 800145c:	4442      	add	r2, r8
 800145e:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001462:	e760      	b.n	8001326 <HAL_PCD_IRQHandler+0x74>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001464:	6820      	ldr	r0, [r4, #0]
 8001466:	f002 fc79 	bl	8003d5c <USB_ReadDevAllOutEpInterrupt>
 800146a:	4680      	mov	r8, r0
      epnum = 0U;
 800146c:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800146e:	e035      	b.n	80014dc <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001470:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001474:	2201      	movs	r2, #1
 8001476:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800147a:	4649      	mov	r1, r9
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fd7b 	bl	8000f78 <PCD_EP_OutXfrComplete_int>
 8001482:	e03c      	b.n	80014fe <HAL_PCD_IRQHandler+0x24c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001484:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001488:	2208      	movs	r2, #8
 800148a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800148e:	4649      	mov	r1, r9
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff fd93 	bl	8000fbc <PCD_EP_OutSetupPacket_int>
 8001496:	e035      	b.n	8001504 <HAL_PCD_IRQHandler+0x252>
            if (ep->is_iso_incomplete == 1U)
 8001498:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800149c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80014a0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d041      	beq.n	800152c <HAL_PCD_IRQHandler+0x27a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014a8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80014ac:	2202      	movs	r2, #2
 80014ae:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014b2:	f01a 0f20 	tst.w	sl, #32
 80014b6:	d004      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014b8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80014bc:	2220      	movs	r2, #32
 80014be:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014c2:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 80014c6:	d005      	beq.n	80014d4 <HAL_PCD_IRQHandler+0x222>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014c8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80014cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d0:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 80014d4:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80014d8:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80014dc:	f1b8 0f00 	cmp.w	r8, #0
 80014e0:	f43f af2d 	beq.w	800133e <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 80014e4:	f018 0f01 	tst.w	r8, #1
 80014e8:	d0f4      	beq.n	80014d4 <HAL_PCD_IRQHandler+0x222>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ea:	fa5f fb89 	uxtb.w	fp, r9
 80014ee:	4659      	mov	r1, fp
 80014f0:	6820      	ldr	r0, [r4, #0]
 80014f2:	f002 fc43 	bl	8003d7c <USB_ReadDevOutEPInterrupt>
 80014f6:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014f8:	f010 0f01 	tst.w	r0, #1
 80014fc:	d1b8      	bne.n	8001470 <HAL_PCD_IRQHandler+0x1be>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014fe:	f01a 0f08 	tst.w	sl, #8
 8001502:	d1bf      	bne.n	8001484 <HAL_PCD_IRQHandler+0x1d2>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001504:	f01a 0f10 	tst.w	sl, #16
 8001508:	d004      	beq.n	8001514 <HAL_PCD_IRQHandler+0x262>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800150a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800150e:	2210      	movs	r2, #16
 8001510:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001514:	f01a 0f02 	tst.w	sl, #2
 8001518:	d0cb      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x200>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800151a:	696b      	ldr	r3, [r5, #20]
 800151c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001520:	d0ba      	beq.n	8001498 <HAL_PCD_IRQHandler+0x1e6>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e7b5      	b.n	8001498 <HAL_PCD_IRQHandler+0x1e6>
              ep->is_iso_incomplete = 0U;
 800152c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800153a:	4659      	mov	r1, fp
 800153c:	4620      	mov	r0, r4
 800153e:	f003 fd59 	bl	8004ff4 <HAL_PCD_ISOOUTIncompleteCallback>
 8001542:	e7b1      	b.n	80014a8 <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001544:	6820      	ldr	r0, [r4, #0]
 8001546:	f002 fc11 	bl	8003d6c <USB_ReadDevAllInEpInterrupt>
 800154a:	4680      	mov	r8, r0
      epnum = 0U;
 800154c:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800154e:	e01b      	b.n	8001588 <HAL_PCD_IRQHandler+0x2d6>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001550:	f009 020f 	and.w	r2, r9, #15
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	ea23 0302 	bic.w	r3, r3, r2
 8001560:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001562:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001566:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800156a:	4659      	mov	r1, fp
 800156c:	4620      	mov	r0, r4
 800156e:	f003 fceb 	bl	8004f48 <HAL_PCD_DataInStageCallback>
 8001572:	e01a      	b.n	80015aa <HAL_PCD_IRQHandler+0x2f8>
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001574:	f01a 0f02 	tst.w	sl, #2
 8001578:	d130      	bne.n	80015dc <HAL_PCD_IRQHandler+0x32a>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800157a:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800157e:	d149      	bne.n	8001614 <HAL_PCD_IRQHandler+0x362>
        epnum++;
 8001580:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001584:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001588:	f1b8 0f00 	cmp.w	r8, #0
 800158c:	f43f aede 	beq.w	800134c <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001590:	f018 0f01 	tst.w	r8, #1
 8001594:	d0f4      	beq.n	8001580 <HAL_PCD_IRQHandler+0x2ce>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001596:	fa5f fb89 	uxtb.w	fp, r9
 800159a:	4659      	mov	r1, fp
 800159c:	6820      	ldr	r0, [r4, #0]
 800159e:	f002 fbf6 	bl	8003d8e <USB_ReadDevInEPInterrupt>
 80015a2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015a4:	f010 0f01 	tst.w	r0, #1
 80015a8:	d1d2      	bne.n	8001550 <HAL_PCD_IRQHandler+0x29e>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015aa:	f01a 0f08 	tst.w	sl, #8
 80015ae:	d004      	beq.n	80015ba <HAL_PCD_IRQHandler+0x308>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015b0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80015b4:	2208      	movs	r2, #8
 80015b6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ba:	f01a 0f10 	tst.w	sl, #16
 80015be:	d004      	beq.n	80015ca <HAL_PCD_IRQHandler+0x318>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015c0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80015c4:	2210      	movs	r2, #16
 80015c6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ca:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80015ce:	d0d1      	beq.n	8001574 <HAL_PCD_IRQHandler+0x2c2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015d0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80015d4:	2240      	movs	r2, #64	@ 0x40
 80015d6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80015da:	e7cb      	b.n	8001574 <HAL_PCD_IRQHandler+0x2c2>
            (void)USB_FlushTxFifo(USBx, epnum);
 80015dc:	4649      	mov	r1, r9
 80015de:	4628      	mov	r0, r5
 80015e0:	f001 ffdc 	bl	800359c <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80015e4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80015e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80015ec:	7ddb      	ldrb	r3, [r3, #23]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d005      	beq.n	80015fe <HAL_PCD_IRQHandler+0x34c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015f2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80015f6:	2202      	movs	r2, #2
 80015f8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80015fc:	e7bd      	b.n	800157a <HAL_PCD_IRQHandler+0x2c8>
              ep->is_iso_incomplete = 0U;
 80015fe:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001606:	2200      	movs	r2, #0
 8001608:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800160a:	4659      	mov	r1, fp
 800160c:	4620      	mov	r0, r4
 800160e:	f003 fcf7 	bl	8005000 <HAL_PCD_ISOINIncompleteCallback>
 8001612:	e7ee      	b.n	80015f2 <HAL_PCD_IRQHandler+0x340>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001614:	4649      	mov	r1, r9
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff fba7 	bl	8000d6a <PCD_WriteEmptyTxFifo>
 800161c:	e7b0      	b.n	8001580 <HAL_PCD_IRQHandler+0x2ce>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001626:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 800162a:	2b01      	cmp	r3, #1
 800162c:	d008      	beq.n	8001640 <HAL_PCD_IRQHandler+0x38e>
        HAL_PCD_ResumeCallback(hpcd);
 800162e:	4620      	mov	r0, r4
 8001630:	f003 fcc6 	bl	8004fc0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	6953      	ldr	r3, [r2, #20]
 8001638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	e68b      	b.n	8001358 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8001640:	2100      	movs	r1, #0
 8001642:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001646:	4620      	mov	r0, r4
 8001648:	f003 fdb2 	bl	80051b0 <HAL_PCDEx_LPM_Callback>
 800164c:	e7f2      	b.n	8001634 <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_SuspendCallback(hpcd);
 800164e:	4620      	mov	r0, r4
 8001650:	f003 fc9e 	bl	8004f90 <HAL_PCD_SuspendCallback>
 8001654:	e68b      	b.n	800136e <HAL_PCD_IRQHandler+0xbc>
        HAL_PCD_SuspendCallback(hpcd);
 8001656:	4620      	mov	r0, r4
 8001658:	f003 fc9a 	bl	8004f90 <HAL_PCD_SuspendCallback>
 800165c:	e6a8      	b.n	80013b0 <HAL_PCD_IRQHandler+0xfe>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001666:	2110      	movs	r1, #16
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	f001 ff97 	bl	800359c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	e01a      	b.n	80016a6 <HAL_PCD_IRQHandler+0x3f4>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001670:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001674:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001678:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800167c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001680:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001684:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001688:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800168c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001690:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001694:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001698:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800169c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80016a0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a4:	3601      	adds	r6, #1
 80016a6:	7923      	ldrb	r3, [r4, #4]
 80016a8:	42b3      	cmp	r3, r6
 80016aa:	d8e1      	bhi.n	8001670 <HAL_PCD_IRQHandler+0x3be>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80016b2:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016b4:	7be3      	ldrb	r3, [r4, #15]
 80016b6:	b1d3      	cbz	r3, 80016ee <HAL_PCD_IRQHandler+0x43c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016bc:	f043 030b 	orr.w	r3, r3, #11
 80016c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016c6:	f043 030b 	orr.w	r3, r3, #11
 80016ca:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016cc:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 80016d0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80016d4:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016d8:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	f002 fbad 	bl	8003e3c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016e2:	6822      	ldr	r2, [r4, #0]
 80016e4:	6953      	ldr	r3, [r2, #20]
 80016e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ea:	6153      	str	r3, [r2, #20]
 80016ec:	e667      	b.n	80013be <HAL_PCD_IRQHandler+0x10c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016f4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80016f8:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f043 030b 	orr.w	r3, r3, #11
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e7e3      	b.n	80016cc <HAL_PCD_IRQHandler+0x41a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	f002 fb89 	bl	8003e1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800170a:	6820      	ldr	r0, [r4, #0]
 800170c:	f002 f848 	bl	80037a0 <USB_GetDevSpeed>
 8001710:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001712:	6826      	ldr	r6, [r4, #0]
 8001714:	f000 feb6 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 8001718:	4601      	mov	r1, r0
 800171a:	79e2      	ldrb	r2, [r4, #7]
 800171c:	4630      	mov	r0, r6
 800171e:	f001 febf 	bl	80034a0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001722:	4620      	mov	r0, r4
 8001724:	f003 fc21 	bl	8004f6a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001728:	6822      	ldr	r2, [r4, #0]
 800172a:	6953      	ldr	r3, [r2, #20]
 800172c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	e64b      	b.n	80013cc <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_SOFCallback(hpcd);
 8001734:	4620      	mov	r0, r4
 8001736:	f003 fc12 	bl	8004f5e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	6953      	ldr	r3, [r2, #20]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	6153      	str	r3, [r2, #20]
 8001744:	e649      	b.n	80013da <HAL_PCD_IRQHandler+0x128>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001746:	3601      	adds	r6, #1
 8001748:	7923      	ldrb	r3, [r4, #4]
 800174a:	42b3      	cmp	r3, r6
 800174c:	d90c      	bls.n	8001768 <HAL_PCD_IRQHandler+0x4b6>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800174e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001752:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001756:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 800175a:	2b01      	cmp	r3, #1
 800175c:	d1f3      	bne.n	8001746 <HAL_PCD_IRQHandler+0x494>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800175e:	b2f1      	uxtb	r1, r6
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff fd8c 	bl	800127e <HAL_PCD_EP_Abort>
 8001766:	e7ee      	b.n	8001746 <HAL_PCD_IRQHandler+0x494>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	f002 faf3 	bl	8003d54 <USB_ReadInterrupts>
 800176e:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001772:	d125      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x50e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	f002 faed 	bl	8003d54 <USB_ReadInterrupts>
 800177a:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800177e:	d059      	beq.n	8001834 <HAL_PCD_IRQHandler+0x582>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001780:	2301      	movs	r3, #1
 8001782:	e026      	b.n	80017d2 <HAL_PCD_IRQHandler+0x520>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001784:	3601      	adds	r6, #1
 8001786:	7923      	ldrb	r3, [r4, #4]
 8001788:	42b3      	cmp	r3, r6
 800178a:	d91b      	bls.n	80017c4 <HAL_PCD_IRQHandler+0x512>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800178c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001790:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001794:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800179c:	7e1b      	ldrb	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d1f0      	bne.n	8001784 <HAL_PCD_IRQHandler+0x4d2>
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	daee      	bge.n	8001784 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80017a6:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80017aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017ae:	2201      	movs	r2, #1
 80017b0:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80017b2:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 80017b6:	b2c9      	uxtb	r1, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7ff fd60 	bl	800127e <HAL_PCD_EP_Abort>
 80017be:	e7e1      	b.n	8001784 <HAL_PCD_IRQHandler+0x4d2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017c0:	2601      	movs	r6, #1
 80017c2:	e7e0      	b.n	8001786 <HAL_PCD_IRQHandler+0x4d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	6953      	ldr	r3, [r2, #20]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017cc:	6153      	str	r3, [r2, #20]
 80017ce:	e7d1      	b.n	8001774 <HAL_PCD_IRQHandler+0x4c2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017d0:	3301      	adds	r3, #1
 80017d2:	7922      	ldrb	r2, [r4, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d928      	bls.n	800182a <HAL_PCD_IRQHandler+0x578>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80017d8:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80017dc:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80017e0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80017e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017e8:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 80017ec:	2a01      	cmp	r2, #1
 80017ee:	d1ef      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x51e>
 80017f0:	2900      	cmp	r1, #0
 80017f2:	daed      	bge.n	80017d0 <HAL_PCD_IRQHandler+0x51e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80017f4:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 80017f8:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 80017fc:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001800:	4291      	cmp	r1, r2
 8001802:	d1e5      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x51e>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001804:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001808:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800180c:	2101      	movs	r1, #1
 800180e:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001812:	69aa      	ldr	r2, [r5, #24]
 8001814:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001818:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800181a:	696a      	ldr	r2, [r5, #20]
 800181c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001820:	d1d6      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x51e>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001828:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	6953      	ldr	r3, [r2, #20]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001832:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001834:	6820      	ldr	r0, [r4, #0]
 8001836:	f002 fa8d 	bl	8003d54 <USB_ReadInterrupts>
 800183a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800183e:	d110      	bne.n	8001862 <HAL_PCD_IRQHandler+0x5b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001840:	6820      	ldr	r0, [r4, #0]
 8001842:	f002 fa87 	bl	8003d54 <USB_ReadInterrupts>
 8001846:	f010 0f04 	tst.w	r0, #4
 800184a:	f43f ad3b 	beq.w	80012c4 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001852:	f015 0f04 	tst.w	r5, #4
 8001856:	d10d      	bne.n	8001874 <HAL_PCD_IRQHandler+0x5c2>
      hpcd->Instance->GOTGINT |= RegVal;
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	6853      	ldr	r3, [r2, #4]
 800185c:	432b      	orrs	r3, r5
 800185e:	6053      	str	r3, [r2, #4]
 8001860:	e530      	b.n	80012c4 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001862:	4620      	mov	r0, r4
 8001864:	f003 fbd2 	bl	800500c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6953      	ldr	r3, [r2, #20]
 800186c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	e7e5      	b.n	8001840 <HAL_PCD_IRQHandler+0x58e>
        HAL_PCD_DisconnectCallback(hpcd);
 8001874:	4620      	mov	r0, r4
 8001876:	f003 fbcf 	bl	8005018 <HAL_PCD_DisconnectCallback>
 800187a:	e7ed      	b.n	8001858 <HAL_PCD_IRQHandler+0x5a6>

0800187c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800187c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800187e:	6804      	ldr	r4, [r0, #0]
 8001880:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8001882:	b931      	cbnz	r1, 8001892 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001884:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001888:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800188a:	2000      	movs	r0, #0
 800188c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001894:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001896:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800189a:	2300      	movs	r3, #0
 800189c:	e008      	b.n	80018b0 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800189e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80018a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80018a6:	6849      	ldr	r1, [r1, #4]
 80018a8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d3f2      	bcc.n	800189e <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80018b8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80018bc:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80018c0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80018c4:	6060      	str	r0, [r4, #4]
 80018c6:	e7e0      	b.n	800188a <HAL_PCDEx_SetTxFiFo+0xe>

080018c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80018c8:	6803      	ldr	r3, [r0, #0]
 80018ca:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80018cc:	2000      	movs	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018d0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018d2:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80018d4:	2101      	movs	r1, #1
 80018d6:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80018da:	2000      	movs	r0, #0
 80018dc:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018e0:	6993      	ldr	r3, [r2, #24]
 80018e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018e6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018e8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	f043 0303 	orr.w	r3, r3, #3
 80018f2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018f8:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <HAL_PWREx_GetVoltageRange+0x20>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001900:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8001904:	d004      	beq.n	8001910 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001906:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800190a:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800190e:	d100      	bne.n	8001912 <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001910:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001912:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001916:	e7fb      	b.n	8001910 <HAL_PWREx_GetVoltageRange+0x18>
 8001918:	40007000 	.word	0x40007000

0800191c <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800191c:	2800      	cmp	r0, #0
 800191e:	d136      	bne.n	800198e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001920:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192c:	d008      	beq.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800192e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001930:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001938:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800193c:	2000      	movs	r0, #0
 800193e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001940:	4a36      	ldr	r2, [pc, #216]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001942:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800194a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001958:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2232      	movs	r2, #50	@ 0x32
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a2f      	ldr	r2, [pc, #188]	@ (8001a24 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196e:	e000      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8001970:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001972:	4a2a      	ldr	r2, [pc, #168]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001974:	6952      	ldr	r2, [r2, #20]
 8001976:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800197a:	d001      	beq.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x64>
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f7      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001980:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001988:	d144      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800198a:	2000      	movs	r0, #0
 800198c:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001992:	d008      	beq.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800199c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80019a2:	2000      	movs	r0, #0
 80019a4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b2:	d008      	beq.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80019b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  return HAL_OK;
 80019c2:	2000      	movs	r0, #0
 80019c4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c6:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80019c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80019cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019de:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0x104>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2232      	movs	r2, #50	@ 0x32
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9b      	lsrs	r3, r3, #18
 80019f2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f4:	e000      	b.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 80019f6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f8:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 80019fa:	6952      	ldr	r2, [r2, #20]
 80019fc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001a00:	d001      	beq.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0xea>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f7      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001a0e:	d103      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8001a10:	2000      	movs	r0, #0
 8001a12:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001a14:	2003      	movs	r0, #3
 8001a16:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001a18:	2003      	movs	r0, #3
}
 8001a1a:	4770      	bx	lr
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	20040000 	.word	0x20040000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001a28:	4a02      	ldr	r2, [pc, #8]	@ (8001a34 <HAL_PWREx_EnableVddUSB+0xc>)
 8001a2a:	6853      	ldr	r3, [r2, #4]
 8001a2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a30:	6053      	str	r3, [r2, #4]
}
 8001a32:	4770      	bx	lr
 8001a34:	40007000 	.word	0x40007000

08001a38 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001a38:	4a02      	ldr	r2, [pc, #8]	@ (8001a44 <HAL_PWREx_EnableVddIO2+0xc>)
 8001a3a:	6853      	ldr	r3, [r2, #4]
 8001a3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a40:	6053      	str	r3, [r2, #4]
}
 8001a42:	4770      	bx	lr
 8001a44:	40007000 	.word	0x40007000

08001a48 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d02b      	beq.n	8001aac <RCC_GetSysClockFreqFromPLLSource+0x64>
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d02b      	beq.n	8001ab0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d014      	beq.n	8001a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
    break;
  default:
    /* unexpected */
    pllvco = 0;
 8001a5c:	2100      	movs	r1, #0
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5e:	4a15      	ldr	r2, [pc, #84]	@ (8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8001a60:	68d3      	ldr	r3, [r2, #12]
 8001a62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a66:	3301      	adds	r3, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a68:	68d0      	ldr	r0, [r2, #12]
 8001a6a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001a6e:	fb01 f000 	mul.w	r0, r1, r0
 8001a72:	fbb0 f0f3 	udiv	r0, r0, r3
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a76:	68d3      	ldr	r3, [r2, #12]
 8001a78:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8001a80:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a84:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f013 0f08 	tst.w	r3, #8
 8001a8e:	d108      	bne.n	8001aa2 <RCC_GetSysClockFreqFromPLLSource+0x5a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8001a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a96:	f3c3 2303 	ubfx	r3, r3, #8, #4
    pllvco = MSIRangeTable[msirange];
 8001a9a:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0x70>)
 8001a9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    break;
 8001aa0:	e7dd      	b.n	8001a5e <RCC_GetSysClockFreqFromPLLSource+0x16>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aa2:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x6c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001aaa:	e7f6      	b.n	8001a9a <RCC_GetSysClockFreqFromPLLSource+0x52>
  switch (pllsource)
 8001aac:	4903      	ldr	r1, [pc, #12]	@ (8001abc <RCC_GetSysClockFreqFromPLLSource+0x74>)
 8001aae:	e7d6      	b.n	8001a5e <RCC_GetSysClockFreqFromPLLSource+0x16>
    pllvco = HSE_VALUE;
 8001ab0:	4903      	ldr	r1, [pc, #12]	@ (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0x78>)
 8001ab2:	e7d4      	b.n	8001a5e <RCC_GetSysClockFreqFromPLLSource+0x16>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08005290 	.word	0x08005290
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <RCC_SetFlashLatencyFromMSIRange>:
{
 8001ac4:	b530      	push	{r4, r5, lr}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001ad2:	d00a      	beq.n	8001aea <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 8001ad4:	f7ff ff10 	bl	80018f8 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001adc:	d016      	beq.n	8001b0c <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 8001ade:	2c7f      	cmp	r4, #127	@ 0x7f
 8001ae0:	d81e      	bhi.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 8001ae2:	2c70      	cmp	r4, #112	@ 0x70
 8001ae4:	d02b      	beq.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	e01b      	b.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4d17      	ldr	r5, [pc, #92]	@ (8001b48 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8001aec:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001af4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001afe:	f7ff fefb 	bl	80018f8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001b0a:	e7e5      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001b0c:	2c80      	cmp	r4, #128	@ 0x80
 8001b0e:	d903      	bls.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 8001b10:	2ca0      	cmp	r4, #160	@ 0xa0
 8001b12:	d903      	bls.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b14:	2102      	movs	r1, #2
 8001b16:	e004      	b.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b18:	2100      	movs	r1, #0
 8001b1a:	e002      	b.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	e000      	b.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8001b20:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001b24:	6813      	ldr	r3, [r2, #0]
 8001b26:	f023 030f 	bic.w	r3, r3, #15
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b2e:	6813      	ldr	r3, [r2, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	428b      	cmp	r3, r1
 8001b36:	d104      	bne.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 8001b38:	2000      	movs	r0, #0
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b3e:	2101      	movs	r1, #1
 8001b40:	e7ef      	b.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e7f9      	b.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b50:	4a28      	ldr	r2, [pc, #160]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b52:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b54:	68d2      	ldr	r2, [r2, #12]
 8001b56:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b5a:	f013 030c 	ands.w	r3, r3, #12
 8001b5e:	d00a      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x26>
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d006      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d01f      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	4602      	mov	r2, r0
 8001b70:	e010      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b72:	2a01      	cmp	r2, #1
 8001b74:	d1f6      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	f012 0f08 	tst.w	r2, #8
 8001b7e:	d10c      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b80:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b82:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8001b86:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001b8a:	491b      	ldr	r1, [pc, #108]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b90:	b143      	cbz	r3, 8001ba4 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b92:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d00d      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x64>
}
 8001b98:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b9a:	4a16      	ldr	r2, [pc, #88]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001ba2:	e7f2      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	e7f5      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8001ba8:	4814      	ldr	r0, [pc, #80]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001baa:	2200      	movs	r2, #0
 8001bac:	e7f2      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001bae:	4814      	ldr	r0, [pc, #80]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	e7ef      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d016      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x9e>
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc6:	490b      	ldr	r1, [pc, #44]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bc8:	68cb      	ldr	r3, [r1, #12]
 8001bca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bce:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bd0:	68c8      	ldr	r0, [r1, #12]
 8001bd2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001bd6:	fb02 f000 	mul.w	r0, r2, r0
 8001bda:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bde:	68cb      	ldr	r3, [r1, #12]
 8001be0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001be4:	3301      	adds	r3, #1
 8001be6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8001be8:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001bec:	e7d4      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8001bee:	4a03      	ldr	r2, [pc, #12]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0xac>)
 8001bf0:	e7e9      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x76>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08005290 	.word	0x08005290
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001c04:	2800      	cmp	r0, #0
 8001c06:	f000 8322 	beq.w	800224e <HAL_RCC_OscConfig+0x64a>
{
 8001c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c10:	4b96      	ldr	r3, [pc, #600]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c12:	689d      	ldr	r5, [r3, #8]
 8001c14:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	68de      	ldr	r6, [r3, #12]
 8001c1a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	f013 0f10 	tst.w	r3, #16
 8001c24:	d05a      	beq.n	8001cdc <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c26:	b1e5      	cbz	r5, 8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c28:	2d0c      	cmp	r5, #12
 8001c2a:	d018      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c2c:	69a3      	ldr	r3, [r4, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80bb 	beq.w	8001daa <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8001c34:	4a8d      	ldr	r2, [pc, #564]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c36:	6813      	ldr	r3, [r2, #0]
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c3e:	f7fe ff01 	bl	8000a44 <HAL_GetTick>
 8001c42:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c44:	4b89      	ldr	r3, [pc, #548]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f013 0f02 	tst.w	r3, #2
 8001c4c:	f040 809a 	bne.w	8001d84 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c50:	f7fe fef8 	bl	8000a44 <HAL_GetTick>
 8001c54:	1bc0      	subs	r0, r0, r7
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9f4      	bls.n	8001c44 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	e302      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c5e:	2e01      	cmp	r6, #1
 8001c60:	d1e4      	bne.n	8001c2c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c62:	4b82      	ldr	r3, [pc, #520]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f013 0f02 	tst.w	r3, #2
 8001c6a:	d003      	beq.n	8001c74 <HAL_RCC_OscConfig+0x70>
 8001c6c:	69a3      	ldr	r3, [r4, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 82ef 	beq.w	8002252 <HAL_RCC_OscConfig+0x64e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c74:	6a20      	ldr	r0, [r4, #32]
 8001c76:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f013 0f08 	tst.w	r3, #8
 8001c7e:	d05b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x134>
 8001c80:	4b7a      	ldr	r3, [pc, #488]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c88:	4298      	cmp	r0, r3
 8001c8a:	d85c      	bhi.n	8001d46 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8c:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f042 0208 	orr.w	r2, r2, #8
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001c9c:	6a21      	ldr	r1, [r4, #32]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001ca8:	69e1      	ldr	r1, [r4, #28]
 8001caa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cae:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb0:	2d00      	cmp	r5, #0
 8001cb2:	d060      	beq.n	8001d76 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb4:	f7ff ff4c 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	40d8      	lsrs	r0, r3
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001cce:	4b6a      	ldr	r3, [pc, #424]	@ (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f7fe fe73 	bl	80009bc <HAL_InitTick>
        if(status != HAL_OK)
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	f040 82c4 	bne.w	8002264 <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f013 0f01 	tst.w	r3, #1
 8001ce2:	f000 8081 	beq.w	8001de8 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ce6:	2d08      	cmp	r5, #8
 8001ce8:	d075      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
 8001cea:	2d0c      	cmp	r5, #12
 8001cec:	d071      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	6863      	ldr	r3, [r4, #4]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf4:	f000 8097 	beq.w	8001e26 <HAL_RCC_OscConfig+0x222>
 8001cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cfc:	f000 8099 	beq.w	8001e32 <HAL_RCC_OscConfig+0x22e>
 8001d00:	4b5a      	ldr	r3, [pc, #360]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d10:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8099 	beq.w	8001e4c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fe93 	bl	8000a44 <HAL_GetTick>
 8001d1e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d20:	4b52      	ldr	r3, [pc, #328]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d28:	d15e      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fe8b 	bl	8000a44 <HAL_GetTick>
 8001d2e:	1bc0      	subs	r0, r0, r7
 8001d30:	2864      	cmp	r0, #100	@ 0x64
 8001d32:	d9f5      	bls.n	8001d20 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8001d34:	2003      	movs	r0, #3
 8001d36:	e295      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d38:	4b4c      	ldr	r3, [pc, #304]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d44:	e7a0      	b.n	8001c88 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d46:	f7ff febd 	bl	8001ac4 <RCC_SetFlashLatencyFromMSIRange>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f040 8283 	bne.w	8002256 <HAL_RCC_OscConfig+0x652>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d50:	4b46      	ldr	r3, [pc, #280]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f042 0208 	orr.w	r2, r2, #8
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001d60:	6a21      	ldr	r1, [r4, #32]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001d6c:	69e1      	ldr	r1, [r4, #28]
 8001d6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	e79e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d76:	6a20      	ldr	r0, [r4, #32]
 8001d78:	f7ff fea4 	bl	8001ac4 <RCC_SetFlashLatencyFromMSIRange>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d099      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
 8001d82:	e26f      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d84:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f042 0208 	orr.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001d94:	6a21      	ldr	r1, [r4, #32]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001da0:	69e1      	ldr	r1, [r4, #28]
 8001da2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	e798      	b.n	8001cdc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8001daa:	4a30      	ldr	r2, [pc, #192]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001db4:	f7fe fe46 	bl	8000a44 <HAL_GetTick>
 8001db8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f013 0f02 	tst.w	r3, #2
 8001dc2:	d08b      	beq.n	8001cdc <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc4:	f7fe fe3e 	bl	8000a44 <HAL_GetTick>
 8001dc8:	1bc0      	subs	r0, r0, r7
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9f5      	bls.n	8001dba <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001dce:	2003      	movs	r0, #3
 8001dd0:	e248      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd2:	2e03      	cmp	r6, #3
 8001dd4:	d18b      	bne.n	8001cee <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd6:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001dde:	d003      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8239 	beq.w	800225a <HAL_RCC_OscConfig+0x656>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f013 0f02 	tst.w	r3, #2
 8001dee:	d058      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001df0:	2d04      	cmp	r5, #4
 8001df2:	d045      	beq.n	8001e80 <HAL_RCC_OscConfig+0x27c>
 8001df4:	2d0c      	cmp	r5, #12
 8001df6:	d041      	beq.n	8001e7c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	68e3      	ldr	r3, [r4, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d077      	beq.n	8001eee <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e08:	f7fe fe1c 	bl	8000a44 <HAL_GetTick>
 8001e0c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001e16:	d161      	bne.n	8001edc <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e18:	f7fe fe14 	bl	8000a44 <HAL_GetTick>
 8001e1c:	1b80      	subs	r0, r0, r6
 8001e1e:	2802      	cmp	r0, #2
 8001e20:	d9f5      	bls.n	8001e0e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8001e22:	2003      	movs	r0, #3
 8001e24:	e21e      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	4a11      	ldr	r2, [pc, #68]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e76f      	b.n	8001d12 <HAL_RCC_OscConfig+0x10e>
 8001e32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e36:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e762      	b.n	8001d12 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fdfa 	bl	8000a44 <HAL_GetTick>
 8001e50:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x268>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001e5a:	d0c5      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fdf2 	bl	8000a44 <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	2864      	cmp	r0, #100	@ 0x64
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
 8001e68:	e1fc      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080052c8 	.word	0x080052c8
 8001e74:	20040000 	.word	0x20040000
 8001e78:	20040008 	.word	0x20040008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7c:	2e02      	cmp	r6, #2
 8001e7e:	d1bb      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	4ba7      	ldr	r3, [pc, #668]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_OscConfig+0x28e>
 8001e8a:	68e3      	ldr	r3, [r4, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 81e6 	beq.w	800225e <HAL_RCC_OscConfig+0x65a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4aa3      	ldr	r2, [pc, #652]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001e94:	6853      	ldr	r3, [r2, #4]
 8001e96:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001e9a:	6921      	ldr	r1, [r4, #16]
 8001e9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001ea0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	f013 0f08 	tst.w	r3, #8
 8001ea8:	d04c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eaa:	6963      	ldr	r3, [r4, #20]
 8001eac:	b39b      	cbz	r3, 8001f16 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4a9c      	ldr	r2, [pc, #624]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001eb0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001ebc:	f7fe fdc2 	bl	8000a44 <HAL_GetTick>
 8001ec0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec2:	4b97      	ldr	r3, [pc, #604]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec8:	f013 0f02 	tst.w	r3, #2
 8001ecc:	d13a      	bne.n	8001f44 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7fe fdb9 	bl	8000a44 <HAL_GetTick>
 8001ed2:	1b80      	subs	r0, r0, r6
 8001ed4:	2802      	cmp	r0, #2
 8001ed6:	d9f4      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8001ed8:	2003      	movs	r0, #3
 8001eda:	e1c3      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4a90      	ldr	r2, [pc, #576]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001ede:	6853      	ldr	r3, [r2, #4]
 8001ee0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001ee4:	6921      	ldr	r1, [r4, #16]
 8001ee6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001eea:	6053      	str	r3, [r2, #4]
 8001eec:	e7d9      	b.n	8001ea2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4a8c      	ldr	r2, [pc, #560]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fda4 	bl	8000a44 <HAL_GetTick>
 8001efc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efe:	4b88      	ldr	r3, [pc, #544]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001f06:	d0cc      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7fe fd9c 	bl	8000a44 <HAL_GetTick>
 8001f0c:	1b80      	subs	r0, r0, r6
 8001f0e:	2802      	cmp	r0, #2
 8001f10:	d9f5      	bls.n	8001efe <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8001f12:	2003      	movs	r0, #3
 8001f14:	e1a6      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_LSI_DISABLE();
 8001f16:	4a82      	ldr	r2, [pc, #520]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001f18:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001f24:	f7fe fd8e 	bl	8000a44 <HAL_GetTick>
 8001f28:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f30:	f013 0f02 	tst.w	r3, #2
 8001f34:	d006      	beq.n	8001f44 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f36:	f7fe fd85 	bl	8000a44 <HAL_GetTick>
 8001f3a:	1b80      	subs	r0, r0, r6
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d9f4      	bls.n	8001f2a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
 8001f42:	e18f      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f013 0f04 	tst.w	r3, #4
 8001f4a:	d07a      	beq.n	8002042 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f4c:	4b74      	ldr	r3, [pc, #464]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001f54:	d136      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b72      	ldr	r3, [pc, #456]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001f58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f6a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002124 <HAL_RCC_OscConfig+0x520>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	68a3      	ldr	r3, [r4, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d039      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x3ec>
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d03f      	beq.n	8002000 <HAL_RCC_OscConfig+0x3fc>
 8001f80:	4b67      	ldr	r3, [pc, #412]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001f82:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001f8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	68a3      	ldr	r3, [r4, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d03d      	beq.n	800201c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fd50 	bl	8000a44 <HAL_GetTick>
 8001fa4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f013 0f02 	tst.w	r3, #2
 8001fb0:	d146      	bne.n	8002040 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fd47 	bl	8000a44 <HAL_GetTick>
 8001fb6:	1bc0      	subs	r0, r0, r7
 8001fb8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fbc:	4298      	cmp	r0, r3
 8001fbe:	d9f2      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	e14f      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2600      	movs	r6, #0
 8001fc6:	e7d1      	b.n	8001f6c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc8:	4a56      	ldr	r2, [pc, #344]	@ (8002124 <HAL_RCC_OscConfig+0x520>)
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fd37 	bl	8000a44 <HAL_GetTick>
 8001fd6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <HAL_RCC_OscConfig+0x520>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001fe0:	d1c9      	bne.n	8001f76 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7fe fd2f 	bl	8000a44 <HAL_GetTick>
 8001fe6:	1bc0      	subs	r0, r0, r7
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d9f5      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8001fec:	2003      	movs	r0, #3
 8001fee:	e139      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8001ff2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ffe:	e7cc      	b.n	8001f9a <HAL_RCC_OscConfig+0x396>
 8002000:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8002002:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800200e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800201a:	e7be      	b.n	8001f9a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800201c:	f7fe fd12 	bl	8000a44 <HAL_GetTick>
 8002020:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002022:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f013 0f02 	tst.w	r3, #2
 800202c:	d008      	beq.n	8002040 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fd09 	bl	8000a44 <HAL_GetTick>
 8002032:	1bc0      	subs	r0, r0, r7
 8002034:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002038:	4298      	cmp	r0, r3
 800203a:	d9f2      	bls.n	8002022 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
 800203e:	e111      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
    if(pwrclkchanged == SET)
 8002040:	b9e6      	cbnz	r6, 800207c <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	f013 0f20 	tst.w	r3, #32
 8002048:	d035      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800204a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800204c:	b1e3      	cbz	r3, 8002088 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800204e:	4a34      	ldr	r2, [pc, #208]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8002050:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800205c:	f7fe fcf2 	bl	8000a44 <HAL_GetTick>
 8002060:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002062:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002068:	f013 0f02 	tst.w	r3, #2
 800206c:	d123      	bne.n	80020b6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206e:	f7fe fce9 	bl	8000a44 <HAL_GetTick>
 8002072:	1b80      	subs	r0, r0, r6
 8002074:	2802      	cmp	r0, #2
 8002076:	d9f4      	bls.n	8002062 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8002078:	2003      	movs	r0, #3
 800207a:	e0f3      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4a28      	ldr	r2, [pc, #160]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 800207e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002084:	6593      	str	r3, [r2, #88]	@ 0x58
 8002086:	e7dc      	b.n	8002042 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8002088:	4a25      	ldr	r2, [pc, #148]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 800208a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002096:	f7fe fcd5 	bl	8000a44 <HAL_GetTick>
 800209a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 800209e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020a2:	f013 0f02 	tst.w	r3, #2
 80020a6:	d006      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a8:	f7fe fccc 	bl	8000a44 <HAL_GetTick>
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	2802      	cmp	r0, #2
 80020b0:	d9f4      	bls.n	800209c <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e0d6      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80d2 	beq.w	8002262 <HAL_RCC_OscConfig+0x65e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d017      	beq.n	80020f2 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c2:	2d0c      	cmp	r5, #12
 80020c4:	f000 80d4 	beq.w	8002270 <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4a15      	ldr	r2, [pc, #84]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020d2:	f7fe fcb7 	bl	8000a44 <HAL_GetTick>
 80020d6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80020e0:	f000 80ae 	beq.w	8002240 <HAL_RCC_OscConfig+0x63c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe fcae 	bl	8000a44 <HAL_GetTick>
 80020e8:	1b00      	subs	r0, r0, r4
 80020ea:	2802      	cmp	r0, #2
 80020ec:	d9f4      	bls.n	80020d8 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 80020ee:	2003      	movs	r0, #3
 80020f0:	e0b8      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
      pll_config = RCC->PLLCFGR;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 80020f4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	f003 0103 	and.w	r1, r3, #3
 80020fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80020fc:	4291      	cmp	r1, r2
 80020fe:	d013      	beq.n	8002128 <HAL_RCC_OscConfig+0x524>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002100:	2d0c      	cmp	r5, #12
 8002102:	f000 80b1 	beq.w	8002268 <HAL_RCC_OscConfig+0x664>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800210e:	f040 80ad 	bne.w	800226c <HAL_RCC_OscConfig+0x668>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002112:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_RCC_OscConfig+0x51c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800211a:	d02f      	beq.n	800217c <HAL_RCC_OscConfig+0x578>
            return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e0a1      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002128:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800212c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800212e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002130:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002134:	d1e4      	bne.n	8002100 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002136:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800213a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002140:	d1de      	bne.n	8002100 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002142:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002146:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002148:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800214c:	d1d8      	bne.n	8002100 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214e:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002152:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002154:	0852      	lsrs	r2, r2, #1
 8002156:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002158:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800215c:	d1d0      	bne.n	8002100 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800215e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002162:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002168:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800216c:	d1c8      	bne.n	8002100 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002176:	d049      	beq.n	800220c <HAL_RCC_OscConfig+0x608>
  return HAL_OK;
 8002178:	2000      	movs	r0, #0
 800217a:	e073      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_DISABLE();
 800217c:	4a3d      	ldr	r2, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002184:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002186:	f7fe fc5d 	bl	8000a44 <HAL_GetTick>
 800218a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002194:	d006      	beq.n	80021a4 <HAL_RCC_OscConfig+0x5a0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fc55 	bl	8000a44 <HAL_GetTick>
 800219a:	1b40      	subs	r0, r0, r5
 800219c:	2802      	cmp	r0, #2
 800219e:	d9f5      	bls.n	800218c <HAL_RCC_OscConfig+0x588>
                return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
 80021a2:	e05f      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a4:	4a33      	ldr	r2, [pc, #204]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 80021a6:	68d3      	ldr	r3, [r2, #12]
 80021a8:	4933      	ldr	r1, [pc, #204]	@ (8002278 <HAL_RCC_OscConfig+0x674>)
 80021aa:	4019      	ands	r1, r3
 80021ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80021ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80021b0:	3801      	subs	r0, #1
 80021b2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80021b6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80021b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80021bc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80021be:	0840      	lsrs	r0, r0, #1
 80021c0:	3801      	subs	r0, #1
 80021c2:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80021c6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80021c8:	0840      	lsrs	r0, r0, #1
 80021ca:	3801      	subs	r0, #1
 80021cc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80021d0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80021d2:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80021d6:	4319      	orrs	r1, r3
 80021d8:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e2:	68d3      	ldr	r3, [r2, #12]
 80021e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e8:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80021ea:	f7fe fc2b 	bl	8000a44 <HAL_GetTick>
 80021ee:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f0:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x604>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe fc23 	bl	8000a44 <HAL_GetTick>
 80021fe:	1b00      	subs	r0, r0, r4
 8002200:	2802      	cmp	r0, #2
 8002202:	d9f5      	bls.n	80021f0 <HAL_RCC_OscConfig+0x5ec>
                return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e02d      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 8002208:	2000      	movs	r0, #0
 800220a:	e02b      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
          __HAL_RCC_PLL_ENABLE();
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002214:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800221c:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800221e:	f7fe fc11 	bl	8000a44 <HAL_GetTick>
 8002222:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x638>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7fe fc09 	bl	8000a44 <HAL_GetTick>
 8002232:	1b03      	subs	r3, r0, r4
 8002234:	2b02      	cmp	r3, #2
 8002236:	d9f5      	bls.n	8002224 <HAL_RCC_OscConfig+0x620>
              return HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
 800223a:	e013      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 800223c:	2000      	movs	r0, #0
 800223e:	e011      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002240:	4a0c      	ldr	r2, [pc, #48]	@ (8002274 <HAL_RCC_OscConfig+0x670>)
 8002242:	68d1      	ldr	r1, [r2, #12]
 8002244:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <HAL_RCC_OscConfig+0x678>)
 8002246:	400b      	ands	r3, r1
 8002248:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800224a:	2000      	movs	r0, #0
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
    return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
}
 8002250:	4770      	bx	lr
        return HAL_ERROR;
 8002252:	2001      	movs	r0, #1
 8002254:	e006      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 8002256:	2001      	movs	r0, #1
 8002258:	e004      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
 800225c:	e002      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e000      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
  return HAL_OK;
 8002262:	2000      	movs	r0, #0
}
 8002264:	b003      	add	sp, #12
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002268:	2001      	movs	r0, #1
 800226a:	e7fb      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
            return HAL_ERROR;
 800226c:	2001      	movs	r0, #1
 800226e:	e7f9      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
        return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
 8002272:	e7f7      	b.n	8002264 <HAL_RCC_OscConfig+0x660>
 8002274:	40021000 	.word	0x40021000
 8002278:	019d800c 	.word	0x019d800c
 800227c:	feeefffc 	.word	0xfeeefffc

08002280 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002280:	2800      	cmp	r0, #0
 8002282:	f000 80ea 	beq.w	800245a <HAL_RCC_ClockConfig+0x1da>
{
 8002286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002288:	460d      	mov	r5, r1
 800228a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b77      	ldr	r3, [pc, #476]	@ (800246c <HAL_RCC_ClockConfig+0x1ec>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	428b      	cmp	r3, r1
 8002296:	d20b      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002298:	4a74      	ldr	r2, [pc, #464]	@ (800246c <HAL_RCC_ClockConfig+0x1ec>)
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	f023 030f 	bic.w	r3, r3, #15
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	428b      	cmp	r3, r1
 80022ac:	f040 80d7 	bne.w	800245e <HAL_RCC_ClockConfig+0x1de>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f013 0f02 	tst.w	r3, #2
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b8:	68a2      	ldr	r2, [r4, #8]
 80022ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d905      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c6:	496a      	ldr	r1, [pc, #424]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	688b      	ldr	r3, [r1, #8]
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ce:	431a      	orrs	r2, r3
 80022d0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	f013 0f01 	tst.w	r3, #1
 80022d8:	d06e      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x138>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022da:	6863      	ldr	r3, [r4, #4]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d00d      	beq.n	80022fc <HAL_RCC_ClockConfig+0x7c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d025      	beq.n	8002330 <HAL_RCC_ClockConfig+0xb0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13c      	bne.n	8002362 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022ec:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f013 0f02 	tst.w	r3, #2
 80022f6:	d121      	bne.n	800233c <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
 80022fa:	e0a7      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8002306:	2001      	movs	r0, #1
 8002308:	e0a0      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800230a:	f7ff fb9d 	bl	8001a48 <RCC_GetSysClockFreqFromPLLSource>
 800230e:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <HAL_RCC_ClockConfig+0x1f4>)
 8002310:	4298      	cmp	r0, r3
 8002312:	d92d      	bls.n	8002370 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002314:	4b56      	ldr	r3, [pc, #344]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 800231c:	d12a      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800231e:	4a54      	ldr	r2, [pc, #336]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	6893      	ldr	r3, [r2, #8]
 8002322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800232a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800232c:	2780      	movs	r7, #128	@ 0x80
 800232e:	e024      	b.n	800237a <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002330:	4b4f      	ldr	r3, [pc, #316]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002338:	f000 8093 	beq.w	8002462 <HAL_RCC_ClockConfig+0x1e2>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800233c:	f7ff fc08 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002340:	4b4c      	ldr	r3, [pc, #304]	@ (8002474 <HAL_RCC_ClockConfig+0x1f4>)
 8002342:	4298      	cmp	r0, r3
 8002344:	d918      	bls.n	8002378 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002346:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 800234e:	d12f      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x130>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002350:	4a47      	ldr	r2, [pc, #284]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	6893      	ldr	r3, [r2, #8]
 8002354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800235e:	2780      	movs	r7, #128	@ 0x80
 8002360:	e00b      	b.n	800237a <HAL_RCC_ClockConfig+0xfa>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002362:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800236a:	d1e7      	bne.n	800233c <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 800236c:	2001      	movs	r0, #1
 800236e:	e06d      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002370:	2700      	movs	r7, #0
 8002372:	e002      	b.n	800237a <HAL_RCC_ClockConfig+0xfa>
 8002374:	2700      	movs	r7, #0
 8002376:	e000      	b.n	800237a <HAL_RCC_ClockConfig+0xfa>
 8002378:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4a3d      	ldr	r2, [pc, #244]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	6893      	ldr	r3, [r2, #8]
 800237e:	f023 0303 	bic.w	r3, r3, #3
 8002382:	6861      	ldr	r1, [r4, #4]
 8002384:	430b      	orrs	r3, r1
 8002386:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002388:	f7fe fb5c 	bl	8000a44 <HAL_GetTick>
 800238c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	6862      	ldr	r2, [r4, #4]
 8002398:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800239c:	d00a      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x134>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7fe fb51 	bl	8000a44 <HAL_GetTick>
 80023a2:	1b80      	subs	r0, r0, r6
 80023a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023a8:	4298      	cmp	r0, r3
 80023aa:	d9f0      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
        return HAL_TIMEOUT;
 80023ac:	2003      	movs	r0, #3
 80023ae:	e04d      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023b0:	2700      	movs	r7, #0
 80023b2:	e7e2      	b.n	800237a <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 80023b4:	2f00      	cmp	r7, #0
 80023b6:	d14a      	bne.n	800244e <HAL_RCC_ClockConfig+0x1ce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	f013 0f02 	tst.w	r3, #2
 80023be:	d00c      	beq.n	80023da <HAL_RCC_ClockConfig+0x15a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c0:	68a2      	ldr	r2, [r4, #8]
 80023c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d205      	bcs.n	80023da <HAL_RCC_ClockConfig+0x15a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ce:	4928      	ldr	r1, [pc, #160]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	688b      	ldr	r3, [r1, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023d6:	431a      	orrs	r2, r3
 80023d8:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_ClockConfig+0x1ec>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	42ab      	cmp	r3, r5
 80023e4:	d90a      	bls.n	80023fc <HAL_RCC_ClockConfig+0x17c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_RCC_ClockConfig+0x1ec>)
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	f023 030f 	bic.w	r3, r3, #15
 80023ee:	432b      	orrs	r3, r5
 80023f0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	6813      	ldr	r3, [r2, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	42ab      	cmp	r3, r5
 80023fa:	d134      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1e6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	f013 0f04 	tst.w	r3, #4
 8002402:	d006      	beq.n	8002412 <HAL_RCC_ClockConfig+0x192>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4a1a      	ldr	r2, [pc, #104]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	6893      	ldr	r3, [r2, #8]
 8002408:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800240c:	68e1      	ldr	r1, [r4, #12]
 800240e:	430b      	orrs	r3, r1
 8002410:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	f013 0f08 	tst.w	r3, #8
 8002418:	d007      	beq.n	800242a <HAL_RCC_ClockConfig+0x1aa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	6893      	ldr	r3, [r2, #8]
 800241e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002422:	6921      	ldr	r1, [r4, #16]
 8002424:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002428:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800242a:	f7ff fb91 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002436:	4a10      	ldr	r2, [pc, #64]	@ (8002478 <HAL_RCC_ClockConfig+0x1f8>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	40d8      	lsrs	r0, r3
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_ClockConfig+0x1fc>)
 8002442:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <HAL_RCC_ClockConfig+0x200>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f7fe fab8 	bl	80009bc <HAL_InitTick>
}
 800244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	6893      	ldr	r3, [r2, #8]
 8002452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	e7ae      	b.n	80023b8 <HAL_RCC_ClockConfig+0x138>
    return HAL_ERROR;
 800245a:	2001      	movs	r0, #1
}
 800245c:	4770      	bx	lr
      return HAL_ERROR;
 800245e:	2001      	movs	r0, #1
 8002460:	e7f4      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
          return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
 8002464:	e7f2      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
      return HAL_ERROR;
 8002466:	2001      	movs	r0, #1
 8002468:	e7f0      	b.n	800244c <HAL_RCC_ClockConfig+0x1cc>
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	40021000 	.word	0x40021000
 8002474:	04c4b400 	.word	0x04c4b400
 8002478:	080052c8 	.word	0x080052c8
 800247c:	20040000 	.word	0x20040000
 8002480:	20040008 	.word	0x20040008

08002484 <HAL_RCC_GetHCLKFreq>:
}
 8002484:	4b01      	ldr	r3, [pc, #4]	@ (800248c <HAL_RCC_GetHCLKFreq+0x8>)
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20040000 	.word	0x20040000

08002490 <HAL_RCC_GetPCLK1Freq>:
{
 8002490:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002492:	f7ff fff7 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800249e:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	f003 031f 	and.w	r3, r3, #31
}
 80024a6:	40d8      	lsrs	r0, r3
 80024a8:	bd08      	pop	{r3, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	080052c0 	.word	0x080052c0

080024b4 <HAL_RCC_GetPCLK2Freq>:
{
 80024b4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b6:	f7ff ffe5 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024ba:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80024c2:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
}
 80024ca:	40d8      	lsrs	r0, r3
 80024cc:	bd08      	pop	{r3, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080052c0 	.word	0x080052c0

080024d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b54      	ldr	r3, [pc, #336]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f013 0f03 	tst.w	r3, #3
 80024e6:	d00d      	beq.n	8002504 <RCCEx_PLLSAI2_Config+0x2c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024e8:	4b51      	ldr	r3, [pc, #324]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	6802      	ldr	r2, [r0, #0]
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d001      	beq.n	80024fa <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80024f6:	2501      	movs	r5, #1
 80024f8:	e00c      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
       ||
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	f000 8096 	beq.w	800262c <RCCEx_PLLSAI2_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2500      	movs	r5, #0
 8002502:	e017      	b.n	8002534 <RCCEx_PLLSAI2_Config+0x5c>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002504:	6803      	ldr	r3, [r0, #0]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d055      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0xde>
 800250a:	2b03      	cmp	r3, #3
 800250c:	d05a      	beq.n	80025c4 <RCCEx_PLLSAI2_Config+0xec>
 800250e:	2b01      	cmp	r3, #1
 8002510:	d002      	beq.n	8002518 <RCCEx_PLLSAI2_Config+0x40>
 8002512:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002514:	4628      	mov	r0, r5
 8002516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002518:	4a45      	ldr	r2, [pc, #276]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	f012 0f02 	tst.w	r2, #2
 8002520:	d05c      	beq.n	80025dc <RCCEx_PLLSAI2_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002522:	4943      	ldr	r1, [pc, #268]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 8002524:	68ca      	ldr	r2, [r1, #12]
 8002526:	f022 0203 	bic.w	r2, r2, #3
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
 800252e:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8002530:	2d00      	cmp	r5, #0
 8002532:	d1ef      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002534:	4a3e      	ldr	r2, [pc, #248]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800253c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800253e:	f7fe fa81 	bl	8000a44 <HAL_GetTick>
 8002542:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002544:	4b3a      	ldr	r3, [pc, #232]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800254c:	d005      	beq.n	800255a <RCCEx_PLLSAI2_Config+0x82>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800254e:	f7fe fa79 	bl	8000a44 <HAL_GetTick>
 8002552:	1bc3      	subs	r3, r0, r7
 8002554:	2b02      	cmp	r3, #2
 8002556:	d9f5      	bls.n	8002544 <RCCEx_PLLSAI2_Config+0x6c>
        status = HAL_TIMEOUT;
 8002558:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800255a:	2d00      	cmp	r5, #0
 800255c:	d1da      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
      if(Divider == DIVIDER_P_UPDATE)
 800255e:	2e00      	cmp	r6, #0
 8002560:	d13e      	bne.n	80025e0 <RCCEx_PLLSAI2_Config+0x108>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002562:	4833      	ldr	r0, [pc, #204]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 8002564:	6943      	ldr	r3, [r0, #20]
 8002566:	4a33      	ldr	r2, [pc, #204]	@ (8002634 <RCCEx_PLLSAI2_Config+0x15c>)
 8002568:	401a      	ands	r2, r3
 800256a:	68a1      	ldr	r1, [r4, #8]
 800256c:	68e3      	ldr	r3, [r4, #12]
 800256e:	06db      	lsls	r3, r3, #27
 8002570:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002574:	6861      	ldr	r1, [r4, #4]
 8002576:	3901      	subs	r1, #1
 8002578:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800257c:	431a      	orrs	r2, r3
 800257e:	6142      	str	r2, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002580:	4a2b      	ldr	r2, [pc, #172]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 8002582:	6813      	ldr	r3, [r2, #0]
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002588:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800258a:	f7fe fa5b 	bl	8000a44 <HAL_GetTick>
 800258e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002598:	d105      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xce>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800259a:	f7fe fa53 	bl	8000a44 <HAL_GetTick>
 800259e:	1b80      	subs	r0, r0, r6
 80025a0:	2802      	cmp	r0, #2
 80025a2:	d9f5      	bls.n	8002590 <RCCEx_PLLSAI2_Config+0xb8>
          status = HAL_TIMEOUT;
 80025a4:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	d1b4      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025aa:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80025ac:	6953      	ldr	r3, [r2, #20]
 80025ae:	69a1      	ldr	r1, [r4, #24]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6153      	str	r3, [r2, #20]
 80025b4:	e7ae      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80025be:	d1b0      	bne.n	8002522 <RCCEx_PLLSAI2_Config+0x4a>
 80025c0:	2501      	movs	r5, #1
 80025c2:	e7a7      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80025cc:	d1a9      	bne.n	8002522 <RCCEx_PLLSAI2_Config+0x4a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ce:	4a18      	ldr	r2, [pc, #96]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80025d6:	d1a4      	bne.n	8002522 <RCCEx_PLLSAI2_Config+0x4a>
 80025d8:	2501      	movs	r5, #1
 80025da:	e79b      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
        status = HAL_ERROR;
 80025dc:	2501      	movs	r5, #1
 80025de:	e7a7      	b.n	8002530 <RCCEx_PLLSAI2_Config+0x58>
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e0:	2e01      	cmp	r6, #1
 80025e2:	d011      	beq.n	8002608 <RCCEx_PLLSAI2_Config+0x130>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025e4:	4812      	ldr	r0, [pc, #72]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 80025e6:	6943      	ldr	r3, [r0, #20]
 80025e8:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <RCCEx_PLLSAI2_Config+0x160>)
 80025ea:	401a      	ands	r2, r3
 80025ec:	68a1      	ldr	r1, [r4, #8]
 80025ee:	6963      	ldr	r3, [r4, #20]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	065b      	lsls	r3, r3, #25
 80025f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025fa:	6861      	ldr	r1, [r4, #4]
 80025fc:	3901      	subs	r1, #1
 80025fe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002602:	431a      	orrs	r2, r3
 8002604:	6142      	str	r2, [r0, #20]
 8002606:	e7bb      	b.n	8002580 <RCCEx_PLLSAI2_Config+0xa8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002608:	4809      	ldr	r0, [pc, #36]	@ (8002630 <RCCEx_PLLSAI2_Config+0x158>)
 800260a:	6943      	ldr	r3, [r0, #20]
 800260c:	4a0b      	ldr	r2, [pc, #44]	@ (800263c <RCCEx_PLLSAI2_Config+0x164>)
 800260e:	401a      	ands	r2, r3
 8002610:	68a1      	ldr	r1, [r4, #8]
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	055b      	lsls	r3, r3, #21
 800261a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800261e:	6861      	ldr	r1, [r4, #4]
 8002620:	3901      	subs	r1, #1
 8002622:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002626:	431a      	orrs	r2, r3
 8002628:	6142      	str	r2, [r0, #20]
 800262a:	e7a9      	b.n	8002580 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 800262c:	2501      	movs	r5, #1
 800262e:	e771      	b.n	8002514 <RCCEx_PLLSAI2_Config+0x3c>
 8002630:	40021000 	.word	0x40021000
 8002634:	07ff800f 	.word	0x07ff800f
 8002638:	f9ff800f 	.word	0xf9ff800f
 800263c:	ff9f800f 	.word	0xff9f800f

08002640 <RCCEx_PLLSAI1_Config>:
{
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	4604      	mov	r4, r0
 8002644:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002646:	4b54      	ldr	r3, [pc, #336]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f013 0f03 	tst.w	r3, #3
 800264e:	d00d      	beq.n	800266c <RCCEx_PLLSAI1_Config+0x2c>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002650:	4b51      	ldr	r3, [pc, #324]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	6802      	ldr	r2, [r0, #0]
 800265a:	4293      	cmp	r3, r2
 800265c:	d001      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0x22>
      status = HAL_ERROR;
 800265e:	2501      	movs	r5, #1
 8002660:	e00c      	b.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
       ||
 8002662:	2a00      	cmp	r2, #0
 8002664:	f000 8096 	beq.w	8002794 <RCCEx_PLLSAI1_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2500      	movs	r5, #0
 800266a:	e017      	b.n	800269c <RCCEx_PLLSAI1_Config+0x5c>
    switch(PllSai1->PLLSAI1Source)
 800266c:	6803      	ldr	r3, [r0, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d055      	beq.n	800271e <RCCEx_PLLSAI1_Config+0xde>
 8002672:	2b03      	cmp	r3, #3
 8002674:	d05a      	beq.n	800272c <RCCEx_PLLSAI1_Config+0xec>
 8002676:	2b01      	cmp	r3, #1
 8002678:	d002      	beq.n	8002680 <RCCEx_PLLSAI1_Config+0x40>
 800267a:	2501      	movs	r5, #1
}
 800267c:	4628      	mov	r0, r5
 800267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002680:	4a45      	ldr	r2, [pc, #276]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f012 0f02 	tst.w	r2, #2
 8002688:	d05c      	beq.n	8002744 <RCCEx_PLLSAI1_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800268a:	4943      	ldr	r1, [pc, #268]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 800268c:	68ca      	ldr	r2, [r1, #12]
 800268e:	f022 0203 	bic.w	r2, r2, #3
 8002692:	4313      	orrs	r3, r2
 8002694:	60cb      	str	r3, [r1, #12]
 8002696:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8002698:	2d00      	cmp	r5, #0
 800269a:	d1ef      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
    __HAL_RCC_PLLSAI1_DISABLE();
 800269c:	4a3e      	ldr	r2, [pc, #248]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 800269e:	6813      	ldr	r3, [r2, #0]
 80026a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026a4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80026a6:	f7fe f9cd 	bl	8000a44 <HAL_GetTick>
 80026aa:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80026b4:	d005      	beq.n	80026c2 <RCCEx_PLLSAI1_Config+0x82>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b6:	f7fe f9c5 	bl	8000a44 <HAL_GetTick>
 80026ba:	1bc3      	subs	r3, r0, r7
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d9f5      	bls.n	80026ac <RCCEx_PLLSAI1_Config+0x6c>
        status = HAL_TIMEOUT;
 80026c0:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80026c2:	2d00      	cmp	r5, #0
 80026c4:	d1da      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
      if(Divider == DIVIDER_P_UPDATE)
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	d13e      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0x108>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ca:	4833      	ldr	r0, [pc, #204]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 80026cc:	6903      	ldr	r3, [r0, #16]
 80026ce:	4a33      	ldr	r2, [pc, #204]	@ (800279c <RCCEx_PLLSAI1_Config+0x15c>)
 80026d0:	401a      	ands	r2, r3
 80026d2:	68a1      	ldr	r1, [r4, #8]
 80026d4:	68e3      	ldr	r3, [r4, #12]
 80026d6:	06db      	lsls	r3, r3, #27
 80026d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026dc:	6861      	ldr	r1, [r4, #4]
 80026de:	3901      	subs	r1, #1
 80026e0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80026e4:	431a      	orrs	r2, r3
 80026e6:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80026e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026f2:	f7fe f9a7 	bl	8000a44 <HAL_GetTick>
 80026f6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002700:	d105      	bne.n	800270e <RCCEx_PLLSAI1_Config+0xce>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002702:	f7fe f99f 	bl	8000a44 <HAL_GetTick>
 8002706:	1b80      	subs	r0, r0, r6
 8002708:	2802      	cmp	r0, #2
 800270a:	d9f5      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0xb8>
          status = HAL_TIMEOUT;
 800270c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800270e:	2d00      	cmp	r5, #0
 8002710:	d1b4      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002712:	4a21      	ldr	r2, [pc, #132]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002714:	6913      	ldr	r3, [r2, #16]
 8002716:	69a1      	ldr	r1, [r4, #24]
 8002718:	430b      	orrs	r3, r1
 800271a:	6113      	str	r3, [r2, #16]
 800271c:	e7ae      	b.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800271e:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002726:	d1b0      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x4a>
 8002728:	2501      	movs	r5, #1
 800272a:	e7a7      	b.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800272c:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002734:	d1a9      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x4a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002736:	4a18      	ldr	r2, [pc, #96]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800273e:	d1a4      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x4a>
 8002740:	2501      	movs	r5, #1
 8002742:	e79b      	b.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
        status = HAL_ERROR;
 8002744:	2501      	movs	r5, #1
 8002746:	e7a7      	b.n	8002698 <RCCEx_PLLSAI1_Config+0x58>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002748:	2e01      	cmp	r6, #1
 800274a:	d011      	beq.n	8002770 <RCCEx_PLLSAI1_Config+0x130>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274c:	4812      	ldr	r0, [pc, #72]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 800274e:	6903      	ldr	r3, [r0, #16]
 8002750:	4a13      	ldr	r2, [pc, #76]	@ (80027a0 <RCCEx_PLLSAI1_Config+0x160>)
 8002752:	401a      	ands	r2, r3
 8002754:	68a1      	ldr	r1, [r4, #8]
 8002756:	6963      	ldr	r3, [r4, #20]
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	065b      	lsls	r3, r3, #25
 800275e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002762:	6861      	ldr	r1, [r4, #4]
 8002764:	3901      	subs	r1, #1
 8002766:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800276a:	431a      	orrs	r2, r3
 800276c:	6102      	str	r2, [r0, #16]
 800276e:	e7bb      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xa8>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002770:	4809      	ldr	r0, [pc, #36]	@ (8002798 <RCCEx_PLLSAI1_Config+0x158>)
 8002772:	6903      	ldr	r3, [r0, #16]
 8002774:	4a0b      	ldr	r2, [pc, #44]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x164>)
 8002776:	401a      	ands	r2, r3
 8002778:	68a1      	ldr	r1, [r4, #8]
 800277a:	6923      	ldr	r3, [r4, #16]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002786:	6861      	ldr	r1, [r4, #4]
 8002788:	3901      	subs	r1, #1
 800278a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800278e:	431a      	orrs	r2, r3
 8002790:	6102      	str	r2, [r0, #16]
 8002792:	e7a9      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xa8>
      status = HAL_ERROR;
 8002794:	2501      	movs	r5, #1
 8002796:	e771      	b.n	800267c <RCCEx_PLLSAI1_Config+0x3c>
 8002798:	40021000 	.word	0x40021000
 800279c:	07ff800f 	.word	0x07ff800f
 80027a0:	f9ff800f 	.word	0xf9ff800f
 80027a4:	ff9f800f 	.word	0xff9f800f

080027a8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80027a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027b0:	6803      	ldr	r3, [r0, #0]
 80027b2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80027b6:	d034      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027b8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80027ba:	2b40      	cmp	r3, #64	@ 0x40
 80027bc:	d01f      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027be:	d80b      	bhi.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
 80027c0:	b323      	cbz	r3, 800280c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d105      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c6:	2100      	movs	r1, #0
 80027c8:	3020      	adds	r0, #32
 80027ca:	f7ff fe85 	bl	80024d8 <RCCEx_PLLSAI2_Config>
 80027ce:	4606      	mov	r6, r0
      break;
 80027d0:	e021      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027d2:	2701      	movs	r7, #1
 80027d4:	463e      	mov	r6, r7
 80027d6:	e026      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80027d8:	2b60      	cmp	r3, #96	@ 0x60
 80027da:	d020      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027dc:	2b80      	cmp	r3, #128	@ 0x80
 80027de:	d10b      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80027e0:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e2:	4a63      	ldr	r2, [pc, #396]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027e4:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80027e8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80027ec:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80027ee:	430b      	orrs	r3, r1
 80027f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f4:	2700      	movs	r7, #0
 80027f6:	e016      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027f8:	2701      	movs	r7, #1
 80027fa:	463e      	mov	r6, r7
 80027fc:	e013      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002800:	68d3      	ldr	r3, [r2, #12]
 8002802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002806:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002808:	2600      	movs	r6, #0
 800280a:	e7ea      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800280c:	2100      	movs	r1, #0
 800280e:	3004      	adds	r0, #4
 8002810:	f7ff ff16 	bl	8002640 <RCCEx_PLLSAI1_Config>
 8002814:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002816:	2e00      	cmp	r6, #0
 8002818:	d0e3      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800281a:	4637      	mov	r7, r6
 800281c:	e003      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800281e:	2600      	movs	r6, #0
 8002820:	e7df      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002822:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002824:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800282c:	d033      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 800282e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8002830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002834:	d022      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002836:	d80d      	bhi.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002838:	b333      	cbz	r3, 8002888 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 800283a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800283e:	d106      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002840:	2100      	movs	r1, #0
 8002842:	f104 0020 	add.w	r0, r4, #32
 8002846:	f7ff fe47 	bl	80024d8 <RCCEx_PLLSAI2_Config>
 800284a:	4606      	mov	r6, r0
      break;
 800284c:	e008      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai2ClockSelection)
 800284e:	2701      	movs	r7, #1
 8002850:	463e      	mov	r6, r7
 8002852:	e020      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002858:	d002      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285e:	d10a      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xce>
    if(ret == HAL_OK)
 8002860:	b9c6      	cbnz	r6, 8002894 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002862:	4a43      	ldr	r2, [pc, #268]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002864:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002868:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800286c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800286e:	430b      	orrs	r3, r1
 8002870:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002874:	e00f      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xee>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002876:	2701      	movs	r7, #1
 8002878:	463e      	mov	r6, r7
 800287a:	e00c      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800287c:	4a3c      	ldr	r2, [pc, #240]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800287e:	68d3      	ldr	r3, [r2, #12]
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	60d3      	str	r3, [r2, #12]
      break;
 8002886:	e7eb      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002888:	2100      	movs	r1, #0
 800288a:	1d20      	adds	r0, r4, #4
 800288c:	f7ff fed8 	bl	8002640 <RCCEx_PLLSAI1_Config>
 8002890:	4606      	mov	r6, r0
      break;
 8002892:	e7e5      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8002894:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800289c:	d071      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80028a6:	d14e      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028bc:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80028ca:	f7fe f8bb 	bl	8000a44 <HAL_GetTick>
 80028ce:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028d0:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80028d8:	d105      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe f8b3 	bl	8000a44 <HAL_GetTick>
 80028de:	1b40      	subs	r0, r0, r5
 80028e0:	2802      	cmp	r0, #2
 80028e2:	d9f5      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x128>
        ret = HAL_TIMEOUT;
 80028e4:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 80028e6:	2e00      	cmp	r6, #0
 80028e8:	d146      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ea:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028f0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80028f4:	d016      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028f6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d012      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002900:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800290c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002910:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002914:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8002918:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800291c:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002924:	f013 0f01 	tst.w	r3, #1
 8002928:	d110      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      if(ret == HAL_OK)
 800292a:	2e00      	cmp	r6, #0
 800292c:	f040 8159 	bne.w	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002932:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800293e:	430b      	orrs	r3, r1
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002944:	e019      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    FlagStatus       pwrclkchanged = RESET;
 8002946:	f04f 0800 	mov.w	r8, #0
 800294a:	e7b9      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        tickstart = HAL_GetTick();
 800294c:	f7fe f87a 	bl	8000a44 <HAL_GetTick>
 8002950:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002958:	f013 0f02 	tst.w	r3, #2
 800295c:	d1e5      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x182>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe f871 	bl	8000a44 <HAL_GetTick>
 8002962:	1b40      	subs	r0, r0, r5
 8002964:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002968:	4298      	cmp	r0, r3
 800296a:	d9f2      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            ret = HAL_TIMEOUT;
 800296c:	2603      	movs	r6, #3
 800296e:	e7dc      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
      status = ret;
 8002978:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800297a:	f1b8 0f00 	cmp.w	r8, #0
 800297e:	f040 8132 	bne.w	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f013 0f01 	tst.w	r3, #1
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298a:	4ab6      	ldr	r2, [pc, #728]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800298c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002990:	f023 0303 	bic.w	r3, r3, #3
 8002994:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002996:	430b      	orrs	r3, r1
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f013 0f02 	tst.w	r3, #2
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a4:	4aaf      	ldr	r2, [pc, #700]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80029aa:	f023 030c 	bic.w	r3, r3, #12
 80029ae:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80029b0:	430b      	orrs	r3, r1
 80029b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f013 0f04 	tst.w	r3, #4
 80029bc:	d008      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029be:	4aa9      	ldr	r2, [pc, #676]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80029c4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80029c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80029ca:	430b      	orrs	r3, r1
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	f013 0f08 	tst.w	r3, #8
 80029d6:	d008      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029d8:	4aa2      	ldr	r2, [pc, #648]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80029de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80029e4:	430b      	orrs	r3, r1
 80029e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	f013 0f10 	tst.w	r3, #16
 80029f0:	d008      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029f2:	4a9c      	ldr	r2, [pc, #624]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80029f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80029f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029fc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80029fe:	430b      	orrs	r3, r1
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f013 0f20 	tst.w	r3, #32
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a0c:	4a95      	ldr	r2, [pc, #596]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a12:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a16:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a26:	4a8f      	ldr	r2, [pc, #572]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a28:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a2c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002a30:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002a32:	430b      	orrs	r3, r1
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a40:	4a88      	ldr	r2, [pc, #544]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a42:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a46:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002a4a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5a:	4a82      	ldr	r2, [pc, #520]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a64:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002a66:	430b      	orrs	r3, r1
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a72:	d008      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a74:	4a7b      	ldr	r2, [pc, #492]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a7a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a7e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002a80:	430b      	orrs	r3, r1
 8002a82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a8e:	4a75      	ldr	r2, [pc, #468]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002a90:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a94:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a98:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002aa6:	d008      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002aaa:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002ac0:	d011      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac2:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ac4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ac8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002acc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ad4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ada:	f000 808a 	beq.w	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae2:	f000 808b 	beq.w	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x454>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002aec:	d01f      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x386>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002af4:	f000 808b 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002af8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002afa:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b06:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b0a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002b0e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002b10:	430b      	orrs	r3, r1
 8002b12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b16:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b1c:	d07f      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x476>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b22:	f000 8082 	beq.w	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x482>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b2a:	f000 8084 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002b34:	d00f      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b36:	4a4b      	ldr	r2, [pc, #300]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b38:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b3c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002b40:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002b42:	430b      	orrs	r3, r1
 8002b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b48:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b4e:	d07b      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b54:	d07d      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002b5c:	d00e      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b5e:	4a41      	ldr	r2, [pc, #260]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b60:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b64:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002b68:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b72:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8002b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b7a:	d075      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002b82:	d009      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b84:	4a37      	ldr	r2, [pc, #220]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002b86:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8002b92:	430b      	orrs	r3, r1
 8002b94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ba0:	4a30      	ldr	r2, [pc, #192]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002ba2:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002ba6:	f023 0318 	bic.w	r3, r3, #24
 8002baa:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002bba:	d00e      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x432>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002bbc:	4a29      	ldr	r2, [pc, #164]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002bbe:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002bc2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002bc6:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002bd0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8002bd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bd8:	d04e      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
}
 8002bda:	4638      	mov	r0, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002be2:	4637      	mov	r7, r6
 8002be4:	e6c9      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002be8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf0:	e6c7      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf2:	68d3      	ldr	r3, [r2, #12]
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf8:	60d3      	str	r3, [r2, #12]
 8002bfa:	e774      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	1d20      	adds	r0, r4, #4
 8002c00:	f7ff fd1e 	bl	8002640 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002c04:	2800      	cmp	r0, #0
 8002c06:	f43f af6e 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
          status = ret;
 8002c0a:	4607      	mov	r7, r0
 8002c0c:	e76b      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c0e:	4a15      	ldr	r2, [pc, #84]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c10:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c18:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c1c:	e77b      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1e:	4a11      	ldr	r2, [pc, #68]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c20:	68d3      	ldr	r3, [r2, #12]
 8002c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c26:	60d3      	str	r3, [r2, #12]
 8002c28:	e781      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8002c2c:	68d3      	ldr	r3, [r2, #12]
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c32:	60d3      	str	r3, [r2, #12]
 8002c34:	e77b      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	2101      	movs	r1, #1
 8002c38:	1d20      	adds	r0, r4, #4
 8002c3a:	f7ff fd01 	bl	8002640 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	f43f af75 	beq.w	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x386>
        status = ret;
 8002c44:	4607      	mov	r7, r0
 8002c46:	e772      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	68d3      	ldr	r3, [r2, #12]
 8002c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4e:	60d3      	str	r3, [r2, #12]
 8002c50:	e781      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c52:	2101      	movs	r1, #1
 8002c54:	1d20      	adds	r0, r4, #4
 8002c56:	f7ff fcf3 	bl	8002640 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	f43f af7b 	beq.w	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        status = ret;
 8002c60:	4607      	mov	r7, r0
 8002c62:	e778      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002c64:	40021000 	.word	0x40021000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c68:	2102      	movs	r1, #2
 8002c6a:	1d20      	adds	r0, r4, #4
 8002c6c:	f7ff fce8 	bl	8002640 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d083      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        status = ret;
 8002c74:	4607      	mov	r7, r0
 8002c76:	e781      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	68d3      	ldr	r3, [r2, #12]
 8002c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c7e:	60d3      	str	r3, [r2, #12]
 8002c80:	e7ab      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002c82:	bf00      	nop

08002c84 <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c84:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	e852 3f00 	ldrex	r3, [r2]
 8002c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	e842 3100 	strex	r1, r3, [r2]
 8002c92:	2900      	cmp	r1, #0
 8002c94:	d1f6      	bne.n	8002c84 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	f102 0308 	add.w	r3, r2, #8
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	3208      	adds	r2, #8
 8002caa:	e842 3100 	strex	r1, r3, [r2]
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	d1f1      	bne.n	8002c96 <UART_EndRxTransfer+0x12>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d006      	beq.n	8002cc6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cc2:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002cc4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	e852 3f00 	ldrex	r3, [r2]
 8002ccc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	e842 3100 	strex	r1, r3, [r2]
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	d1f6      	bne.n	8002cc6 <UART_EndRxTransfer+0x42>
 8002cd8:	e7ee      	b.n	8002cb8 <UART_EndRxTransfer+0x34>
	...

08002cdc <UART_SetConfig>:
{
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ce0:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce2:	6883      	ldr	r3, [r0, #8]
 8002ce4:	6902      	ldr	r2, [r0, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	6942      	ldr	r2, [r0, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	69c2      	ldr	r2, [r0, #28]
 8002cee:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf0:	6808      	ldr	r0, [r1, #0]
 8002cf2:	4a96      	ldr	r2, [pc, #600]	@ (8002f4c <UART_SetConfig+0x270>)
 8002cf4:	4002      	ands	r2, r0
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	6853      	ldr	r3, [r2, #4]
 8002cfe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d02:	68e1      	ldr	r1, [r4, #12]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d08:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	4b90      	ldr	r3, [pc, #576]	@ (8002f50 <UART_SetConfig+0x274>)
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002d12:	6a23      	ldr	r3, [r4, #32]
 8002d14:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d16:	6893      	ldr	r3, [r2, #8]
 8002d18:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d1c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d28:	f023 030f 	bic.w	r3, r3, #15
 8002d2c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	4a87      	ldr	r2, [pc, #540]	@ (8002f54 <UART_SetConfig+0x278>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d010      	beq.n	8002d5c <UART_SetConfig+0x80>
 8002d3a:	4a87      	ldr	r2, [pc, #540]	@ (8002f58 <UART_SetConfig+0x27c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d021      	beq.n	8002d84 <UART_SetConfig+0xa8>
 8002d40:	4a86      	ldr	r2, [pc, #536]	@ (8002f5c <UART_SetConfig+0x280>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d037      	beq.n	8002db6 <UART_SetConfig+0xda>
 8002d46:	4a86      	ldr	r2, [pc, #536]	@ (8002f60 <UART_SetConfig+0x284>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d05c      	beq.n	8002e06 <UART_SetConfig+0x12a>
 8002d4c:	4a85      	ldr	r2, [pc, #532]	@ (8002f64 <UART_SetConfig+0x288>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d06b      	beq.n	8002e2a <UART_SetConfig+0x14e>
 8002d52:	4a7f      	ldr	r2, [pc, #508]	@ (8002f50 <UART_SetConfig+0x274>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d07d      	beq.n	8002e54 <UART_SetConfig+0x178>
 8002d58:	2210      	movs	r2, #16
 8002d5a:	e03a      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002d5c:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8002d60:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002d64:	f002 0203 	and.w	r2, r2, #3
 8002d68:	2a03      	cmp	r2, #3
 8002d6a:	d809      	bhi.n	8002d80 <UART_SetConfig+0xa4>
 8002d6c:	e8df f002 	tbb	[pc, r2]
 8002d70:	06870402 	.word	0x06870402
 8002d74:	2201      	movs	r2, #1
 8002d76:	e02c      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002d78:	2204      	movs	r2, #4
 8002d7a:	e02a      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	e028      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002d80:	2210      	movs	r2, #16
 8002d82:	e026      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002d84:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8002d88:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002d8c:	f002 020c 	and.w	r2, r2, #12
 8002d90:	2a0c      	cmp	r2, #12
 8002d92:	d80e      	bhi.n	8002db2 <UART_SetConfig+0xd6>
 8002d94:	e8df f002 	tbb	[pc, r2]
 8002d98:	0d0d0d07 	.word	0x0d0d0d07
 8002d9c:	0d0d0d09 	.word	0x0d0d0d09
 8002da0:	0d0d0d75 	.word	0x0d0d0d75
 8002da4:	0b          	.byte	0x0b
 8002da5:	00          	.byte	0x00
 8002da6:	2200      	movs	r2, #0
 8002da8:	e013      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002daa:	2204      	movs	r2, #4
 8002dac:	e011      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002dae:	2208      	movs	r2, #8
 8002db0:	e00f      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002db2:	2210      	movs	r2, #16
 8002db4:	e00d      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002db6:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8002dba:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002dbe:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8002dc2:	2a20      	cmp	r2, #32
 8002dc4:	d05f      	beq.n	8002e86 <UART_SetConfig+0x1aa>
 8002dc6:	d81a      	bhi.n	8002dfe <UART_SetConfig+0x122>
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	d05e      	beq.n	8002e8a <UART_SetConfig+0x1ae>
 8002dcc:	2a10      	cmp	r2, #16
 8002dce:	d15e      	bne.n	8002e8e <UART_SetConfig+0x1b2>
 8002dd0:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dd2:	495f      	ldr	r1, [pc, #380]	@ (8002f50 <UART_SetConfig+0x274>)
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	d076      	beq.n	8002ec6 <UART_SetConfig+0x1ea>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd8:	69e0      	ldr	r0, [r4, #28]
 8002dda:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002dde:	f000 80c9 	beq.w	8002f74 <UART_SetConfig+0x298>
    switch (clocksource)
 8002de2:	2a08      	cmp	r2, #8
 8002de4:	f200 8134 	bhi.w	8003050 <UART_SetConfig+0x374>
 8002de8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002dec:	011900f7 	.word	0x011900f7
 8002df0:	013200f5 	.word	0x013200f5
 8002df4:	0132011c 	.word	0x0132011c
 8002df8:	01320132 	.word	0x01320132
 8002dfc:	011f      	.short	0x011f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	2a30      	cmp	r2, #48	@ 0x30
 8002e00:	d147      	bne.n	8002e92 <UART_SetConfig+0x1b6>
 8002e02:	2208      	movs	r2, #8
 8002e04:	e7e5      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e06:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8002e0a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e0e:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8002e12:	2a80      	cmp	r2, #128	@ 0x80
 8002e14:	d03f      	beq.n	8002e96 <UART_SetConfig+0x1ba>
 8002e16:	d804      	bhi.n	8002e22 <UART_SetConfig+0x146>
 8002e18:	b3fa      	cbz	r2, 8002e9a <UART_SetConfig+0x1be>
 8002e1a:	2a40      	cmp	r2, #64	@ 0x40
 8002e1c:	d13f      	bne.n	8002e9e <UART_SetConfig+0x1c2>
 8002e1e:	2204      	movs	r2, #4
 8002e20:	e7d7      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e22:	2ac0      	cmp	r2, #192	@ 0xc0
 8002e24:	d13d      	bne.n	8002ea2 <UART_SetConfig+0x1c6>
 8002e26:	2208      	movs	r2, #8
 8002e28:	e7d3      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e2a:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8002e2e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e32:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002e36:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002e3a:	d034      	beq.n	8002ea6 <UART_SetConfig+0x1ca>
 8002e3c:	d805      	bhi.n	8002e4a <UART_SetConfig+0x16e>
 8002e3e:	b3a2      	cbz	r2, 8002eaa <UART_SetConfig+0x1ce>
 8002e40:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002e44:	d133      	bne.n	8002eae <UART_SetConfig+0x1d2>
 8002e46:	2204      	movs	r2, #4
 8002e48:	e7c3      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e4a:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002e4e:	d130      	bne.n	8002eb2 <UART_SetConfig+0x1d6>
 8002e50:	2208      	movs	r2, #8
 8002e52:	e7be      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e54:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8002e58:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e5c:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8002e60:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002e64:	d027      	beq.n	8002eb6 <UART_SetConfig+0x1da>
 8002e66:	d805      	bhi.n	8002e74 <UART_SetConfig+0x198>
 8002e68:	b33a      	cbz	r2, 8002eba <UART_SetConfig+0x1de>
 8002e6a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002e6e:	d126      	bne.n	8002ebe <UART_SetConfig+0x1e2>
 8002e70:	2204      	movs	r2, #4
 8002e72:	e7ae      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e74:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8002e78:	d123      	bne.n	8002ec2 <UART_SetConfig+0x1e6>
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	e7a9      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e7e:	2202      	movs	r2, #2
 8002e80:	e7a7      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e82:	2202      	movs	r2, #2
 8002e84:	e7a5      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e86:	2202      	movs	r2, #2
 8002e88:	e7a3      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	e7a1      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e8e:	2210      	movs	r2, #16
 8002e90:	e79f      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e92:	2210      	movs	r2, #16
 8002e94:	e79d      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e96:	2202      	movs	r2, #2
 8002e98:	e79b      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	e799      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	e797      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	e795      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	e793      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002eaa:	2200      	movs	r2, #0
 8002eac:	e791      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002eae:	2210      	movs	r2, #16
 8002eb0:	e78f      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	e78d      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	e78b      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	e789      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	e787      	b.n	8002dd2 <UART_SetConfig+0xf6>
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	e785      	b.n	8002dd2 <UART_SetConfig+0xf6>
    switch (clocksource)
 8002ec6:	2a08      	cmp	r2, #8
 8002ec8:	f200 80b2 	bhi.w	8003030 <UART_SetConfig+0x354>
 8002ecc:	e8df f002 	tbb	[pc, r2]
 8002ed0:	b03bb008 	.word	0xb03bb008
 8002ed4:	b0b0b038 	.word	0xb0b0b038
 8002ed8:	05          	.byte	0x05
 8002ed9:	00          	.byte	0x00
 8002eda:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002ede:	e004      	b.n	8002eea <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7ff fad6 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	f000 80a5 	beq.w	8003034 <UART_SetConfig+0x358>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002eea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002eec:	4b1e      	ldr	r3, [pc, #120]	@ (8002f68 <UART_SetConfig+0x28c>)
 8002eee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002ef2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ef6:	6865      	ldr	r5, [r4, #4]
 8002ef8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8002efc:	4299      	cmp	r1, r3
 8002efe:	f200 809b 	bhi.w	8003038 <UART_SetConfig+0x35c>
 8002f02:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8002f06:	f200 8099 	bhi.w	800303c <UART_SetConfig+0x360>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	4633      	mov	r3, r6
 8002f0e:	4631      	mov	r1, r6
 8002f10:	f7fd f974 	bl	80001fc <__aeabi_uldivmod>
 8002f14:	0209      	lsls	r1, r1, #8
 8002f16:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8002f1a:	0200      	lsls	r0, r0, #8
 8002f1c:	086b      	lsrs	r3, r5, #1
 8002f1e:	18c0      	adds	r0, r0, r3
 8002f20:	462a      	mov	r2, r5
 8002f22:	4633      	mov	r3, r6
 8002f24:	f141 0100 	adc.w	r1, r1, #0
 8002f28:	f7fd f968 	bl	80001fc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f2c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8002f30:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <UART_SetConfig+0x290>)
 8002f32:	429a      	cmp	r2, r3
 8002f34:	f200 8084 	bhi.w	8003040 <UART_SetConfig+0x364>
          huart->Instance->BRR = usartdiv;
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	60d8      	str	r0, [r3, #12]
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	e065      	b.n	800300c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f40:	f7fe fe06 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
        break;
 8002f44:	e7ce      	b.n	8002ee4 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8002f46:	480a      	ldr	r0, [pc, #40]	@ (8002f70 <UART_SetConfig+0x294>)
 8002f48:	e7cf      	b.n	8002eea <UART_SetConfig+0x20e>
 8002f4a:	bf00      	nop
 8002f4c:	cfff69f3 	.word	0xcfff69f3
 8002f50:	40008000 	.word	0x40008000
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	40004800 	.word	0x40004800
 8002f60:	40004c00 	.word	0x40004c00
 8002f64:	40005000 	.word	0x40005000
 8002f68:	080052d8 	.word	0x080052d8
 8002f6c:	000ffcff 	.word	0x000ffcff
 8002f70:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8002f74:	2a08      	cmp	r2, #8
 8002f76:	d865      	bhi.n	8003044 <UART_SetConfig+0x368>
 8002f78:	e8df f002 	tbb	[pc, r2]
 8002f7c:	64052707 	.word	0x64052707
 8002f80:	6464642a 	.word	0x6464642a
 8002f84:	0b          	.byte	0x0b
 8002f85:	00          	.byte	0x00
 8002f86:	4835      	ldr	r0, [pc, #212]	@ (800305c <UART_SetConfig+0x380>)
 8002f88:	e003      	b.n	8002f92 <UART_SetConfig+0x2b6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8a:	f7ff fa81 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d05a      	beq.n	8003048 <UART_SetConfig+0x36c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f92:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f94:	4b32      	ldr	r3, [pc, #200]	@ (8003060 <UART_SetConfig+0x384>)
 8002f96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f9e:	6862      	ldr	r2, [r4, #4]
 8002fa0:	0853      	lsrs	r3, r2, #1
 8002fa2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002fa6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002faa:	f1a3 0110 	sub.w	r1, r3, #16
 8002fae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002fb2:	4291      	cmp	r1, r2
 8002fb4:	d84a      	bhi.n	800304c <UART_SetConfig+0x370>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002fc0:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	60d3      	str	r3, [r2, #12]
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e020      	b.n	800300c <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fca:	f7ff fa73 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
        break;
 8002fce:	e7de      	b.n	8002f8e <UART_SetConfig+0x2b2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd0:	f7fe fdbe 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
        break;
 8002fd4:	e7db      	b.n	8002f8e <UART_SetConfig+0x2b2>
    switch (clocksource)
 8002fd6:	4821      	ldr	r0, [pc, #132]	@ (800305c <UART_SetConfig+0x380>)
 8002fd8:	e003      	b.n	8002fe2 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fda:	f7ff fa59 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d038      	beq.n	8003054 <UART_SetConfig+0x378>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fe2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <UART_SetConfig+0x384>)
 8002fe6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002fea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ff4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff8:	f1a0 0210 	sub.w	r2, r0, #16
 8002ffc:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8003000:	429a      	cmp	r2, r3
 8003002:	d829      	bhi.n	8003058 <UART_SetConfig+0x37c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	b280      	uxth	r0, r0
 8003008:	60d8      	str	r0, [r3, #12]
 800300a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800300c:	2301      	movs	r3, #1
 800300e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003012:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800301a:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800301e:	f7ff fa49 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
        break;
 8003022:	e7dc      	b.n	8002fde <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8003024:	f7fe fd94 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
        break;
 8003028:	e7d9      	b.n	8002fde <UART_SetConfig+0x302>
        pclk = (uint32_t) LSE_VALUE;
 800302a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800302e:	e7d8      	b.n	8002fe2 <UART_SetConfig+0x306>
    switch (clocksource)
 8003030:	2001      	movs	r0, #1
 8003032:	e7eb      	b.n	800300c <UART_SetConfig+0x330>
 8003034:	2000      	movs	r0, #0
 8003036:	e7e9      	b.n	800300c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e7e7      	b.n	800300c <UART_SetConfig+0x330>
 800303c:	2001      	movs	r0, #1
 800303e:	e7e5      	b.n	800300c <UART_SetConfig+0x330>
          ret = HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e7e3      	b.n	800300c <UART_SetConfig+0x330>
    switch (clocksource)
 8003044:	2001      	movs	r0, #1
 8003046:	e7e1      	b.n	800300c <UART_SetConfig+0x330>
 8003048:	2000      	movs	r0, #0
 800304a:	e7df      	b.n	800300c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 800304c:	2001      	movs	r0, #1
 800304e:	e7dd      	b.n	800300c <UART_SetConfig+0x330>
    switch (clocksource)
 8003050:	2001      	movs	r0, #1
 8003052:	e7db      	b.n	800300c <UART_SetConfig+0x330>
 8003054:	2000      	movs	r0, #0
 8003056:	e7d9      	b.n	800300c <UART_SetConfig+0x330>
        ret = HAL_ERROR;
 8003058:	2001      	movs	r0, #1
 800305a:	e7d7      	b.n	800300c <UART_SetConfig+0x330>
 800305c:	00f42400 	.word	0x00f42400
 8003060:	080052d8 	.word	0x080052d8

08003064 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003064:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003066:	f013 0f08 	tst.w	r3, #8
 800306a:	d006      	beq.n	800307a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800306c:	6802      	ldr	r2, [r0, #0]
 800306e:	6853      	ldr	r3, [r2, #4]
 8003070:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003074:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800307a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800307c:	f013 0f01 	tst.w	r3, #1
 8003080:	d006      	beq.n	8003090 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003082:	6802      	ldr	r2, [r0, #0]
 8003084:	6853      	ldr	r3, [r2, #4]
 8003086:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800308a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800308c:	430b      	orrs	r3, r1
 800308e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003090:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003092:	f013 0f02 	tst.w	r3, #2
 8003096:	d006      	beq.n	80030a6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003098:	6802      	ldr	r2, [r0, #0]
 800309a:	6853      	ldr	r3, [r2, #4]
 800309c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80030a8:	f013 0f04 	tst.w	r3, #4
 80030ac:	d006      	beq.n	80030bc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ae:	6802      	ldr	r2, [r0, #0]
 80030b0:	6853      	ldr	r3, [r2, #4]
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80030be:	f013 0f10 	tst.w	r3, #16
 80030c2:	d006      	beq.n	80030d2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c4:	6802      	ldr	r2, [r0, #0]
 80030c6:	6893      	ldr	r3, [r2, #8]
 80030c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030cc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80030d4:	f013 0f20 	tst.w	r3, #32
 80030d8:	d006      	beq.n	80030e8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030da:	6802      	ldr	r2, [r0, #0]
 80030dc:	6893      	ldr	r3, [r2, #8]
 80030de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030e2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80030ea:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030ee:	d00a      	beq.n	8003106 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f0:	6802      	ldr	r2, [r0, #0]
 80030f2:	6853      	ldr	r3, [r2, #4]
 80030f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030f8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003104:	d00b      	beq.n	800311e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003106:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800310c:	d006      	beq.n	800311c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800310e:	6802      	ldr	r2, [r0, #0]
 8003110:	6853      	ldr	r3, [r2, #4]
 8003112:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003116:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003118:	430b      	orrs	r3, r1
 800311a:	6053      	str	r3, [r2, #4]
}
 800311c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800311e:	6802      	ldr	r2, [r0, #0]
 8003120:	6853      	ldr	r3, [r2, #4]
 8003122:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003126:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003128:	430b      	orrs	r3, r1
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	e7eb      	b.n	8003106 <UART_AdvFeatureConfig+0xa2>

0800312e <UART_WaitOnFlagUntilTimeout>:
{
 800312e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003132:	4605      	mov	r5, r0
 8003134:	460e      	mov	r6, r1
 8003136:	4617      	mov	r7, r2
 8003138:	4699      	mov	r9, r3
 800313a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	69dc      	ldr	r4, [r3, #28]
 8003142:	ea36 0404 	bics.w	r4, r6, r4
 8003146:	bf0c      	ite	eq
 8003148:	2401      	moveq	r4, #1
 800314a:	2400      	movne	r4, #0
 800314c:	42bc      	cmp	r4, r7
 800314e:	d136      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8003150:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003154:	d0f3      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fd fc75 	bl	8000a44 <HAL_GetTick>
 800315a:	eba0 0009 	sub.w	r0, r0, r9
 800315e:	4540      	cmp	r0, r8
 8003160:	d830      	bhi.n	80031c4 <UART_WaitOnFlagUntilTimeout+0x96>
 8003162:	f1b8 0f00 	cmp.w	r8, #0
 8003166:	d02f      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f012 0f04 	tst.w	r2, #4
 8003170:	d0e5      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x10>
 8003172:	2e80      	cmp	r6, #128	@ 0x80
 8003174:	d0e3      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x10>
 8003176:	2e40      	cmp	r6, #64	@ 0x40
 8003178:	d0e1      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	f012 0f08 	tst.w	r2, #8
 8003180:	d111      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003188:	d0d9      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800318a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800318e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003190:	4628      	mov	r0, r5
 8003192:	f7ff fd77 	bl	8002c84 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003196:	2320      	movs	r3, #32
 8003198:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800319c:	2300      	movs	r3, #0
 800319e:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
 80031a4:	e00c      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031a6:	2408      	movs	r4, #8
 80031a8:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80031aa:	4628      	mov	r0, r5
 80031ac:	f7ff fd6a 	bl	8002c84 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031b0:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80031b4:	2300      	movs	r3, #0
 80031b6:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 80031ba:	2001      	movs	r0, #1
 80031bc:	e000      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 80031be:	2000      	movs	r0, #0
}
 80031c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80031c4:	2003      	movs	r0, #3
 80031c6:	e7fb      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x92>
 80031c8:	2003      	movs	r0, #3
 80031ca:	e7f9      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x92>

080031cc <UART_CheckIdleState>:
{
 80031cc:	b530      	push	{r4, r5, lr}
 80031ce:	b083      	sub	sp, #12
 80031d0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80031d8:	f7fd fc34 	bl	8000a44 <HAL_GetTick>
 80031dc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	f012 0f08 	tst.w	r2, #8
 80031e6:	d110      	bne.n	800320a <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f013 0f04 	tst.w	r3, #4
 80031f0:	d128      	bne.n	8003244 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80031f2:	2320      	movs	r3, #32
 80031f4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80031f8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	2000      	movs	r0, #0
 80031fe:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003200:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8003202:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8003206:	b003      	add	sp, #12
 8003208:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4603      	mov	r3, r0
 8003212:	2200      	movs	r2, #0
 8003214:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ff88 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 800321e:	2800      	cmp	r0, #0
 8003220:	d0e2      	beq.n	80031e8 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003222:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	e852 3f00 	ldrex	r3, [r2]
 8003228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	e842 3100 	strex	r1, r3, [r2]
 8003230:	2900      	cmp	r1, #0
 8003232:	d1f6      	bne.n	8003222 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8003234:	2320      	movs	r3, #32
 8003236:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 800323a:	2300      	movs	r3, #0
 800323c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8003240:	2003      	movs	r0, #3
 8003242:	e7e0      	b.n	8003206 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	462b      	mov	r3, r5
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003252:	4620      	mov	r0, r4
 8003254:	f7ff ff6b 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 8003258:	2800      	cmp	r0, #0
 800325a:	d0ca      	beq.n	80031f2 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800325c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	e852 3f00 	ldrex	r3, [r2]
 8003262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	e842 3100 	strex	r1, r3, [r2]
 800326a:	2900      	cmp	r1, #0
 800326c:	d1f6      	bne.n	800325c <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	f102 0308 	add.w	r3, r2, #8
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	3208      	adds	r2, #8
 800327e:	e842 3100 	strex	r1, r3, [r2]
 8003282:	2900      	cmp	r1, #0
 8003284:	d1f3      	bne.n	800326e <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8003286:	2320      	movs	r3, #32
 8003288:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800328c:	2300      	movs	r3, #0
 800328e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8003292:	2003      	movs	r0, #3
 8003294:	e7b7      	b.n	8003206 <UART_CheckIdleState+0x3a>

08003296 <HAL_UART_Init>:
  if (huart == NULL)
 8003296:	b378      	cbz	r0, 80032f8 <HAL_UART_Init+0x62>
{
 8003298:	b510      	push	{r4, lr}
 800329a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800329c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80032a0:	b30b      	cbz	r3, 80032e6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80032a2:	2324      	movs	r3, #36	@ 0x24
 80032a4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032b4:	b9e3      	cbnz	r3, 80032f0 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff fd10 	bl	8002cdc <UART_SetConfig>
 80032bc:	2801      	cmp	r0, #1
 80032be:	d011      	beq.n	80032e4 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	6853      	ldr	r3, [r2, #4]
 80032c4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80032c8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	6893      	ldr	r3, [r2, #8]
 80032ce:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80032d2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff ff74 	bl	80031cc <UART_CheckIdleState>
}
 80032e4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80032e6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80032ea:	f7fd faa5 	bl	8000838 <HAL_UART_MspInit>
 80032ee:	e7d8      	b.n	80032a2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff feb7 	bl	8003064 <UART_AdvFeatureConfig>
 80032f6:	e7de      	b.n	80032b6 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80032f8:	2001      	movs	r0, #1
}
 80032fa:	4770      	bx	lr

080032fc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032fc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80032fe:	b92b      	cbnz	r3, 800330c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8003300:	2301      	movs	r3, #1
 8003302:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003306:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800330a:	4770      	bx	lr
{
 800330c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800330e:	6803      	ldr	r3, [r0, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800331a:	4d09      	ldr	r5, [pc, #36]	@ (8003340 <UARTEx_SetNbDataToProcess+0x44>)
 800331c:	5c6b      	ldrb	r3, [r5, r1]
 800331e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003320:	4c08      	ldr	r4, [pc, #32]	@ (8003344 <UARTEx_SetNbDataToProcess+0x48>)
 8003322:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003324:	fb93 f3f1 	sdiv	r3, r3, r1
 8003328:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800332c:	5cab      	ldrb	r3, [r5, r2]
 800332e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003330:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003332:	fb93 f3f2 	sdiv	r3, r3, r2
 8003336:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800333a:	bc30      	pop	{r4, r5}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	080052f8 	.word	0x080052f8
 8003344:	080052f0 	.word	0x080052f0

08003348 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003348:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800334c:	2b01      	cmp	r3, #1
 800334e:	d018      	beq.n	8003382 <HAL_UARTEx_DisableFifoMode+0x3a>
 8003350:	2301      	movs	r3, #1
 8003352:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	2324      	movs	r3, #36	@ 0x24
 8003358:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800335c:	6803      	ldr	r3, [r0, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	f021 0101 	bic.w	r1, r1, #1
 8003366:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003368:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003370:	6801      	ldr	r1, [r0, #0]
 8003372:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003374:	2220      	movs	r2, #32
 8003376:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800337a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800337e:	4618      	mov	r0, r3
 8003380:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003382:	2002      	movs	r0, #2
}
 8003384:	4770      	bx	lr

08003386 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003386:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003388:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800338c:	2b01      	cmp	r3, #1
 800338e:	d01d      	beq.n	80033cc <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003390:	4604      	mov	r4, r0
 8003392:	2301      	movs	r3, #1
 8003394:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8003398:	2324      	movs	r3, #36	@ 0x24
 800339a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800339e:	6803      	ldr	r3, [r0, #0]
 80033a0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033aa:	6802      	ldr	r2, [r0, #0]
 80033ac:	6893      	ldr	r3, [r2, #8]
 80033ae:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80033b2:	4319      	orrs	r1, r3
 80033b4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80033b6:	f7ff ffa1 	bl	80032fc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80033be:	2320      	movs	r3, #32
 80033c0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80033ca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80033cc:	2002      	movs	r0, #2
 80033ce:	e7fc      	b.n	80033ca <HAL_UARTEx_SetTxFifoThreshold+0x44>

080033d0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80033d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80033d2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d01d      	beq.n	8003416 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80033da:	4604      	mov	r4, r0
 80033dc:	2301      	movs	r3, #1
 80033de:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80033e2:	2324      	movs	r3, #36	@ 0x24
 80033e4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033e8:	6803      	ldr	r3, [r0, #0]
 80033ea:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033f4:	6802      	ldr	r2, [r0, #0]
 80033f6:	6893      	ldr	r3, [r2, #8]
 80033f8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80033fc:	4319      	orrs	r1, r3
 80033fe:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003400:	f7ff ff7c 	bl	80032fc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003408:	2320      	movs	r3, #32
 800340a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800340e:	2000      	movs	r0, #0
 8003410:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8003414:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003416:	2002      	movs	r0, #2
 8003418:	e7fc      	b.n	8003414 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800341a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800341a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003420:	9b01      	ldr	r3, [sp, #4]
 8003422:	3301      	adds	r3, #1
 8003424:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003426:	9b01      	ldr	r3, [sp, #4]
 8003428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800342c:	d815      	bhi.n	800345a <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800342e:	6903      	ldr	r3, [r0, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	daf5      	bge.n	8003420 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003438:	6903      	ldr	r3, [r0, #16]
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8003440:	9b01      	ldr	r3, [sp, #4]
 8003442:	3301      	adds	r3, #1
 8003444:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003446:	9b01      	ldr	r3, [sp, #4]
 8003448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800344c:	d808      	bhi.n	8003460 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800344e:	6903      	ldr	r3, [r0, #16]
 8003450:	f013 0f01 	tst.w	r3, #1
 8003454:	d1f4      	bne.n	8003440 <USB_CoreReset+0x26>

  return HAL_OK;
 8003456:	2000      	movs	r0, #0
 8003458:	e000      	b.n	800345c <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800345a:	2003      	movs	r0, #3
}
 800345c:	b002      	add	sp, #8
 800345e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003460:	2003      	movs	r0, #3
 8003462:	e7fb      	b.n	800345c <USB_CoreReset+0x42>

08003464 <USB_CoreInit>:
{
 8003464:	b084      	sub	sp, #16
 8003466:	b510      	push	{r4, lr}
 8003468:	4604      	mov	r4, r0
 800346a:	f10d 0c0c 	add.w	ip, sp, #12
 800346e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003472:	68c3      	ldr	r3, [r0, #12]
 8003474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003478:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 800347a:	f7ff ffce 	bl	800341a <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 800347e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003482:	b93b      	cbnz	r3, 8003494 <USB_CoreInit+0x30>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003484:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800348c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003490:	b004      	add	sp, #16
 8003492:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003494:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800349c:	e7f6      	b.n	800348c <USB_CoreInit+0x28>
	...

080034a0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80034a0:	2a02      	cmp	r2, #2
 80034a2:	d00a      	beq.n	80034ba <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034a4:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034a6:	68c3      	ldr	r3, [r0, #12]
 80034a8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80034ac:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034ae:	68c3      	ldr	r3, [r0, #12]
 80034b0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80034b4:	60c3      	str	r3, [r0, #12]
}
 80034b6:	2000      	movs	r0, #0
 80034b8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034ba:	4b23      	ldr	r3, [pc, #140]	@ (8003548 <USB_SetTurnaroundTime+0xa8>)
 80034bc:	440b      	add	r3, r1
 80034be:	4a23      	ldr	r2, [pc, #140]	@ (800354c <USB_SetTurnaroundTime+0xac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d92f      	bls.n	8003524 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034c4:	4b22      	ldr	r3, [pc, #136]	@ (8003550 <USB_SetTurnaroundTime+0xb0>)
 80034c6:	440b      	add	r3, r1
 80034c8:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <USB_SetTurnaroundTime+0xb4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d92c      	bls.n	8003528 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034ce:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80034d2:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80034d6:	4a20      	ldr	r2, [pc, #128]	@ (8003558 <USB_SetTurnaroundTime+0xb8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d927      	bls.n	800352c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034dc:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80034e0:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80034e4:	4a1d      	ldr	r2, [pc, #116]	@ (800355c <USB_SetTurnaroundTime+0xbc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d322      	bcc.n	8003530 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <USB_SetTurnaroundTime+0xc0>)
 80034ec:	440b      	add	r3, r1
 80034ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <USB_SetTurnaroundTime+0xc4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d91f      	bls.n	8003534 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <USB_SetTurnaroundTime+0xc8>)
 80034f6:	440b      	add	r3, r1
 80034f8:	4a1c      	ldr	r2, [pc, #112]	@ (800356c <USB_SetTurnaroundTime+0xcc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d31c      	bcc.n	8003538 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003570 <USB_SetTurnaroundTime+0xd0>)
 8003500:	440b      	add	r3, r1
 8003502:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <USB_SetTurnaroundTime+0xd4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d319      	bcc.n	800353c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003508:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 800350c:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8003510:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <USB_SetTurnaroundTime+0xd8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d314      	bcc.n	8003540 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003516:	4b19      	ldr	r3, [pc, #100]	@ (800357c <USB_SetTurnaroundTime+0xdc>)
 8003518:	440b      	add	r3, r1
 800351a:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <USB_SetTurnaroundTime+0xe0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d211      	bcs.n	8003544 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8003520:	2207      	movs	r2, #7
 8003522:	e7c0      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8003524:	220f      	movs	r2, #15
 8003526:	e7be      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8003528:	220e      	movs	r2, #14
 800352a:	e7bc      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800352c:	220d      	movs	r2, #13
 800352e:	e7ba      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8003530:	220c      	movs	r2, #12
 8003532:	e7b8      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8003534:	220b      	movs	r2, #11
 8003536:	e7b6      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8003538:	220a      	movs	r2, #10
 800353a:	e7b4      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800353c:	2209      	movs	r2, #9
 800353e:	e7b2      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8003540:	2208      	movs	r2, #8
 8003542:	e7b0      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8003544:	2206      	movs	r2, #6
 8003546:	e7ae      	b.n	80034a6 <USB_SetTurnaroundTime+0x6>
 8003548:	ff275340 	.word	0xff275340
 800354c:	000c34ff 	.word	0x000c34ff
 8003550:	ff1b1e40 	.word	0xff1b1e40
 8003554:	000f423f 	.word	0x000f423f
 8003558:	00124f7f 	.word	0x00124f7f
 800355c:	0013d620 	.word	0x0013d620
 8003560:	fee5b660 	.word	0xfee5b660
 8003564:	0016e35f 	.word	0x0016e35f
 8003568:	feced300 	.word	0xfeced300
 800356c:	001b7740 	.word	0x001b7740
 8003570:	feb35bc0 	.word	0xfeb35bc0
 8003574:	002191c0 	.word	0x002191c0
 8003578:	00387520 	.word	0x00387520
 800357c:	fe5954e0 	.word	0xfe5954e0
 8003580:	00419ce0 	.word	0x00419ce0

08003584 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003584:	6883      	ldr	r3, [r0, #8]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6083      	str	r3, [r0, #8]
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003590:	6883      	ldr	r3, [r0, #8]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	6083      	str	r3, [r0, #8]
}
 8003598:	2000      	movs	r0, #0
 800359a:	4770      	bx	lr

0800359c <USB_FlushTxFifo>:
{
 800359c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	9301      	str	r3, [sp, #4]
    count++;
 80035a2:	9b01      	ldr	r3, [sp, #4]
 80035a4:	3301      	adds	r3, #1
 80035a6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035ae:	d815      	bhi.n	80035dc <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035b0:	6903      	ldr	r3, [r0, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	daf5      	bge.n	80035a2 <USB_FlushTxFifo+0x6>
  count = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035ba:	0189      	lsls	r1, r1, #6
 80035bc:	f041 0120 	orr.w	r1, r1, #32
 80035c0:	6101      	str	r1, [r0, #16]
    count++;
 80035c2:	9b01      	ldr	r3, [sp, #4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80035c8:	9b01      	ldr	r3, [sp, #4]
 80035ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035ce:	d808      	bhi.n	80035e2 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035d0:	6903      	ldr	r3, [r0, #16]
 80035d2:	f013 0f20 	tst.w	r3, #32
 80035d6:	d1f4      	bne.n	80035c2 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80035d8:	2000      	movs	r0, #0
 80035da:	e000      	b.n	80035de <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80035dc:	2003      	movs	r0, #3
}
 80035de:	b002      	add	sp, #8
 80035e0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80035e2:	2003      	movs	r0, #3
 80035e4:	e7fb      	b.n	80035de <USB_FlushTxFifo+0x42>

080035e6 <USB_FlushRxFifo>:
{
 80035e6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	9301      	str	r3, [sp, #4]
    count++;
 80035ec:	9b01      	ldr	r3, [sp, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80035f2:	9b01      	ldr	r3, [sp, #4]
 80035f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035f8:	d813      	bhi.n	8003622 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035fa:	6903      	ldr	r3, [r0, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	daf5      	bge.n	80035ec <USB_FlushRxFifo+0x6>
  count = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003604:	2310      	movs	r3, #16
 8003606:	6103      	str	r3, [r0, #16]
    count++;
 8003608:	9b01      	ldr	r3, [sp, #4]
 800360a:	3301      	adds	r3, #1
 800360c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800360e:	9b01      	ldr	r3, [sp, #4]
 8003610:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003614:	d808      	bhi.n	8003628 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003616:	6903      	ldr	r3, [r0, #16]
 8003618:	f013 0f10 	tst.w	r3, #16
 800361c:	d1f4      	bne.n	8003608 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800361e:	2000      	movs	r0, #0
 8003620:	e000      	b.n	8003624 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8003622:	2003      	movs	r0, #3
}
 8003624:	b002      	add	sp, #8
 8003626:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003628:	2003      	movs	r0, #3
 800362a:	e7fb      	b.n	8003624 <USB_FlushRxFifo+0x3e>

0800362c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800362c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003630:	4319      	orrs	r1, r3
 8003632:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8003636:	2000      	movs	r0, #0
 8003638:	4770      	bx	lr
	...

0800363c <USB_DevInit>:
{
 800363c:	b084      	sub	sp, #16
 800363e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003640:	4604      	mov	r4, r0
 8003642:	a807      	add	r0, sp, #28
 8003644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	e006      	b.n	800365a <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 800364c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003650:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003654:	2100      	movs	r1, #0
 8003656:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003658:	3301      	adds	r3, #1
 800365a:	2b0e      	cmp	r3, #14
 800365c:	d9f6      	bls.n	800364c <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800365e:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8003662:	bb76      	cbnz	r6, 80036c2 <USB_DevInit+0x86>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003664:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003670:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003672:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003676:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800367e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003686:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800368e:	2103      	movs	r1, #3
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff ffcb 	bl	800362c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003696:	2110      	movs	r1, #16
 8003698:	4620      	mov	r0, r4
 800369a:	f7ff ff7f 	bl	800359c <USB_FlushTxFifo>
 800369e:	4605      	mov	r5, r0
 80036a0:	b100      	cbz	r0, 80036a4 <USB_DevInit+0x68>
    ret = HAL_ERROR;
 80036a2:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ff9e 	bl	80035e6 <USB_FlushRxFifo>
 80036aa:	b100      	cbz	r0, 80036ae <USB_DevInit+0x72>
    ret = HAL_ERROR;
 80036ac:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80036ae:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036b8:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036bc:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036c0:	e00f      	b.n	80036e2 <USB_DevInit+0xa6>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80036c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80036ca:	e7dd      	b.n	8003688 <USB_DevInit+0x4c>
      if (i == 0U)
 80036cc:	b9cb      	cbnz	r3, 8003702 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036ce:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80036d2:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036d6:	2200      	movs	r2, #0
 80036d8:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036da:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80036de:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036e0:	3301      	adds	r3, #1
 80036e2:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80036e6:	4299      	cmp	r1, r3
 80036e8:	d910      	bls.n	800370c <USB_DevInit+0xd0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036ea:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80036ee:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80036f2:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80036f6:	2800      	cmp	r0, #0
 80036f8:	dbe8      	blt.n	80036cc <USB_DevInit+0x90>
      USBx_INEP(i)->DIEPCTL = 0U;
 80036fa:	2000      	movs	r0, #0
 80036fc:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003700:	e7e9      	b.n	80036d6 <USB_DevInit+0x9a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003706:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800370a:	e7e4      	b.n	80036d6 <USB_DevInit+0x9a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	e00a      	b.n	8003726 <USB_DevInit+0xea>
      if (i == 0U)
 8003710:	b1bb      	cbz	r3, 8003742 <USB_DevInit+0x106>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003712:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8003716:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800371a:	2200      	movs	r2, #0
 800371c:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800371e:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003722:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003724:	3301      	adds	r3, #1
 8003726:	4299      	cmp	r1, r3
 8003728:	d910      	bls.n	800374c <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800372a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800372e:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8003732:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8003736:	2f00      	cmp	r7, #0
 8003738:	dbea      	blt.n	8003710 <USB_DevInit+0xd4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800373a:	2700      	movs	r7, #0
 800373c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003740:	e7eb      	b.n	800371a <USB_DevInit+0xde>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003742:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8003746:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800374a:	e7e6      	b.n	800371a <USB_DevInit+0xde>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800374c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003754:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800375c:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8003760:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003762:	69a3      	ldr	r3, [r4, #24]
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800376a:	69a2      	ldr	r2, [r4, #24]
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <USB_DevInit+0x160>)
 800376e:	4313      	orrs	r3, r2
 8003770:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003772:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8003776:	b11b      	cbz	r3, 8003780 <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003778:	69a3      	ldr	r3, [r4, #24]
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003780:	2e01      	cmp	r6, #1
 8003782:	d004      	beq.n	800378e <USB_DevInit+0x152>
}
 8003784:	4628      	mov	r0, r5
 8003786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800378a:	b004      	add	sp, #16
 800378c:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800378e:	69a3      	ldr	r3, [r4, #24]
 8003790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	61a3      	str	r3, [r4, #24]
 800379a:	e7f3      	b.n	8003784 <USB_DevInit+0x148>
 800379c:	803c3800 	.word	0x803c3800

080037a0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037a0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80037a4:	f003 0306 	and.w	r3, r3, #6
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d005      	beq.n	80037b8 <USB_GetDevSpeed+0x18>
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d001      	beq.n	80037b4 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80037b0:	200f      	movs	r0, #15
}
 80037b2:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80037b4:	2002      	movs	r0, #2
 80037b6:	4770      	bx	lr
 80037b8:	2002      	movs	r0, #2
 80037ba:	4770      	bx	lr

080037bc <USB_ActivateEndpoint>:
{
 80037bc:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80037be:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80037c2:	784b      	ldrb	r3, [r1, #1]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d023      	beq.n	8003810 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80037c8:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80037cc:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80037d0:	f00c 040f 	and.w	r4, ip, #15
 80037d4:	2201      	movs	r2, #1
 80037d6:	40a2      	lsls	r2, r4
 80037d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037dc:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037e0:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80037e4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80037e8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80037ec:	d10e      	bne.n	800380c <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037ee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80037f2:	688a      	ldr	r2, [r1, #8]
 80037f4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80037f8:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037fa:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80037fe:	4313      	orrs	r3, r2
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003808:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800380c:	2000      	movs	r0, #0
 800380e:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003810:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8003814:	f00c 0e0f 	and.w	lr, ip, #15
 8003818:	fa03 f30e 	lsl.w	r3, r3, lr
 800381c:	b29b      	uxth	r3, r3
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003824:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8003828:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800382c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003830:	d1ec      	bne.n	800380c <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003832:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003836:	688a      	ldr	r2, [r1, #8]
 8003838:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800383c:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800383e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003842:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003850:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003854:	e7da      	b.n	800380c <USB_ActivateEndpoint+0x50>
	...

08003858 <USB_DeactivateEndpoint>:
{
 8003858:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800385a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800385c:	784a      	ldrb	r2, [r1, #1]
 800385e:	2a01      	cmp	r2, #1
 8003860:	d026      	beq.n	80038b0 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003862:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003866:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800386a:	2a00      	cmp	r2, #0
 800386c:	db52      	blt.n	8003914 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800386e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8003872:	780a      	ldrb	r2, [r1, #0]
 8003874:	f002 020f 	and.w	r2, r2, #15
 8003878:	f04f 0c01 	mov.w	ip, #1
 800387c:	fa0c f202 	lsl.w	r2, ip, r2
 8003880:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8003884:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003888:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800388c:	7809      	ldrb	r1, [r1, #0]
 800388e:	f001 010f 	and.w	r1, r1, #15
 8003892:	fa0c fc01 	lsl.w	ip, ip, r1
 8003896:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800389a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800389e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80038a2:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <USB_DeactivateEndpoint+0xd8>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80038aa:	2000      	movs	r0, #0
 80038ac:	bc30      	pop	{r4, r5}
 80038ae:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038b0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80038b4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80038b8:	2a00      	cmp	r2, #0
 80038ba:	db1e      	blt.n	80038fa <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038bc:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 80038c0:	780a      	ldrb	r2, [r1, #0]
 80038c2:	f002 020f 	and.w	r2, r2, #15
 80038c6:	2401      	movs	r4, #1
 80038c8:	fa04 f202 	lsl.w	r2, r4, r2
 80038cc:	b292      	uxth	r2, r2
 80038ce:	ea25 0202 	bic.w	r2, r5, r2
 80038d2:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038d6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80038da:	7809      	ldrb	r1, [r1, #0]
 80038dc:	f001 010f 	and.w	r1, r1, #15
 80038e0:	408c      	lsls	r4, r1
 80038e2:	b2a4      	uxth	r4, r4
 80038e4:	ea22 0204 	bic.w	r2, r2, r4
 80038e8:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038ec:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80038f0:	4a10      	ldr	r2, [pc, #64]	@ (8003934 <USB_DeactivateEndpoint+0xdc>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 80038f8:	e7d7      	b.n	80038aa <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038fa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80038fe:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8003902:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003906:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800390a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800390e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8003912:	e7d3      	b.n	80038bc <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003914:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003918:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800391c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003920:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003924:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003928:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800392c:	e79f      	b.n	800386e <USB_DeactivateEndpoint+0x16>
 800392e:	bf00      	nop
 8003930:	eff37800 	.word	0xeff37800
 8003934:	ec337800 	.word	0xec337800

08003938 <USB_EPStopXfer>:
{
 8003938:	b410      	push	{r4}
 800393a:	b083      	sub	sp, #12
 800393c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8003942:	7848      	ldrb	r0, [r1, #1]
 8003944:	2801      	cmp	r0, #1
 8003946:	d00b      	beq.n	8003960 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003948:	780b      	ldrb	r3, [r1, #0]
 800394a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800394e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8003952:	2800      	cmp	r0, #0
 8003954:	db2d      	blt.n	80039b2 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8003956:	2000      	movs	r0, #0
}
 8003958:	b003      	add	sp, #12
 800395a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800395e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003960:	780b      	ldrb	r3, [r1, #0]
 8003962:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003966:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800396a:	2c00      	cmp	r4, #0
 800396c:	db01      	blt.n	8003972 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800396e:	2000      	movs	r0, #0
 8003970:	e7f2      	b.n	8003958 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003972:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003976:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800397a:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800397e:	780b      	ldrb	r3, [r1, #0]
 8003980:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003984:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003988:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800398c:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8003990:	9b01      	ldr	r3, [sp, #4]
 8003992:	3301      	adds	r3, #1
 8003994:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8003996:	9c01      	ldr	r4, [sp, #4]
 8003998:	f242 7310 	movw	r3, #10000	@ 0x2710
 800399c:	429c      	cmp	r4, r3
 800399e:	d8db      	bhi.n	8003958 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80039a0:	780b      	ldrb	r3, [r1, #0]
 80039a2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039a6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	dbf0      	blt.n	8003990 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80039ae:	2000      	movs	r0, #0
 80039b0:	e7d2      	b.n	8003958 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80039b2:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80039b6:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80039ba:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80039be:	780b      	ldrb	r3, [r1, #0]
 80039c0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039c4:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80039c8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80039cc:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80039d0:	9b01      	ldr	r3, [sp, #4]
 80039d2:	3301      	adds	r3, #1
 80039d4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80039d6:	9801      	ldr	r0, [sp, #4]
 80039d8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80039dc:	4298      	cmp	r0, r3
 80039de:	d808      	bhi.n	80039f2 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80039e0:	780b      	ldrb	r3, [r1, #0]
 80039e2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039e6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dbf0      	blt.n	80039d0 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80039ee:	2000      	movs	r0, #0
 80039f0:	e7b2      	b.n	8003958 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
 80039f4:	e7b0      	b.n	8003958 <USB_EPStopXfer+0x20>

080039f6 <USB_WritePacket>:
{
 80039f6:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 80039f8:	1cdc      	adds	r4, r3, #3
 80039fa:	08a4      	lsrs	r4, r4, #2
  for (i = 0U; i < count32b; i++)
 80039fc:	f04f 0e00 	mov.w	lr, #0
 8003a00:	e009      	b.n	8003a16 <USB_WritePacket+0x20>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a02:	eb00 3c02 	add.w	ip, r0, r2, lsl #12
 8003a06:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8003a0a:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a0e:	f8cc 3000 	str.w	r3, [ip]
  for (i = 0U; i < count32b; i++)
 8003a12:	f10e 0e01 	add.w	lr, lr, #1
 8003a16:	45a6      	cmp	lr, r4
 8003a18:	d3f3      	bcc.n	8003a02 <USB_WritePacket+0xc>
}
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	bd10      	pop	{r4, pc}
	...

08003a20 <USB_EPStartXfer>:
{
 8003a20:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003a22:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003a24:	784b      	ldrb	r3, [r1, #1]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d02b      	beq.n	8003a82 <USB_EPStartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a2a:	eb00 1c42 	add.w	ip, r0, r2, lsl #5
 8003a2e:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8003a32:	691c      	ldr	r4, [r3, #16]
 8003a34:	0ce4      	lsrs	r4, r4, #19
 8003a36:	04e4      	lsls	r4, r4, #19
 8003a38:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a3a:	691c      	ldr	r4, [r3, #16]
 8003a3c:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8003a40:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 8003a44:	611c      	str	r4, [r3, #16]
    if (epnum == 0U)
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	f040 80a2 	bne.w	8003b90 <USB_EPStartXfer+0x170>
      if (ep->xfer_len > 0U)
 8003a4c:	690a      	ldr	r2, [r1, #16]
 8003a4e:	b10a      	cbz	r2, 8003a54 <USB_EPStartXfer+0x34>
        ep->xfer_len = ep->maxpacket;
 8003a50:	688a      	ldr	r2, [r1, #8]
 8003a52:	610a      	str	r2, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8003a54:	688a      	ldr	r2, [r1, #8]
 8003a56:	620a      	str	r2, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a58:	691c      	ldr	r4, [r3, #16]
 8003a5a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003a5e:	4322      	orrs	r2, r4
 8003a60:	611a      	str	r2, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003a68:	611a      	str	r2, [r3, #16]
    if (ep->type == EP_TYPE_ISOC)
 8003a6a:	790b      	ldrb	r3, [r1, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f000 80b2 	beq.w	8003bd6 <USB_EPStartXfer+0x1b6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a72:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003a76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a7a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8003a7e:	2000      	movs	r0, #0
 8003a80:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 8003a82:	690b      	ldr	r3, [r1, #16]
 8003a84:	bb73      	cbnz	r3, 8003ae4 <USB_EPStartXfer+0xc4>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a86:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003a8a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	@ 0x910
 8003a8e:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8003a92:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 8003a96:	f8c3 4910 	str.w	r4, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a9a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	@ 0x910
 8003a9e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003aa2:	f8c3 4910 	str.w	r4, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aa6:	f8d3 4910 	ldr.w	r4, [r3, #2320]	@ 0x910
 8003aaa:	0ce4      	lsrs	r4, r4, #19
 8003aac:	04e4      	lsls	r4, r4, #19
 8003aae:	f8c3 4910 	str.w	r4, [r3, #2320]	@ 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ab2:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8003ab6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003aba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003abe:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 8003ac2:	790b      	ldrb	r3, [r1, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d04b      	beq.n	8003b60 <USB_EPStartXfer+0x140>
      if (ep->xfer_len > 0U)
 8003ac8:	690b      	ldr	r3, [r1, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0d7      	beq.n	8003a7e <USB_EPStartXfer+0x5e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ace:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8003ad2:	7809      	ldrb	r1, [r1, #0]
 8003ad4:	f001 010f 	and.w	r1, r1, #15
 8003ad8:	2201      	movs	r2, #1
 8003ada:	408a      	lsls	r2, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8003ae2:	e7cc      	b.n	8003a7e <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ae4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aec:	691c      	ldr	r4, [r3, #16]
 8003aee:	0ce4      	lsrs	r4, r4, #19
 8003af0:	04e4      	lsls	r4, r4, #19
 8003af2:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af4:	691c      	ldr	r4, [r3, #16]
 8003af6:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8003afa:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 8003afe:	611c      	str	r4, [r3, #16]
      if (epnum == 0U)
 8003b00:	b982      	cbnz	r2, 8003b24 <USB_EPStartXfer+0x104>
        if (ep->xfer_len > ep->maxpacket)
 8003b02:	690d      	ldr	r5, [r1, #16]
 8003b04:	688c      	ldr	r4, [r1, #8]
 8003b06:	42a5      	cmp	r5, r4
 8003b08:	d900      	bls.n	8003b0c <USB_EPStartXfer+0xec>
          ep->xfer_len = ep->maxpacket;
 8003b0a:	610c      	str	r4, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b0c:	691c      	ldr	r4, [r3, #16]
 8003b0e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003b12:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b14:	691c      	ldr	r4, [r3, #16]
 8003b16:	690d      	ldr	r5, [r1, #16]
 8003b18:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 8003b1c:	ea44 040c 	orr.w	r4, r4, ip
 8003b20:	611c      	str	r4, [r3, #16]
 8003b22:	e7c6      	b.n	8003ab2 <USB_EPStartXfer+0x92>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b24:	690c      	ldr	r4, [r1, #16]
 8003b26:	688d      	ldr	r5, [r1, #8]
 8003b28:	442c      	add	r4, r5
 8003b2a:	3c01      	subs	r4, #1
 8003b2c:	fbb4 f4f5 	udiv	r4, r4, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003b30:	691d      	ldr	r5, [r3, #16]
 8003b32:	fa1f fc84 	uxth.w	ip, r4
 8003b36:	4e31      	ldr	r6, [pc, #196]	@ (8003bfc <USB_EPStartXfer+0x1dc>)
 8003b38:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8003b3c:	432c      	orrs	r4, r5
 8003b3e:	611c      	str	r4, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8003b40:	790c      	ldrb	r4, [r1, #4]
 8003b42:	2c01      	cmp	r4, #1
 8003b44:	d1e6      	bne.n	8003b14 <USB_EPStartXfer+0xf4>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b46:	691c      	ldr	r4, [r3, #16]
 8003b48:	f024 44c0 	bic.w	r4, r4, #1610612736	@ 0x60000000
 8003b4c:	611c      	str	r4, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003b4e:	691c      	ldr	r4, [r3, #16]
 8003b50:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8003b54:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8003b58:	ea44 040c 	orr.w	r4, r4, ip
 8003b5c:	611c      	str	r4, [r3, #16]
 8003b5e:	e7d9      	b.n	8003b14 <USB_EPStartXfer+0xf4>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b60:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003b64:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b68:	d10b      	bne.n	8003b82 <USB_EPStartXfer+0x162>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b6a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003b6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b72:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003b76:	8a0b      	ldrh	r3, [r1, #16]
 8003b78:	780a      	ldrb	r2, [r1, #0]
 8003b7a:	68c9      	ldr	r1, [r1, #12]
 8003b7c:	f7ff ff3b 	bl	80039f6 <USB_WritePacket>
 8003b80:	e77d      	b.n	8003a7e <USB_EPStartXfer+0x5e>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b82:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003b8e:	e7f2      	b.n	8003b76 <USB_EPStartXfer+0x156>
      if (ep->xfer_len == 0U)
 8003b90:	690a      	ldr	r2, [r1, #16]
 8003b92:	b952      	cbnz	r2, 8003baa <USB_EPStartXfer+0x18a>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	688c      	ldr	r4, [r1, #8]
 8003b98:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003b9c:	4322      	orrs	r2, r4
 8003b9e:	611a      	str	r2, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003ba6:	611a      	str	r2, [r3, #16]
 8003ba8:	e75f      	b.n	8003a6a <USB_EPStartXfer+0x4a>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003baa:	688c      	ldr	r4, [r1, #8]
 8003bac:	4422      	add	r2, r4
 8003bae:	3a01      	subs	r2, #1
 8003bb0:	fbb2 f2f4 	udiv	r2, r2, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	fb02 f404 	mul.w	r4, r2, r4
 8003bba:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003bbc:	691c      	ldr	r4, [r3, #16]
 8003bbe:	4d0f      	ldr	r5, [pc, #60]	@ (8003bfc <USB_EPStartXfer+0x1dc>)
 8003bc0:	ea05 42c2 	and.w	r2, r5, r2, lsl #19
 8003bc4:	4322      	orrs	r2, r4
 8003bc6:	611a      	str	r2, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	6a0c      	ldr	r4, [r1, #32]
 8003bcc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003bd0:	4322      	orrs	r2, r4
 8003bd2:	611a      	str	r2, [r3, #16]
 8003bd4:	e749      	b.n	8003a6a <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bd6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003bda:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003bde:	d106      	bne.n	8003bee <USB_EPStartXfer+0x1ce>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003be0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003be4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003be8:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003bec:	e741      	b.n	8003a72 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003bee:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003bfa:	e73a      	b.n	8003a72 <USB_EPStartXfer+0x52>
 8003bfc:	1ff80000 	.word	0x1ff80000

08003c00 <USB_ReadPacket>:
{
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4684      	mov	ip, r0
 8003c04:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c06:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003c0a:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e005      	b.n	8003c1e <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c12:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8003c16:	6809      	ldr	r1, [r1, #0]
 8003c18:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	4573      	cmp	r3, lr
 8003c20:	d3f7      	bcc.n	8003c12 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003c22:	b17a      	cbz	r2, 8003c44 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c24:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8003c28:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003c2c:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c2e:	b2cb      	uxtb	r3, r1
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	fa24 f303 	lsr.w	r3, r4, r3
 8003c36:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003c3a:	3101      	adds	r1, #1
      remaining_bytes--;
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d1f4      	bne.n	8003c2e <USB_ReadPacket+0x2e>
}
 8003c44:	bd10      	pop	{r4, pc}

08003c46 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003c46:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003c48:	784a      	ldrb	r2, [r1, #1]
 8003c4a:	2a01      	cmp	r2, #1
 8003c4c:	d014      	beq.n	8003c78 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c4e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c52:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	db06      	blt.n	8003c68 <USB_EPSetStall+0x22>
 8003c5a:	b12b      	cbz	r3, 8003c68 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c5c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003c60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c64:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c68:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003c6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c70:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003c74:	2000      	movs	r0, #0
 8003c76:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c78:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c7c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	db06      	blt.n	8003c92 <USB_EPSetStall+0x4c>
 8003c84:	b12b      	cbz	r3, 8003c92 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c86:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003c8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c8e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c92:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003c96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c9a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003c9e:	e7e9      	b.n	8003c74 <USB_EPSetStall+0x2e>

08003ca0 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003ca0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003ca2:	784a      	ldrb	r2, [r1, #1]
 8003ca4:	2a01      	cmp	r2, #1
 8003ca6:	d00e      	beq.n	8003cc6 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ca8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003cac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003cb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cb4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cb8:	790b      	ldrb	r3, [r1, #4]
 8003cba:	3b02      	subs	r3, #2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d915      	bls.n	8003cee <USB_EPClearStall+0x4e>
}
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cc6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003cca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cd2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cd6:	790b      	ldrb	r3, [r1, #4]
 8003cd8:	3b02      	subs	r3, #2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d8f0      	bhi.n	8003cc2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ce0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003cec:	e7e9      	b.n	8003cc2 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003cfa:	e7e2      	b.n	8003cc2 <USB_EPClearStall+0x22>

08003cfc <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cfc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003d00:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d04:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d08:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003d0c:	0109      	lsls	r1, r1, #4
 8003d0e:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8003d12:	430b      	orrs	r3, r1
 8003d14:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8003d18:	2000      	movs	r0, #0
 8003d1a:	4770      	bx	lr

08003d1c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d1c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003d20:	f023 0303 	bic.w	r3, r3, #3
 8003d24:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d28:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003d2c:	f023 0302 	bic.w	r3, r3, #2
 8003d30:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003d34:	2000      	movs	r0, #0
 8003d36:	4770      	bx	lr

08003d38 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d38:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003d3c:	f023 0303 	bic.w	r3, r3, #3
 8003d40:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d44:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003d50:	2000      	movs	r0, #0
 8003d52:	4770      	bx	lr

08003d54 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003d54:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003d56:	6980      	ldr	r0, [r0, #24]
}
 8003d58:	4010      	ands	r0, r2
 8003d5a:	4770      	bx	lr

08003d5c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003d5c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003d60:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d64:	69c0      	ldr	r0, [r0, #28]
 8003d66:	4018      	ands	r0, r3
}
 8003d68:	0c00      	lsrs	r0, r0, #16
 8003d6a:	4770      	bx	lr

08003d6c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003d6c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003d70:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d74:	69c0      	ldr	r0, [r0, #28]
 8003d76:	4018      	ands	r0, r3
}
 8003d78:	b280      	uxth	r0, r0
 8003d7a:	4770      	bx	lr

08003d7c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003d7c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003d80:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003d84:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8003d88:	6940      	ldr	r0, [r0, #20]
}
 8003d8a:	4010      	ands	r0, r2
 8003d8c:	4770      	bx	lr

08003d8e <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003d8e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003d92:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003d96:	f001 0c0f 	and.w	ip, r1, #15
 8003d9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003da4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003da8:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8003dac:	6880      	ldr	r0, [r0, #8]
}
 8003dae:	4018      	ands	r0, r3
 8003db0:	4770      	bx	lr

08003db2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003db2:	6940      	ldr	r0, [r0, #20]
}
 8003db4:	f000 0001 	and.w	r0, r0, #1
 8003db8:	4770      	bx	lr

08003dba <USB_SetCurrentMode>:
{
 8003dba:	b538      	push	{r3, r4, r5, lr}
 8003dbc:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003dbe:	68c3      	ldr	r3, [r0, #12]
 8003dc0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003dc4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003dc6:	2901      	cmp	r1, #1
 8003dc8:	d013      	beq.n	8003df2 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003dca:	bb19      	cbnz	r1, 8003e14 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dcc:	68c3      	ldr	r3, [r0, #12]
 8003dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dd2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003dd4:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003dd6:	200a      	movs	r0, #10
 8003dd8:	f7fc fe3a 	bl	8000a50 <HAL_Delay>
      ms += 10U;
 8003ddc:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7ff ffe7 	bl	8003db2 <USB_GetMode>
 8003de4:	b108      	cbz	r0, 8003dea <USB_SetCurrentMode+0x30>
 8003de6:	2cc7      	cmp	r4, #199	@ 0xc7
 8003de8:	d9f5      	bls.n	8003dd6 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003dea:	2cc8      	cmp	r4, #200	@ 0xc8
 8003dec:	d014      	beq.n	8003e18 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003dee:	2000      	movs	r0, #0
}
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003df2:	68c3      	ldr	r3, [r0, #12]
 8003df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003df8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003dfa:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003dfc:	200a      	movs	r0, #10
 8003dfe:	f7fc fe27 	bl	8000a50 <HAL_Delay>
      ms += 10U;
 8003e02:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7ff ffd4 	bl	8003db2 <USB_GetMode>
 8003e0a:	2801      	cmp	r0, #1
 8003e0c:	d0ed      	beq.n	8003dea <USB_SetCurrentMode+0x30>
 8003e0e:	2cc7      	cmp	r4, #199	@ 0xc7
 8003e10:	d9f4      	bls.n	8003dfc <USB_SetCurrentMode+0x42>
 8003e12:	e7ea      	b.n	8003dea <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
 8003e16:	e7eb      	b.n	8003df0 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003e18:	2001      	movs	r0, #1
 8003e1a:	e7e9      	b.n	8003df0 <USB_SetCurrentMode+0x36>

08003e1c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003e1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003e20:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e24:	f023 0307 	bic.w	r3, r3, #7
 8003e28:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003e2c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr

08003e3c <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e3c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <USB_EP0_OutStart+0x40>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d903      	bls.n	8003e4c <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e44:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db14      	blt.n	8003e76 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c0 3b10 	str.w	r3, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e52:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	@ 0xb10
 8003e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e5a:	f8c0 3b10 	str.w	r3, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003e5e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	@ 0xb10
 8003e62:	f043 0318 	orr.w	r3, r3, #24
 8003e66:	f8c0 3b10 	str.w	r3, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e6a:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	@ 0xb10
 8003e6e:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003e72:	f8c0 3b10 	str.w	r3, [r0, #2832]	@ 0xb10
}
 8003e76:	2000      	movs	r0, #0
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	4f54300a 	.word	0x4f54300a

08003e80 <USBD_HID_DataIn>:
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8003e80:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003e84:	33b0      	adds	r3, #176	@ 0xb0
 8003e86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	7318      	strb	r0, [r3, #12]

  return (uint8_t)USBD_OK;
}
 8003e8e:	4770      	bx	lr

08003e90 <USBD_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8003e90:	230a      	movs	r3, #10
 8003e92:	8003      	strh	r3, [r0, #0]

  return USBD_HID_DeviceQualifierDesc;
}
 8003e94:	4800      	ldr	r0, [pc, #0]	@ (8003e98 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8003e96:	4770      	bx	lr
 8003e98:	20040040 	.word	0x20040040

08003e9c <USBD_HID_GetOtherSpeedCfgDesc>:
{
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8003ea0:	2181      	movs	r1, #129	@ 0x81
 8003ea2:	4805      	ldr	r0, [pc, #20]	@ (8003eb8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 8003ea4:	f000 fb10 	bl	80044c8 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8003ea8:	b108      	cbz	r0, 8003eae <USBD_HID_GetOtherSpeedCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8003eaa:	220a      	movs	r2, #10
 8003eac:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8003eae:	2322      	movs	r3, #34	@ 0x22
 8003eb0:	8023      	strh	r3, [r4, #0]
}
 8003eb2:	4801      	ldr	r0, [pc, #4]	@ (8003eb8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20040058 	.word	0x20040058

08003ebc <USBD_HID_GetFSCfgDesc>:
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8003ec0:	2181      	movs	r1, #129	@ 0x81
 8003ec2:	4805      	ldr	r0, [pc, #20]	@ (8003ed8 <USBD_HID_GetFSCfgDesc+0x1c>)
 8003ec4:	f000 fb00 	bl	80044c8 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8003ec8:	b108      	cbz	r0, 8003ece <USBD_HID_GetFSCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8003eca:	220a      	movs	r2, #10
 8003ecc:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8003ece:	2322      	movs	r3, #34	@ 0x22
 8003ed0:	8023      	strh	r3, [r4, #0]
}
 8003ed2:	4801      	ldr	r0, [pc, #4]	@ (8003ed8 <USBD_HID_GetFSCfgDesc+0x1c>)
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20040058 	.word	0x20040058

08003edc <USBD_HID_GetHSCfgDesc>:
{
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8003ee0:	2181      	movs	r1, #129	@ 0x81
 8003ee2:	4805      	ldr	r0, [pc, #20]	@ (8003ef8 <USBD_HID_GetHSCfgDesc+0x1c>)
 8003ee4:	f000 faf0 	bl	80044c8 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8003ee8:	b108      	cbz	r0, 8003eee <USBD_HID_GetHSCfgDesc+0x12>
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8003eea:	2207      	movs	r2, #7
 8003eec:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8003eee:	2322      	movs	r3, #34	@ 0x22
 8003ef0:	8023      	strh	r3, [r4, #0]
}
 8003ef2:	4801      	ldr	r0, [pc, #4]	@ (8003ef8 <USBD_HID_GetHSCfgDesc+0x1c>)
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20040058 	.word	0x20040058

08003efc <USBD_HID_Setup>:
{
 8003efc:	b530      	push	{r4, r5, lr}
 8003efe:	b083      	sub	sp, #12
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003f00:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003f04:	33b0      	adds	r3, #176	@ 0xb0
 8003f06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hhid == NULL)
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8082 	beq.w	800401a <USBD_HID_Setup+0x11e>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f16:	780c      	ldrb	r4, [r1, #0]
 8003f18:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8003f1c:	d025      	beq.n	8003f6a <USBD_HID_Setup+0x6e>
 8003f1e:	2c20      	cmp	r4, #32
 8003f20:	d175      	bne.n	800400e <USBD_HID_Setup+0x112>
      switch (req->bRequest)
 8003f22:	784a      	ldrb	r2, [r1, #1]
 8003f24:	3a02      	subs	r2, #2
 8003f26:	2a09      	cmp	r2, #9
 8003f28:	d81b      	bhi.n	8003f62 <USBD_HID_Setup+0x66>
 8003f2a:	e8df f002 	tbb	[pc, r2]
 8003f2e:	0914      	.short	0x0914
 8003f30:	1a1a1a1a 	.word	0x1a1a1a1a
 8003f34:	050f1a1a 	.word	0x050f1a1a
          hhid->Protocol = (uint8_t)(req->wValue);
 8003f38:	788a      	ldrb	r2, [r1, #2]
 8003f3a:	601a      	str	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003f3c:	2400      	movs	r4, #0
          break;
 8003f3e:	e069      	b.n	8004014 <USBD_HID_Setup+0x118>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8003f40:	2201      	movs	r2, #1
 8003f42:	4619      	mov	r1, r3
 8003f44:	f000 fe88 	bl	8004c58 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003f48:	2400      	movs	r4, #0
          break;
 8003f4a:	e063      	b.n	8004014 <USBD_HID_Setup+0x118>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003f4c:	884a      	ldrh	r2, [r1, #2]
 8003f4e:	0a12      	lsrs	r2, r2, #8
 8003f50:	605a      	str	r2, [r3, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8003f52:	2400      	movs	r4, #0
          break;
 8003f54:	e05e      	b.n	8004014 <USBD_HID_Setup+0x118>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8003f56:	2201      	movs	r2, #1
 8003f58:	1d19      	adds	r1, r3, #4
 8003f5a:	f000 fe7d 	bl	8004c58 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003f5e:	2400      	movs	r4, #0
          break;
 8003f60:	e058      	b.n	8004014 <USBD_HID_Setup+0x118>
          USBD_CtlError(pdev, req);
 8003f62:	f000 faee 	bl	8004542 <USBD_CtlError>
          ret = USBD_FAIL;
 8003f66:	2403      	movs	r4, #3
          break;
 8003f68:	e054      	b.n	8004014 <USBD_HID_Setup+0x118>
      switch (req->bRequest)
 8003f6a:	784d      	ldrb	r5, [r1, #1]
 8003f6c:	2d0b      	cmp	r5, #11
 8003f6e:	d84a      	bhi.n	8004006 <USBD_HID_Setup+0x10a>
 8003f70:	e8df f005 	tbb	[pc, r5]
 8003f74:	49495006 	.word	0x49495006
 8003f78:	49164949 	.word	0x49164949
 8003f7c:	3d2e4949 	.word	0x3d2e4949
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f80:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d003      	beq.n	8003f92 <USBD_HID_Setup+0x96>
            USBD_CtlError(pdev, req);
 8003f8a:	f000 fada 	bl	8004542 <USBD_CtlError>
            ret = USBD_FAIL;
 8003f8e:	2403      	movs	r4, #3
 8003f90:	e040      	b.n	8004014 <USBD_HID_Setup+0x118>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003f92:	2202      	movs	r2, #2
 8003f94:	f10d 0106 	add.w	r1, sp, #6
 8003f98:	f000 fe5e 	bl	8004c58 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003f9c:	462c      	mov	r4, r5
 8003f9e:	e039      	b.n	8004014 <USBD_HID_Setup+0x118>
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8003fa0:	884b      	ldrh	r3, [r1, #2]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	2b22      	cmp	r3, #34	@ 0x22
 8003fa6:	d009      	beq.n	8003fbc <USBD_HID_Setup+0xc0>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8003fa8:	2b21      	cmp	r3, #33	@ 0x21
 8003faa:	d10d      	bne.n	8003fc8 <USBD_HID_Setup+0xcc>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8003fac:	88ca      	ldrh	r2, [r1, #6]
 8003fae:	2a09      	cmp	r2, #9
 8003fb0:	bf28      	it	cs
 8003fb2:	2209      	movcs	r2, #9
            pbuf = USBD_HID_Desc;
 8003fb4:	491a      	ldr	r1, [pc, #104]	@ (8004020 <USBD_HID_Setup+0x124>)
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8003fb6:	f000 fe4f 	bl	8004c58 <USBD_CtlSendData>
          break;
 8003fba:	e02b      	b.n	8004014 <USBD_HID_Setup+0x118>
            len = MIN(HID_JOYSTICK_REPORT_DESC_SIZE, req->wLength);
 8003fbc:	88ca      	ldrh	r2, [r1, #6]
 8003fbe:	2a34      	cmp	r2, #52	@ 0x34
 8003fc0:	bf28      	it	cs
 8003fc2:	2234      	movcs	r2, #52	@ 0x34
            pbuf = HID_JOYSTICK_ReportDesc;
 8003fc4:	4917      	ldr	r1, [pc, #92]	@ (8004024 <USBD_HID_Setup+0x128>)
 8003fc6:	e7f6      	b.n	8003fb6 <USBD_HID_Setup+0xba>
            USBD_CtlError(pdev, req);
 8003fc8:	f000 fabb 	bl	8004542 <USBD_CtlError>
            ret = USBD_FAIL;
 8003fcc:	2403      	movs	r4, #3
            break;
 8003fce:	e021      	b.n	8004014 <USBD_HID_Setup+0x118>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fd0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	2a03      	cmp	r2, #3
 8003fd8:	d003      	beq.n	8003fe2 <USBD_HID_Setup+0xe6>
            USBD_CtlError(pdev, req);
 8003fda:	f000 fab2 	bl	8004542 <USBD_CtlError>
            ret = USBD_FAIL;
 8003fde:	2403      	movs	r4, #3
 8003fe0:	e018      	b.n	8004014 <USBD_HID_Setup+0x118>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f103 0108 	add.w	r1, r3, #8
 8003fe8:	f000 fe36 	bl	8004c58 <USBD_CtlSendData>
 8003fec:	e012      	b.n	8004014 <USBD_HID_Setup+0x118>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fee:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	2a03      	cmp	r2, #3
 8003ff6:	d102      	bne.n	8003ffe <USBD_HID_Setup+0x102>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8003ff8:	788a      	ldrb	r2, [r1, #2]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	e00a      	b.n	8004014 <USBD_HID_Setup+0x118>
            USBD_CtlError(pdev, req);
 8003ffe:	f000 faa0 	bl	8004542 <USBD_CtlError>
            ret = USBD_FAIL;
 8004002:	2403      	movs	r4, #3
 8004004:	e006      	b.n	8004014 <USBD_HID_Setup+0x118>
          USBD_CtlError(pdev, req);
 8004006:	f000 fa9c 	bl	8004542 <USBD_CtlError>
          ret = USBD_FAIL;
 800400a:	2403      	movs	r4, #3
          break;
 800400c:	e002      	b.n	8004014 <USBD_HID_Setup+0x118>
      USBD_CtlError(pdev, req);
 800400e:	f000 fa98 	bl	8004542 <USBD_CtlError>
      ret = USBD_FAIL;
 8004012:	2403      	movs	r4, #3
}
 8004014:	4620      	mov	r0, r4
 8004016:	b003      	add	sp, #12
 8004018:	bd30      	pop	{r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800401a:	2403      	movs	r4, #3
 800401c:	e7fa      	b.n	8004014 <USBD_HID_Setup+0x118>
 800401e:	bf00      	nop
 8004020:	2004004c 	.word	0x2004004c
 8004024:	2004000c 	.word	0x2004000c

08004028 <USBD_HID_DeInit>:
{
 8004028:	b510      	push	{r4, lr}
 800402a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800402c:	2181      	movs	r1, #129	@ 0x81
 800402e:	f001 f84e 	bl	80050ce <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	8723      	strh	r3, [r4, #56]	@ 0x38
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004036:	8763      	strh	r3, [r4, #58]	@ 0x3a
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004038:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800403c:	33b0      	adds	r3, #176	@ 0xb0
 800403e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8004042:	b138      	cbz	r0, 8004054 <USBD_HID_DeInit+0x2c>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004044:	f001 f8ea 	bl	800521c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004048:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800404c:	33b0      	adds	r3, #176	@ 0xb0
 800404e:	2200      	movs	r2, #0
 8004050:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8004054:	2000      	movs	r0, #0
 8004056:	bd10      	pop	{r4, pc}

08004058 <USBD_HID_Init>:
{
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4604      	mov	r4, r0
  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800405c:	2010      	movs	r0, #16
 800405e:	f001 f8d9 	bl	8005214 <USBD_static_malloc>
  if (hhid == NULL)
 8004062:	b1b0      	cbz	r0, 8004092 <USBD_HID_Init+0x3a>
 8004064:	4605      	mov	r5, r0
  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004066:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800406a:	33b0      	adds	r3, #176	@ 0xb0
 800406c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004070:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004074:	7c23      	ldrb	r3, [r4, #16]
 8004076:	b9a3      	cbnz	r3, 80040a2 <USBD_HID_Init+0x4a>
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004078:	2307      	movs	r3, #7
 800407a:	8763      	strh	r3, [r4, #58]	@ 0x3a
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800407c:	2304      	movs	r3, #4
 800407e:	2203      	movs	r2, #3
 8004080:	2181      	movs	r1, #129	@ 0x81
 8004082:	4620      	mov	r0, r4
 8004084:	f001 f811 	bl	80050aa <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004088:	2301      	movs	r3, #1
 800408a:	8723      	strh	r3, [r4, #56]	@ 0x38
  hhid->state = USBD_HID_IDLE;
 800408c:	2000      	movs	r0, #0
 800408e:	7328      	strb	r0, [r5, #12]
}
 8004090:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004092:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004096:	33b0      	adds	r3, #176	@ 0xb0
 8004098:	2200      	movs	r2, #0
 800409a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800409e:	2002      	movs	r0, #2
 80040a0:	e7f6      	b.n	8004090 <USBD_HID_Init+0x38>
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80040a2:	230a      	movs	r3, #10
 80040a4:	8763      	strh	r3, [r4, #58]	@ 0x3a
 80040a6:	e7e9      	b.n	800407c <USBD_HID_Init+0x24>

080040a8 <USBD_HID_SendReport>:
{
 80040a8:	b510      	push	{r4, lr}
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80040aa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80040ae:	f103 0cb0 	add.w	ip, r3, #176	@ 0xb0
 80040b2:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
  if (hhid == NULL)
 80040b6:	b1bb      	cbz	r3, 80040e8 <USBD_HID_SendReport+0x40>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040b8:	f890 c29c 	ldrb.w	ip, [r0, #668]	@ 0x29c
 80040bc:	fa5f fc8c 	uxtb.w	ip, ip
 80040c0:	f1bc 0f03 	cmp.w	ip, #3
 80040c4:	d002      	beq.n	80040cc <USBD_HID_SendReport+0x24>
  return (uint8_t)USBD_OK;
 80040c6:	2400      	movs	r4, #0
}
 80040c8:	4620      	mov	r0, r4
 80040ca:	bd10      	pop	{r4, pc}
    if (hhid->state == USBD_HID_IDLE)
 80040cc:	7b1c      	ldrb	r4, [r3, #12]
 80040ce:	b10c      	cbz	r4, 80040d4 <USBD_HID_SendReport+0x2c>
  return (uint8_t)USBD_OK;
 80040d0:	2400      	movs	r4, #0
 80040d2:	e7f9      	b.n	80040c8 <USBD_HID_SendReport+0x20>
      hhid->state = USBD_HID_BUSY;
 80040d4:	f04f 0c01 	mov.w	ip, #1
 80040d8:	f883 c00c 	strb.w	ip, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80040dc:	4613      	mov	r3, r2
 80040de:	460a      	mov	r2, r1
 80040e0:	2181      	movs	r1, #129	@ 0x81
 80040e2:	f001 f846 	bl	8005172 <USBD_LL_Transmit>
 80040e6:	e7ef      	b.n	80040c8 <USBD_HID_SendReport+0x20>
    return (uint8_t)USBD_FAIL;
 80040e8:	2403      	movs	r4, #3
 80040ea:	e7ed      	b.n	80040c8 <USBD_HID_SendReport+0x20>

080040ec <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80040ec:	b198      	cbz	r0, 8004116 <USBD_Init+0x2a>
{
 80040ee:	b508      	push	{r3, lr}
 80040f0:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80040f2:	2000      	movs	r0, #0
 80040f4:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80040f8:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80040fc:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004100:	b109      	cbz	r1, 8004106 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8004102:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004106:	2101      	movs	r1, #1
 8004108:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800410c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800410e:	4618      	mov	r0, r3
 8004110:	f000 ff88 	bl	8005024 <USBD_LL_Init>

  return ret;
}
 8004114:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004116:	2003      	movs	r0, #3
}
 8004118:	4770      	bx	lr

0800411a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800411a:	b510      	push	{r4, lr}
 800411c:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004124:	b189      	cbz	r1, 800414a <USBD_RegisterClass+0x30>
 8004126:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004128:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800412c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800412e:	b123      	cbz	r3, 800413a <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004130:	f10d 0006 	add.w	r0, sp, #6
 8004134:	4798      	blx	r3
 8004136:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800413a:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800413e:	3301      	adds	r3, #1
 8004140:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8004144:	2000      	movs	r0, #0
}
 8004146:	b002      	add	sp, #8
 8004148:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800414a:	2003      	movs	r0, #3
 800414c:	e7fb      	b.n	8004146 <USBD_RegisterClass+0x2c>

0800414e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800414e:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004150:	f000 ff9c 	bl	800508c <USBD_LL_Start>
}
 8004154:	bd08      	pop	{r3, pc}

08004156 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004156:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004158:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800415c:	b113      	cbz	r3, 8004164 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004162:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8004164:	2000      	movs	r0, #0
 8004166:	e7fc      	b.n	8004162 <USBD_SetClassConfig+0xc>

08004168 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004168:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800416a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4798      	blx	r3
 8004172:	b900      	cbnz	r0, 8004176 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004174:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8004176:	2003      	movs	r0, #3
 8004178:	e7fc      	b.n	8004174 <USBD_ClrClassConfig+0xc>

0800417a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800417a:	b538      	push	{r3, r4, r5, lr}
 800417c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800417e:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8004182:	4628      	mov	r0, r5
 8004184:	f000 f9c9 	bl	800451a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004188:	2301      	movs	r3, #1
 800418a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800418e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8004192:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004196:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800419a:	f001 031f 	and.w	r3, r1, #31
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d00d      	beq.n	80041be <USBD_LL_SetupStage+0x44>
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d010      	beq.n	80041c8 <USBD_LL_SetupStage+0x4e>
 80041a6:	b12b      	cbz	r3, 80041b4 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80041a8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 ff9d 	bl	80050ec <USBD_LL_StallEP>
      break;
 80041b2:	e003      	b.n	80041bc <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80041b4:	4629      	mov	r1, r5
 80041b6:	4620      	mov	r0, r4
 80041b8:	f000 fb96 	bl	80048e8 <USBD_StdDevReq>
  }

  return ret;
}
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80041be:	4629      	mov	r1, r5
 80041c0:	4620      	mov	r0, r4
 80041c2:	f000 fbcc 	bl	800495e <USBD_StdItfReq>
      break;
 80041c6:	e7f9      	b.n	80041bc <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80041c8:	4629      	mov	r1, r5
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fc09 	bl	80049e2 <USBD_StdEPReq>
      break;
 80041d0:	e7f4      	b.n	80041bc <USBD_LL_SetupStage+0x42>

080041d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80041d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d4:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 80041e2:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80041e4:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80041e8:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80041ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80041f0:	b1db      	cbz	r3, 800422a <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	b1db      	cbz	r3, 800422e <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80041f6:	2100      	movs	r1, #0
 80041f8:	4798      	blx	r3
 80041fa:	4607      	mov	r7, r0
 80041fc:	b9c8      	cbnz	r0, 8004232 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80041fe:	2340      	movs	r3, #64	@ 0x40
 8004200:	2200      	movs	r2, #0
 8004202:	4611      	mov	r1, r2
 8004204:	4620      	mov	r0, r4
 8004206:	f000 ff50 	bl	80050aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800420a:	2601      	movs	r6, #1
 800420c:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004210:	2540      	movs	r5, #64	@ 0x40
 8004212:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004216:	462b      	mov	r3, r5
 8004218:	2200      	movs	r2, #0
 800421a:	2180      	movs	r1, #128	@ 0x80
 800421c:	4620      	mov	r0, r4
 800421e:	f000 ff44 	bl	80050aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004222:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004224:	6225      	str	r5, [r4, #32]

  return ret;
}
 8004226:	4638      	mov	r0, r7
 8004228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800422a:	2700      	movs	r7, #0
 800422c:	e7e7      	b.n	80041fe <USBD_LL_Reset+0x2c>
 800422e:	2700      	movs	r7, #0
 8004230:	e7e5      	b.n	80041fe <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8004232:	2703      	movs	r7, #3
 8004234:	e7e3      	b.n	80041fe <USBD_LL_Reset+0x2c>

08004236 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004236:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004238:	2000      	movs	r0, #0
 800423a:	4770      	bx	lr

0800423c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800423c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b04      	cmp	r3, #4
 8004244:	d004      	beq.n	8004250 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004246:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004250:	2304      	movs	r3, #4
 8004252:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8004256:	2000      	movs	r0, #0
 8004258:	4770      	bx	lr

0800425a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800425a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b04      	cmp	r3, #4
 8004262:	d001      	beq.n	8004268 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004264:	2000      	movs	r0, #0
 8004266:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004268:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8004272:	e7f7      	b.n	8004264 <USBD_LL_Resume+0xa>

08004274 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004274:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004276:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d001      	beq.n	8004284 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004280:	2000      	movs	r0, #0
 8004282:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8004284:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f9      	beq.n	8004280 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f6      	beq.n	8004280 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 8004292:	4798      	blx	r3
 8004294:	e7f4      	b.n	8004280 <USBD_LL_SOF+0xc>

08004296 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004296:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004298:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800429c:	33ae      	adds	r3, #174	@ 0xae
 800429e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80042a2:	b15a      	cbz	r2, 80042bc <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d001      	beq.n	80042b2 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80042ae:	2000      	movs	r0, #0
}
 80042b0:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80042b2:	6a13      	ldr	r3, [r2, #32]
 80042b4:	b123      	cbz	r3, 80042c0 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80042b6:	4798      	blx	r3
  return USBD_OK;
 80042b8:	2000      	movs	r0, #0
 80042ba:	e7f9      	b.n	80042b0 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 80042bc:	2003      	movs	r0, #3
 80042be:	e7f7      	b.n	80042b0 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 80042c0:	2000      	movs	r0, #0
 80042c2:	e7f5      	b.n	80042b0 <USBD_LL_IsoINIncomplete+0x1a>

080042c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80042c4:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80042c6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80042ca:	33ae      	adds	r3, #174	@ 0xae
 80042cc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80042d0:	b15a      	cbz	r2, 80042ea <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d001      	beq.n	80042e0 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80042dc:	2000      	movs	r0, #0
}
 80042de:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80042e0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80042e2:	b123      	cbz	r3, 80042ee <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80042e4:	4798      	blx	r3
  return USBD_OK;
 80042e6:	2000      	movs	r0, #0
 80042e8:	e7f9      	b.n	80042de <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 80042ea:	2003      	movs	r0, #3
 80042ec:	e7f7      	b.n	80042de <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 80042ee:	2000      	movs	r0, #0
 80042f0:	e7f5      	b.n	80042de <USBD_LL_IsoOUTIncomplete+0x1a>

080042f2 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80042f2:	2000      	movs	r0, #0
 80042f4:	4770      	bx	lr

080042f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80042f6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80042fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004302:	b123      	cbz	r3, 800430e <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	7901      	ldrb	r1, [r0, #4]
 8004308:	4798      	blx	r3
 800430a:	b910      	cbnz	r0, 8004312 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800430c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800430e:	2000      	movs	r0, #0
 8004310:	e7fc      	b.n	800430c <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8004312:	2003      	movs	r0, #3
 8004314:	e7fa      	b.n	800430c <USBD_LL_DevDisconnected+0x16>

08004316 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004316:	2000      	movs	r0, #0
 8004318:	4770      	bx	lr

0800431a <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800431a:	2000      	movs	r0, #0
 800431c:	4770      	bx	lr

0800431e <USBD_LL_DataOutStage>:
{
 800431e:	b538      	push	{r3, r4, r5, lr}
 8004320:	4604      	mov	r4, r0
  if (epnum == 0U)
 8004322:	460d      	mov	r5, r1
 8004324:	2900      	cmp	r1, #0
 8004326:	d143      	bne.n	80043b0 <USBD_LL_DataOutStage+0x92>
 8004328:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800432a:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800432e:	2a03      	cmp	r2, #3
 8004330:	d001      	beq.n	8004336 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8004332:	4608      	mov	r0, r1
}
 8004334:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004336:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800433a:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800433e:	4291      	cmp	r1, r2
 8004340:	d812      	bhi.n	8004368 <USBD_LL_DataOutStage+0x4a>
        switch (pdev->request.bmRequest & 0x1FU)
 8004342:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2b01      	cmp	r3, #1
 800434c:	d017      	beq.n	800437e <USBD_LL_DataOutStage+0x60>
 800434e:	2b02      	cmp	r3, #2
 8004350:	d01c      	beq.n	800438c <USBD_LL_DataOutStage+0x6e>
 8004352:	4628      	mov	r0, r5
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004354:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d01b      	beq.n	8004396 <USBD_LL_DataOutStage+0x78>
        (void)USBD_CtlSendStatus(pdev);
 800435e:	4620      	mov	r0, r4
 8004360:	f000 fc97 	bl	8004c92 <USBD_CtlSendStatus>
  return USBD_OK;
 8004364:	4628      	mov	r0, r5
 8004366:	e7e5      	b.n	8004334 <USBD_LL_DataOutStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8004368:	1a89      	subs	r1, r1, r2
 800436a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800436e:	428a      	cmp	r2, r1
 8004370:	bf28      	it	cs
 8004372:	460a      	movcs	r2, r1
 8004374:	4619      	mov	r1, r3
 8004376:	f000 fc84 	bl	8004c82 <USBD_CtlContinueRx>
  return USBD_OK;
 800437a:	4628      	mov	r0, r5
 800437c:	e7da      	b.n	8004334 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800437e:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8004382:	f7ff ffc8 	bl	8004316 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004386:	2800      	cmp	r0, #0
 8004388:	d1e9      	bne.n	800435e <USBD_LL_DataOutStage+0x40>
 800438a:	e7e3      	b.n	8004354 <USBD_LL_DataOutStage+0x36>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800438c:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8004390:	f7ff ffc3 	bl	800431a <USBD_CoreFindEP>
            break;
 8004394:	e7f7      	b.n	8004386 <USBD_LL_DataOutStage+0x68>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004396:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800439a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	d0dc      	beq.n	800435e <USBD_LL_DataOutStage+0x40>
              pdev->classId = idx;
 80043a4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	4620      	mov	r0, r4
 80043ac:	4798      	blx	r3
 80043ae:	e7d6      	b.n	800435e <USBD_LL_DataOutStage+0x40>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80043b0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80043b4:	f7ff ffb1 	bl	800431a <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80043b8:	b990      	cbnz	r0, 80043e0 <USBD_LL_DataOutStage+0xc2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043ba:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d1b7      	bne.n	8004334 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 80043c4:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80043c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	d0b0      	beq.n	8004334 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 80043d2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	4629      	mov	r1, r5
 80043da:	4620      	mov	r0, r4
 80043dc:	4798      	blx	r3
      if (ret != USBD_OK)
 80043de:	e7a9      	b.n	8004334 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 80043e0:	2000      	movs	r0, #0
 80043e2:	e7a7      	b.n	8004334 <USBD_LL_DataOutStage+0x16>

080043e4 <USBD_LL_DataInStage>:
{
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4604      	mov	r4, r0
  if (epnum == 0U)
 80043e8:	460d      	mov	r5, r1
 80043ea:	2900      	cmp	r1, #0
 80043ec:	d14b      	bne.n	8004486 <USBD_LL_DataInStage+0xa2>
 80043ee:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80043f0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80043f4:	2a02      	cmp	r2, #2
 80043f6:	d007      	beq.n	8004408 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 80043f8:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 80043fc:	b118      	cbz	r0, 8004406 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8004404:	4628      	mov	r0, r5
}
 8004406:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004408:	69c2      	ldr	r2, [r0, #28]
 800440a:	6a01      	ldr	r1, [r0, #32]
 800440c:	428a      	cmp	r2, r1
 800440e:	d80e      	bhi.n	800442e <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 8004410:	428a      	cmp	r2, r1
 8004412:	d018      	beq.n	8004446 <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004414:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b03      	cmp	r3, #3
 800441c:	d027      	beq.n	800446e <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	4620      	mov	r0, r4
 8004422:	f000 fe63 	bl	80050ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004426:	4620      	mov	r0, r4
 8004428:	f000 fc3e 	bl	8004ca8 <USBD_CtlReceiveStatus>
 800442c:	e7e4      	b.n	80043f8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800442e:	1a52      	subs	r2, r2, r1
 8004430:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004432:	4619      	mov	r1, r3
 8004434:	f000 fc1d 	bl	8004c72 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004438:	2300      	movs	r3, #0
 800443a:	461a      	mov	r2, r3
 800443c:	4619      	mov	r1, r3
 800443e:	4620      	mov	r0, r4
 8004440:	f000 fea6 	bl	8005190 <USBD_LL_PrepareReceive>
 8004444:	e7d8      	b.n	80043f8 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8004446:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004448:	4299      	cmp	r1, r3
 800444a:	d8e3      	bhi.n	8004414 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 800444c:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004450:	4293      	cmp	r3, r2
 8004452:	d2df      	bcs.n	8004414 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004454:	2200      	movs	r2, #0
 8004456:	4611      	mov	r1, r2
 8004458:	f000 fc0b 	bl	8004c72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800445c:	2100      	movs	r1, #0
 800445e:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004462:	460b      	mov	r3, r1
 8004464:	460a      	mov	r2, r1
 8004466:	4620      	mov	r0, r4
 8004468:	f000 fe92 	bl	8005190 <USBD_LL_PrepareReceive>
 800446c:	e7c4      	b.n	80043f8 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800446e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	2a00      	cmp	r2, #0
 8004476:	d0d2      	beq.n	800441e <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 8004478:	2200      	movs	r2, #0
 800447a:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4620      	mov	r0, r4
 8004482:	4798      	blx	r3
 8004484:	e7cb      	b.n	800441e <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004486:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800448a:	f7ff ff46 	bl	800431a <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800448e:	b990      	cbnz	r0, 80044b6 <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004490:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b03      	cmp	r3, #3
 8004498:	d1b5      	bne.n	8004406 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 800449a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800449e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	2a00      	cmp	r2, #0
 80044a6:	d0ae      	beq.n	8004406 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 80044a8:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4629      	mov	r1, r5
 80044b0:	4620      	mov	r0, r4
 80044b2:	4798      	blx	r3
          if (ret != USBD_OK)
 80044b4:	e7a7      	b.n	8004406 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 80044b6:	2000      	movs	r0, #0
 80044b8:	e7a5      	b.n	8004406 <USBD_LL_DataInStage+0x22>

080044ba <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80044ba:	880b      	ldrh	r3, [r1, #0]
 80044bc:	7802      	ldrb	r2, [r0, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80044c2:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 80044c4:	4418      	add	r0, r3
 80044c6:	4770      	bx	lr

080044c8 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 80044c8:	8842      	ldrh	r2, [r0, #2]
 80044ca:	7803      	ldrb	r3, [r0, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d918      	bls.n	8004502 <USBD_GetEpDesc+0x3a>
{
 80044d0:	b530      	push	{r4, r5, lr}
 80044d2:	b083      	sub	sp, #12
 80044d4:	4604      	mov	r4, r0
 80044d6:	460d      	mov	r5, r1
    ptr = desc->bLength;
 80044d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80044dc:	8863      	ldrh	r3, [r4, #2]
 80044de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d20a      	bcs.n	80044fc <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80044e6:	f10d 0106 	add.w	r1, sp, #6
 80044ea:	f7ff ffe6 	bl	80044ba <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80044ee:	7843      	ldrb	r3, [r0, #1]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d1f3      	bne.n	80044dc <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80044f4:	7883      	ldrb	r3, [r0, #2]
 80044f6:	42ab      	cmp	r3, r5
 80044f8:	d1f0      	bne.n	80044dc <USBD_GetEpDesc+0x14>
 80044fa:	e000      	b.n	80044fe <USBD_GetEpDesc+0x36>
 80044fc:	2000      	movs	r0, #0
}
 80044fe:	b003      	add	sp, #12
 8004500:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004502:	2000      	movs	r0, #0
}
 8004504:	4770      	bx	lr

08004506 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004506:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004508:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800450a:	e002      	b.n	8004512 <USBD_GetLen+0xc>
  {
    len++;
 800450c:	3001      	adds	r0, #1
 800450e:	b2c0      	uxtb	r0, r0
    pbuff++;
 8004510:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	2a00      	cmp	r2, #0
 8004516:	d1f9      	bne.n	800450c <USBD_GetLen+0x6>
  }

  return len;
}
 8004518:	4770      	bx	lr

0800451a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800451a:	780b      	ldrb	r3, [r1, #0]
 800451c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800451e:	784b      	ldrb	r3, [r1, #1]
 8004520:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8004522:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8004524:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004526:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800452a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800452c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800452e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8004534:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8004536:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8004538:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800453a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800453e:	80c3      	strh	r3, [r0, #6]
}
 8004540:	4770      	bx	lr

08004542 <USBD_CtlError>:
{
 8004542:	b510      	push	{r4, lr}
 8004544:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004546:	2180      	movs	r1, #128	@ 0x80
 8004548:	f000 fdd0 	bl	80050ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800454c:	2100      	movs	r1, #0
 800454e:	4620      	mov	r0, r4
 8004550:	f000 fdcc 	bl	80050ec <USBD_LL_StallEP>
}
 8004554:	bd10      	pop	{r4, pc}

08004556 <USBD_GetDescriptor>:
{
 8004556:	b530      	push	{r4, r5, lr}
 8004558:	b083      	sub	sp, #12
 800455a:	4604      	mov	r4, r0
 800455c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004564:	884a      	ldrh	r2, [r1, #2]
 8004566:	0a13      	lsrs	r3, r2, #8
 8004568:	3b01      	subs	r3, #1
 800456a:	2b0e      	cmp	r3, #14
 800456c:	f200 80bc 	bhi.w	80046e8 <USBD_GetDescriptor+0x192>
 8004570:	e8df f003 	tbb	[pc, r3]
 8004574:	ba443015 	.word	0xba443015
 8004578:	baab9eba 	.word	0xbaab9eba
 800457c:	babababa 	.word	0xbabababa
 8004580:	baba      	.short	0xbaba
 8004582:	08          	.byte	0x08
 8004583:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004584:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	b123      	cbz	r3, 8004596 <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800458c:	f10d 0106 	add.w	r1, sp, #6
 8004590:	7c00      	ldrb	r0, [r0, #16]
 8004592:	4798      	blx	r3
  if (err != 0U)
 8004594:	e00a      	b.n	80045ac <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8004596:	4629      	mov	r1, r5
 8004598:	f7ff ffd3 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 800459c:	e018      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800459e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f10d 0106 	add.w	r1, sp, #6
 80045a8:	7c00      	ldrb	r0, [r0, #16]
 80045aa:	4798      	blx	r3
  if (req->wLength != 0U)
 80045ac:	88ea      	ldrh	r2, [r5, #6]
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	f000 80a3 	beq.w	80046fa <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 80045b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8099 	beq.w	80046f0 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf28      	it	cs
 80045c2:	461a      	movcs	r2, r3
 80045c4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80045c8:	4601      	mov	r1, r0
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 fb44 	bl	8004c58 <USBD_CtlSendData>
}
 80045d0:	b003      	add	sp, #12
 80045d2:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d4:	7c03      	ldrb	r3, [r0, #16]
 80045d6:	b943      	cbnz	r3, 80045ea <USBD_GetDescriptor+0x94>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80045d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	f10d 0006 	add.w	r0, sp, #6
 80045e2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80045e4:	2302      	movs	r3, #2
 80045e6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80045e8:	e7e0      	b.n	80045ac <USBD_GetDescriptor+0x56>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80045ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	f10d 0006 	add.w	r0, sp, #6
 80045f4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80045f6:	2302      	movs	r3, #2
 80045f8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80045fa:	e7d7      	b.n	80045ac <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	2a05      	cmp	r2, #5
 8004600:	d852      	bhi.n	80046a8 <USBD_GetDescriptor+0x152>
 8004602:	e8df f002 	tbb	[pc, r2]
 8004606:	1003      	.short	0x1003
 8004608:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800460c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b123      	cbz	r3, 800461e <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004614:	f10d 0106 	add.w	r1, sp, #6
 8004618:	7c00      	ldrb	r0, [r0, #16]
 800461a:	4798      	blx	r3
  if (err != 0U)
 800461c:	e7c6      	b.n	80045ac <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800461e:	4629      	mov	r1, r5
 8004620:	f7ff ff8f 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 8004624:	e7d4      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004626:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	b123      	cbz	r3, 8004638 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800462e:	f10d 0106 	add.w	r1, sp, #6
 8004632:	7c00      	ldrb	r0, [r0, #16]
 8004634:	4798      	blx	r3
  if (err != 0U)
 8004636:	e7b9      	b.n	80045ac <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8004638:	4629      	mov	r1, r5
 800463a:	f7ff ff82 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 800463e:	e7c7      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004640:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	b123      	cbz	r3, 8004652 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004648:	f10d 0106 	add.w	r1, sp, #6
 800464c:	7c00      	ldrb	r0, [r0, #16]
 800464e:	4798      	blx	r3
  if (err != 0U)
 8004650:	e7ac      	b.n	80045ac <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8004652:	4629      	mov	r1, r5
 8004654:	f7ff ff75 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 8004658:	e7ba      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800465a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	b123      	cbz	r3, 800466c <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004662:	f10d 0106 	add.w	r1, sp, #6
 8004666:	7c00      	ldrb	r0, [r0, #16]
 8004668:	4798      	blx	r3
  if (err != 0U)
 800466a:	e79f      	b.n	80045ac <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800466c:	4629      	mov	r1, r5
 800466e:	f7ff ff68 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 8004672:	e7ad      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004674:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	b123      	cbz	r3, 8004686 <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800467c:	f10d 0106 	add.w	r1, sp, #6
 8004680:	7c00      	ldrb	r0, [r0, #16]
 8004682:	4798      	blx	r3
  if (err != 0U)
 8004684:	e792      	b.n	80045ac <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8004686:	4629      	mov	r1, r5
 8004688:	f7ff ff5b 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 800468c:	e7a0      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800468e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	b123      	cbz	r3, 80046a0 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004696:	f10d 0106 	add.w	r1, sp, #6
 800469a:	7c00      	ldrb	r0, [r0, #16]
 800469c:	4798      	blx	r3
  if (err != 0U)
 800469e:	e785      	b.n	80045ac <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7ff ff4e 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 80046a6:	e793      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7ff ff4a 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 80046ae:	e78f      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046b0:	7c03      	ldrb	r3, [r0, #16]
 80046b2:	b933      	cbnz	r3, 80046c2 <USBD_GetDescriptor+0x16c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80046b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80046b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ba:	f10d 0006 	add.w	r0, sp, #6
 80046be:	4798      	blx	r3
  if (err != 0U)
 80046c0:	e774      	b.n	80045ac <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80046c2:	4629      	mov	r1, r5
 80046c4:	f7ff ff3d 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 80046c8:	e782      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046ca:	7c03      	ldrb	r3, [r0, #16]
 80046cc:	b943      	cbnz	r3, 80046e0 <USBD_GetDescriptor+0x18a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80046ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	f10d 0006 	add.w	r0, sp, #6
 80046d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80046da:	2307      	movs	r3, #7
 80046dc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80046de:	e765      	b.n	80045ac <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80046e0:	4629      	mov	r1, r5
 80046e2:	f7ff ff2e 	bl	8004542 <USBD_CtlError>
  if (err != 0U)
 80046e6:	e773      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7ff ff2a 	bl	8004542 <USBD_CtlError>
    return;
 80046ee:	e76f      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80046f0:	4629      	mov	r1, r5
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff ff25 	bl	8004542 <USBD_CtlError>
 80046f8:	e76a      	b.n	80045d0 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 fac9 	bl	8004c92 <USBD_CtlSendStatus>
 8004700:	e766      	b.n	80045d0 <USBD_GetDescriptor+0x7a>

08004702 <USBD_SetAddress>:
{
 8004702:	b538      	push	{r3, r4, r5, lr}
 8004704:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004706:	888b      	ldrh	r3, [r1, #4]
 8004708:	b9fb      	cbnz	r3, 800474a <USBD_SetAddress+0x48>
 800470a:	88cb      	ldrh	r3, [r1, #6]
 800470c:	b9eb      	cbnz	r3, 800474a <USBD_SetAddress+0x48>
 800470e:	884b      	ldrh	r3, [r1, #2]
 8004710:	2b7f      	cmp	r3, #127	@ 0x7f
 8004712:	d81a      	bhi.n	800474a <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004714:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004718:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b03      	cmp	r3, #3
 8004720:	d00c      	beq.n	800473c <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8004722:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004726:	4629      	mov	r1, r5
 8004728:	f000 fd14 	bl	8005154 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800472c:	4620      	mov	r0, r4
 800472e:	f000 fab0 	bl	8004c92 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004732:	b135      	cbz	r5, 8004742 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004734:	2302      	movs	r3, #2
 8004736:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800473a:	e009      	b.n	8004750 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800473c:	f7ff ff01 	bl	8004542 <USBD_CtlError>
 8004740:	e006      	b.n	8004750 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004742:	2301      	movs	r3, #1
 8004744:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004748:	e002      	b.n	8004750 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800474a:	4620      	mov	r0, r4
 800474c:	f7ff fef9 	bl	8004542 <USBD_CtlError>
}
 8004750:	bd38      	pop	{r3, r4, r5, pc}
	...

08004754 <USBD_SetConfig>:
{
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800475a:	788d      	ldrb	r5, [r1, #2]
 800475c:	4b2f      	ldr	r3, [pc, #188]	@ (800481c <USBD_SetConfig+0xc8>)
 800475e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004760:	2d01      	cmp	r5, #1
 8004762:	d810      	bhi.n	8004786 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8004764:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d00f      	beq.n	800478e <USBD_SetConfig+0x3a>
 800476e:	2b03      	cmp	r3, #3
 8004770:	d026      	beq.n	80047c0 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8004772:	f7ff fee6 	bl	8004542 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004776:	4b29      	ldr	r3, [pc, #164]	@ (800481c <USBD_SetConfig+0xc8>)
 8004778:	7819      	ldrb	r1, [r3, #0]
 800477a:	4620      	mov	r0, r4
 800477c:	f7ff fcf4 	bl	8004168 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004780:	2503      	movs	r5, #3
}
 8004782:	4628      	mov	r0, r5
 8004784:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8004786:	f7ff fedc 	bl	8004542 <USBD_CtlError>
    return USBD_FAIL;
 800478a:	2503      	movs	r5, #3
 800478c:	e7f9      	b.n	8004782 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800478e:	b1a5      	cbz	r5, 80047ba <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8004790:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004792:	4629      	mov	r1, r5
 8004794:	f7ff fcdf 	bl	8004156 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004798:	4605      	mov	r5, r0
 800479a:	b138      	cbz	r0, 80047ac <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800479c:	4631      	mov	r1, r6
 800479e:	4620      	mov	r0, r4
 80047a0:	f7ff fecf 	bl	8004542 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80047a4:	2302      	movs	r3, #2
 80047a6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80047aa:	e7ea      	b.n	8004782 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 fa70 	bl	8004c92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80047b2:	2303      	movs	r3, #3
 80047b4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80047b8:	e7e3      	b.n	8004782 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80047ba:	f000 fa6a 	bl	8004c92 <USBD_CtlSendStatus>
 80047be:	e7e0      	b.n	8004782 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80047c0:	b1cd      	cbz	r5, 80047f6 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80047c2:	6841      	ldr	r1, [r0, #4]
 80047c4:	428d      	cmp	r5, r1
 80047c6:	d025      	beq.n	8004814 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80047c8:	b2c9      	uxtb	r1, r1
 80047ca:	f7ff fccd 	bl	8004168 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80047ce:	4b13      	ldr	r3, [pc, #76]	@ (800481c <USBD_SetConfig+0xc8>)
 80047d0:	7819      	ldrb	r1, [r3, #0]
 80047d2:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7ff fcbe 	bl	8004156 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80047da:	4605      	mov	r5, r0
 80047dc:	b1b0      	cbz	r0, 800480c <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 80047de:	4631      	mov	r1, r6
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff feae 	bl	8004542 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80047e6:	7921      	ldrb	r1, [r4, #4]
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7ff fcbd 	bl	8004168 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80047ee:	2302      	movs	r3, #2
 80047f0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80047f4:	e7c5      	b.n	8004782 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80047f6:	2302      	movs	r3, #2
 80047f8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80047fc:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80047fe:	4629      	mov	r1, r5
 8004800:	f7ff fcb2 	bl	8004168 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004804:	4620      	mov	r0, r4
 8004806:	f000 fa44 	bl	8004c92 <USBD_CtlSendStatus>
 800480a:	e7ba      	b.n	8004782 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800480c:	4620      	mov	r0, r4
 800480e:	f000 fa40 	bl	8004c92 <USBD_CtlSendStatus>
 8004812:	e7b6      	b.n	8004782 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004814:	f000 fa3d 	bl	8004c92 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004818:	2500      	movs	r5, #0
 800481a:	e7b2      	b.n	8004782 <USBD_SetConfig+0x2e>
 800481c:	2004026c 	.word	0x2004026c

08004820 <USBD_GetConfig>:
{
 8004820:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004822:	88cb      	ldrh	r3, [r1, #6]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10b      	bne.n	8004840 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004828:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d909      	bls.n	8004846 <USBD_GetConfig+0x26>
 8004832:	2b03      	cmp	r3, #3
 8004834:	d109      	bne.n	800484a <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004836:	2201      	movs	r2, #1
 8004838:	1d01      	adds	r1, r0, #4
 800483a:	f000 fa0d 	bl	8004c58 <USBD_CtlSendData>
        break;
 800483e:	e001      	b.n	8004844 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004840:	f7ff fe7f 	bl	8004542 <USBD_CtlError>
}
 8004844:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8004846:	b25b      	sxtb	r3, r3
 8004848:	b913      	cbnz	r3, 8004850 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800484a:	f7ff fe7a 	bl	8004542 <USBD_CtlError>
}
 800484e:	e7f9      	b.n	8004844 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8004850:	4601      	mov	r1, r0
 8004852:	2300      	movs	r3, #0
 8004854:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004858:	2201      	movs	r2, #1
 800485a:	f000 f9fd 	bl	8004c58 <USBD_CtlSendData>
        break;
 800485e:	e7f1      	b.n	8004844 <USBD_GetConfig+0x24>

08004860 <USBD_GetStatus>:
{
 8004860:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004862:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004866:	3b01      	subs	r3, #1
 8004868:	2b02      	cmp	r3, #2
 800486a:	d812      	bhi.n	8004892 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800486c:	88cb      	ldrh	r3, [r1, #6]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d10c      	bne.n	800488c <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004872:	2301      	movs	r3, #1
 8004874:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8004876:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800487a:	b10b      	cbz	r3, 8004880 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800487c:	2303      	movs	r3, #3
 800487e:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004880:	2202      	movs	r2, #2
 8004882:	f100 010c 	add.w	r1, r0, #12
 8004886:	f000 f9e7 	bl	8004c58 <USBD_CtlSendData>
}
 800488a:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800488c:	f7ff fe59 	bl	8004542 <USBD_CtlError>
        break;
 8004890:	e7fb      	b.n	800488a <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004892:	f7ff fe56 	bl	8004542 <USBD_CtlError>
}
 8004896:	e7f8      	b.n	800488a <USBD_GetStatus+0x2a>

08004898 <USBD_SetFeature>:
{
 8004898:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800489a:	884b      	ldrh	r3, [r1, #2]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d004      	beq.n	80048aa <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d007      	beq.n	80048b4 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80048a4:	f7ff fe4d 	bl	8004542 <USBD_CtlError>
}
 80048a8:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80048aa:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80048ae:	f000 f9f0 	bl	8004c92 <USBD_CtlSendStatus>
 80048b2:	e7f9      	b.n	80048a8 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80048b4:	888b      	ldrh	r3, [r1, #4]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80048bc:	f000 f9e9 	bl	8004c92 <USBD_CtlSendStatus>
 80048c0:	e7f2      	b.n	80048a8 <USBD_SetFeature+0x10>

080048c2 <USBD_ClrFeature>:
{
 80048c2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80048c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80048c8:	3b01      	subs	r3, #1
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d809      	bhi.n	80048e2 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048ce:	884b      	ldrh	r3, [r1, #2]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d000      	beq.n	80048d6 <USBD_ClrFeature+0x14>
}
 80048d4:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80048dc:	f000 f9d9 	bl	8004c92 <USBD_CtlSendStatus>
 80048e0:	e7f8      	b.n	80048d4 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80048e2:	f7ff fe2e 	bl	8004542 <USBD_CtlError>
}
 80048e6:	e7f5      	b.n	80048d4 <USBD_ClrFeature+0x12>

080048e8 <USBD_StdDevReq>:
{
 80048e8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048ea:	780c      	ldrb	r4, [r1, #0]
 80048ec:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80048f0:	2c20      	cmp	r4, #32
 80048f2:	d006      	beq.n	8004902 <USBD_StdDevReq+0x1a>
 80048f4:	2c40      	cmp	r4, #64	@ 0x40
 80048f6:	d004      	beq.n	8004902 <USBD_StdDevReq+0x1a>
 80048f8:	b16c      	cbz	r4, 8004916 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 80048fa:	f7ff fe22 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80048fe:	2400      	movs	r4, #0
      break;
 8004900:	e007      	b.n	8004912 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004902:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004906:	33ae      	adds	r3, #174	@ 0xae
 8004908:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4798      	blx	r3
 8004910:	4604      	mov	r4, r0
}
 8004912:	4620      	mov	r0, r4
 8004914:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8004916:	784d      	ldrb	r5, [r1, #1]
 8004918:	2d09      	cmp	r5, #9
 800491a:	d81d      	bhi.n	8004958 <USBD_StdDevReq+0x70>
 800491c:	e8df f005 	tbb	[pc, r5]
 8004920:	161c1912 	.word	0x161c1912
 8004924:	1c05081c 	.word	0x1c05081c
 8004928:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800492a:	f7ff fe14 	bl	8004556 <USBD_GetDescriptor>
          break;
 800492e:	e7f0      	b.n	8004912 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8004930:	f7ff fee7 	bl	8004702 <USBD_SetAddress>
          break;
 8004934:	e7ed      	b.n	8004912 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8004936:	f7ff ff0d 	bl	8004754 <USBD_SetConfig>
 800493a:	4604      	mov	r4, r0
          break;
 800493c:	e7e9      	b.n	8004912 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800493e:	f7ff ff6f 	bl	8004820 <USBD_GetConfig>
          break;
 8004942:	e7e6      	b.n	8004912 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8004944:	f7ff ff8c 	bl	8004860 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004948:	462c      	mov	r4, r5
          break;
 800494a:	e7e2      	b.n	8004912 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800494c:	f7ff ffa4 	bl	8004898 <USBD_SetFeature>
          break;
 8004950:	e7df      	b.n	8004912 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8004952:	f7ff ffb6 	bl	80048c2 <USBD_ClrFeature>
          break;
 8004956:	e7dc      	b.n	8004912 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004958:	f7ff fdf3 	bl	8004542 <USBD_CtlError>
          break;
 800495c:	e7d9      	b.n	8004912 <USBD_StdDevReq+0x2a>

0800495e <USBD_StdItfReq>:
{
 800495e:	b570      	push	{r4, r5, r6, lr}
 8004960:	4605      	mov	r5, r0
 8004962:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004964:	780b      	ldrb	r3, [r1, #0]
 8004966:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800496a:	2b20      	cmp	r3, #32
 800496c:	d007      	beq.n	800497e <USBD_StdItfReq+0x20>
 800496e:	2b40      	cmp	r3, #64	@ 0x40
 8004970:	d005      	beq.n	800497e <USBD_StdItfReq+0x20>
 8004972:	b123      	cbz	r3, 800497e <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004974:	f7ff fde5 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004978:	2600      	movs	r6, #0
}
 800497a:	4630      	mov	r0, r6
 800497c:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800497e:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8004982:	3b01      	subs	r3, #1
 8004984:	2b02      	cmp	r3, #2
 8004986:	d826      	bhi.n	80049d6 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004988:	7921      	ldrb	r1, [r4, #4]
 800498a:	2901      	cmp	r1, #1
 800498c:	d905      	bls.n	800499a <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800498e:	4621      	mov	r1, r4
 8004990:	4628      	mov	r0, r5
 8004992:	f7ff fdd6 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004996:	2600      	movs	r6, #0
 8004998:	e7ef      	b.n	800497a <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fcbb 	bl	8004316 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80049a0:	b968      	cbnz	r0, 80049be <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80049a2:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80049a6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80049aa:	6891      	ldr	r1, [r2, #8]
 80049ac:	b189      	cbz	r1, 80049d2 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80049ae:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80049b2:	6893      	ldr	r3, [r2, #8]
 80049b4:	4621      	mov	r1, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	4798      	blx	r3
 80049ba:	4606      	mov	r6, r0
 80049bc:	e000      	b.n	80049c0 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80049be:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80049c0:	88e3      	ldrh	r3, [r4, #6]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <USBD_StdItfReq+0x1c>
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	d1d7      	bne.n	800497a <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80049ca:	4628      	mov	r0, r5
 80049cc:	f000 f961 	bl	8004c92 <USBD_CtlSendStatus>
 80049d0:	e7d3      	b.n	800497a <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80049d2:	2603      	movs	r6, #3
 80049d4:	e7f4      	b.n	80049c0 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80049d6:	4621      	mov	r1, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	f7ff fdb2 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049de:	2600      	movs	r6, #0
          break;
 80049e0:	e7cb      	b.n	800497a <USBD_StdItfReq+0x1c>

080049e2 <USBD_StdEPReq>:
{
 80049e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e6:	4606      	mov	r6, r0
 80049e8:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80049ea:	888b      	ldrh	r3, [r1, #4]
 80049ec:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049ee:	780c      	ldrb	r4, [r1, #0]
 80049f0:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 80049f4:	2c20      	cmp	r4, #32
 80049f6:	d008      	beq.n	8004a0a <USBD_StdEPReq+0x28>
 80049f8:	2c40      	cmp	r4, #64	@ 0x40
 80049fa:	d006      	beq.n	8004a0a <USBD_StdEPReq+0x28>
 80049fc:	b1dc      	cbz	r4, 8004a36 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 80049fe:	f7ff fda0 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a02:	2400      	movs	r4, #0
}
 8004a04:	4620      	mov	r0, r4
 8004a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f7ff fc84 	bl	800431a <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a12:	4604      	mov	r4, r0
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 80f8 	bne.w	8004c0a <USBD_StdEPReq+0x228>
        pdev->classId = idx;
 8004a1a:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8004a1e:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004a22:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0eb      	beq.n	8004a04 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4630      	mov	r0, r6
 8004a30:	4798      	blx	r3
 8004a32:	4604      	mov	r4, r0
 8004a34:	e7e6      	b.n	8004a04 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8004a36:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004a3a:	f1b8 0f01 	cmp.w	r8, #1
 8004a3e:	d031      	beq.n	8004aa4 <USBD_StdEPReq+0xc2>
 8004a40:	f1b8 0f03 	cmp.w	r8, #3
 8004a44:	d005      	beq.n	8004a52 <USBD_StdEPReq+0x70>
 8004a46:	f1b8 0f00 	cmp.w	r8, #0
 8004a4a:	d067      	beq.n	8004b1c <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8004a4c:	f7ff fd79 	bl	8004542 <USBD_CtlError>
          break;
 8004a50:	e7d8      	b.n	8004a04 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8004a52:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d004      	beq.n	8004a66 <USBD_StdEPReq+0x84>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d012      	beq.n	8004a86 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8004a60:	f7ff fd6f 	bl	8004542 <USBD_CtlError>
              break;
 8004a64:	e7ce      	b.n	8004a04 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a66:	b10f      	cbz	r7, 8004a6c <USBD_StdEPReq+0x8a>
 8004a68:	2f80      	cmp	r7, #128	@ 0x80
 8004a6a:	d104      	bne.n	8004a76 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f7ff fd67 	bl	8004542 <USBD_CtlError>
 8004a74:	e7c6      	b.n	8004a04 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a76:	4639      	mov	r1, r7
 8004a78:	f000 fb38 	bl	80050ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a7c:	2180      	movs	r1, #128	@ 0x80
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f000 fb34 	bl	80050ec <USBD_LL_StallEP>
 8004a84:	e7be      	b.n	8004a04 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a86:	884b      	ldrh	r3, [r1, #2]
 8004a88:	b923      	cbnz	r3, 8004a94 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a8a:	b11f      	cbz	r7, 8004a94 <USBD_StdEPReq+0xb2>
 8004a8c:	2f80      	cmp	r7, #128	@ 0x80
 8004a8e:	d001      	beq.n	8004a94 <USBD_StdEPReq+0xb2>
 8004a90:	88cb      	ldrh	r3, [r1, #6]
 8004a92:	b11b      	cbz	r3, 8004a9c <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8004a94:	4630      	mov	r0, r6
 8004a96:	f000 f8fc 	bl	8004c92 <USBD_CtlSendStatus>
              break;
 8004a9a:	e7b3      	b.n	8004a04 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	f000 fb25 	bl	80050ec <USBD_LL_StallEP>
 8004aa2:	e7f7      	b.n	8004a94 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8004aa4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d004      	beq.n	8004ab8 <USBD_StdEPReq+0xd6>
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d012      	beq.n	8004ad8 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8004ab2:	f7ff fd46 	bl	8004542 <USBD_CtlError>
              break;
 8004ab6:	e7a5      	b.n	8004a04 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ab8:	b10f      	cbz	r7, 8004abe <USBD_StdEPReq+0xdc>
 8004aba:	2f80      	cmp	r7, #128	@ 0x80
 8004abc:	d104      	bne.n	8004ac8 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004abe:	4629      	mov	r1, r5
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff fd3e 	bl	8004542 <USBD_CtlError>
 8004ac6:	e79d      	b.n	8004a04 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f000 fb0f 	bl	80050ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ace:	2180      	movs	r1, #128	@ 0x80
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 fb0b 	bl	80050ec <USBD_LL_StallEP>
 8004ad6:	e795      	b.n	8004a04 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ad8:	884b      	ldrh	r3, [r1, #2]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d192      	bne.n	8004a04 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004ade:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8004ae2:	d117      	bne.n	8004b14 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f000 f8d4 	bl	8004c92 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004aea:	4639      	mov	r1, r7
 8004aec:	4630      	mov	r0, r6
 8004aee:	f7ff fc14 	bl	800431a <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d186      	bne.n	8004a04 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8004af6:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004afa:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004afe:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004b02:	6892      	ldr	r2, [r2, #8]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	f000 8082 	beq.w	8004c0e <USBD_StdEPReq+0x22c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	4790      	blx	r2
 8004b10:	4604      	mov	r4, r0
 8004b12:	e777      	b.n	8004a04 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b14:	4639      	mov	r1, r7
 8004b16:	f000 faf8 	bl	800510a <USBD_LL_ClearStallEP>
 8004b1a:	e7e3      	b.n	8004ae4 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8004b1c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	2a02      	cmp	r2, #2
 8004b24:	d005      	beq.n	8004b32 <USBD_StdEPReq+0x150>
 8004b26:	2a03      	cmp	r2, #3
 8004b28:	d027      	beq.n	8004b7a <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8004b2a:	f7ff fd0a 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b2e:	4644      	mov	r4, r8
              break;
 8004b30:	e768      	b.n	8004a04 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b32:	b10f      	cbz	r7, 8004b38 <USBD_StdEPReq+0x156>
 8004b34:	2f80      	cmp	r7, #128	@ 0x80
 8004b36:	d113      	bne.n	8004b60 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b3c:	d114      	bne.n	8004b68 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004b3e:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b42:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004b46:	00b9      	lsls	r1, r7, #2
 8004b48:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004b4c:	4431      	add	r1, r6
 8004b4e:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004b54:	2202      	movs	r2, #2
 8004b56:	4630      	mov	r0, r6
 8004b58:	f000 f87e 	bl	8004c58 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b5c:	4644      	mov	r4, r8
              break;
 8004b5e:	e751      	b.n	8004a04 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8004b60:	f7ff fcef 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b64:	4644      	mov	r4, r8
                break;
 8004b66:	e74d      	b.n	8004a04 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b68:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8004b6c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004b70:	00b9      	lsls	r1, r7, #2
 8004b72:	3110      	adds	r1, #16
 8004b74:	4431      	add	r1, r6
 8004b76:	3104      	adds	r1, #4
 8004b78:	e7ea      	b.n	8004b50 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db1f      	blt.n	8004bc0 <USBD_StdEPReq+0x1de>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b80:	f007 020f 	and.w	r2, r7, #15
 8004b84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b8c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8004b90:	b31a      	cbz	r2, 8004bda <USBD_StdEPReq+0x1f8>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db25      	blt.n	8004be2 <USBD_StdEPReq+0x200>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004b96:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b9e:	009c      	lsls	r4, r3, #2
 8004ba0:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004ba4:	4434      	add	r4, r6
 8004ba6:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ba8:	b10f      	cbz	r7, 8004bae <USBD_StdEPReq+0x1cc>
 8004baa:	2f80      	cmp	r7, #128	@ 0x80
 8004bac:	d122      	bne.n	8004bf4 <USBD_StdEPReq+0x212>
                pep->status = 0x0000U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f000 f84e 	bl	8004c58 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bbc:	4644      	mov	r4, r8
              break;
 8004bbe:	e721      	b.n	8004a04 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bc0:	f007 020f 	and.w	r2, r7, #15
 8004bc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004bc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004bcc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	d1df      	bne.n	8004b92 <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8004bd2:	f7ff fcb6 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bd6:	4644      	mov	r4, r8
                  break;
 8004bd8:	e714      	b.n	8004a04 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004bda:	f7ff fcb2 	bl	8004542 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bde:	4644      	mov	r4, r8
                  break;
 8004be0:	e710      	b.n	8004a04 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004be2:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004be6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004bea:	009c      	lsls	r4, r3, #2
 8004bec:	3410      	adds	r4, #16
 8004bee:	4434      	add	r4, r6
 8004bf0:	3404      	adds	r4, #4
 8004bf2:	e7d9      	b.n	8004ba8 <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004bf4:	4639      	mov	r1, r7
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 fa96 	bl	8005128 <USBD_LL_IsStallEP>
 8004bfc:	b110      	cbz	r0, 8004c04 <USBD_StdEPReq+0x222>
                pep->status = 0x0001U;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	e7d6      	b.n	8004bb2 <USBD_StdEPReq+0x1d0>
                pep->status = 0x0000U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	e7d3      	b.n	8004bb2 <USBD_StdEPReq+0x1d0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0a:	2400      	movs	r4, #0
 8004c0c:	e6fa      	b.n	8004a04 <USBD_StdEPReq+0x22>
 8004c0e:	4604      	mov	r4, r0
 8004c10:	e6f8      	b.n	8004a04 <USBD_StdEPReq+0x22>

08004c12 <USBD_GetString>:
  if (desc == NULL)
 8004c12:	b300      	cbz	r0, 8004c56 <USBD_GetString+0x44>
{
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	460d      	mov	r5, r1
 8004c18:	4616      	mov	r6, r2
 8004c1a:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004c1c:	f7ff fc73 	bl	8004506 <USBD_GetLen>
 8004c20:	3001      	adds	r0, #1
 8004c22:	0043      	lsls	r3, r0, #1
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c28:	d806      	bhi.n	8004c38 <USBD_GetString+0x26>
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004c2e:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004c30:	2303      	movs	r3, #3
 8004c32:	706b      	strb	r3, [r5, #1]
  idx++;
 8004c34:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004c36:	e00a      	b.n	8004c4e <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004c38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c3c:	e7f6      	b.n	8004c2c <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8004c3e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004c40:	3401      	adds	r4, #1
    idx++;
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004c46:	2100      	movs	r1, #0
 8004c48:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004c4e:	7822      	ldrb	r2, [r4, #0]
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d1f4      	bne.n	8004c3e <USBD_GetString+0x2c>
}
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	4770      	bx	lr

08004c58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004c58:	b508      	push	{r3, lr}
 8004c5a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004c62:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004c64:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004c66:	460a      	mov	r2, r1
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f000 fa82 	bl	8005172 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004c6e:	2000      	movs	r0, #0
 8004c70:	bd08      	pop	{r3, pc}

08004c72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004c72:	b508      	push	{r3, lr}
 8004c74:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004c76:	460a      	mov	r2, r1
 8004c78:	2100      	movs	r1, #0
 8004c7a:	f000 fa7a 	bl	8005172 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004c7e:	2000      	movs	r0, #0
 8004c80:	bd08      	pop	{r3, pc}

08004c82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004c82:	b508      	push	{r3, lr}
 8004c84:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004c86:	460a      	mov	r2, r1
 8004c88:	2100      	movs	r1, #0
 8004c8a:	f000 fa81 	bl	8005190 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004c8e:	2000      	movs	r0, #0
 8004c90:	bd08      	pop	{r3, pc}

08004c92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004c92:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004c94:	2204      	movs	r2, #4
 8004c96:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f000 fa67 	bl	8005172 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	bd08      	pop	{r3, pc}

08004ca8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004ca8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004caa:	2205      	movs	r2, #5
 8004cac:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f000 fa6b 	bl	8005190 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004cba:	2000      	movs	r0, #0
 8004cbc:	bd08      	pop	{r3, pc}
	...

08004cc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	490b      	ldr	r1, [pc, #44]	@ (8004cf4 <MX_USB_DEVICE_Init+0x34>)
 8004cc6:	480c      	ldr	r0, [pc, #48]	@ (8004cf8 <MX_USB_DEVICE_Init+0x38>)
 8004cc8:	f7ff fa10 	bl	80040ec <USBD_Init>
 8004ccc:	b948      	cbnz	r0, 8004ce2 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004cce:	490b      	ldr	r1, [pc, #44]	@ (8004cfc <MX_USB_DEVICE_Init+0x3c>)
 8004cd0:	4809      	ldr	r0, [pc, #36]	@ (8004cf8 <MX_USB_DEVICE_Init+0x38>)
 8004cd2:	f7ff fa22 	bl	800411a <USBD_RegisterClass>
 8004cd6:	b938      	cbnz	r0, 8004ce8 <MX_USB_DEVICE_Init+0x28>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004cd8:	4807      	ldr	r0, [pc, #28]	@ (8004cf8 <MX_USB_DEVICE_Init+0x38>)
 8004cda:	f7ff fa38 	bl	800414e <USBD_Start>
 8004cde:	b930      	cbnz	r0, 8004cee <MX_USB_DEVICE_Init+0x2e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ce0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004ce2:	f7fb fc83 	bl	80005ec <Error_Handler>
 8004ce6:	e7f2      	b.n	8004cce <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004ce8:	f7fb fc80 	bl	80005ec <Error_Handler>
 8004cec:	e7f4      	b.n	8004cd8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004cee:	f7fb fc7d 	bl	80005ec <Error_Handler>
}
 8004cf2:	e7f5      	b.n	8004ce0 <MX_USB_DEVICE_Init+0x20>
 8004cf4:	200400f4 	.word	0x200400f4
 8004cf8:	20040270 	.word	0x20040270
 8004cfc:	2004007c 	.word	0x2004007c

08004d00 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004d00:	2312      	movs	r3, #18
 8004d02:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004d04:	4800      	ldr	r0, [pc, #0]	@ (8004d08 <USBD_FS_DeviceDescriptor+0x8>)
 8004d06:	4770      	bx	lr
 8004d08:	200400e0 	.word	0x200400e0

08004d0c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004d10:	4800      	ldr	r0, [pc, #0]	@ (8004d14 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004d12:	4770      	bx	lr
 8004d14:	200400d0 	.word	0x200400d0

08004d18 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8004d18:	230c      	movs	r3, #12
 8004d1a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8004d1c:	4800      	ldr	r0, [pc, #0]	@ (8004d20 <USBD_FS_USR_BOSDescriptor+0x8>)
 8004d1e:	4770      	bx	lr
 8004d20:	200400d4 	.word	0x200400d4

08004d24 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d21e      	bcs.n	8004d68 <IntToUnicode+0x44>
{
 8004d2a:	b500      	push	{lr}
 8004d2c:	e010      	b.n	8004d50 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004d2e:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8004d32:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004d36:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004d38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004d3c:	f10c 0c01 	add.w	ip, ip, #1
 8004d40:	f04f 0e00 	mov.w	lr, #0
 8004d44:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004d48:	3301      	adds	r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d209      	bcs.n	8004d64 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004d50:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004d54:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004d58:	d2e9      	bcs.n	8004d2e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004d5a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8004d5e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8004d62:	e7e8      	b.n	8004d36 <IntToUnicode+0x12>
  }
}
 8004d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <Get_SerialNum>:
{
 8004d6c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <Get_SerialNum+0x30>)
 8004d70:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004d74:	f8d3 4594 	ldr.w	r4, [r3, #1428]	@ 0x594
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004d78:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
  if (deviceserial0 != 0)
 8004d7c:	18c0      	adds	r0, r0, r3
 8004d7e:	d100      	bne.n	8004d82 <Get_SerialNum+0x16>
}
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004d82:	4d07      	ldr	r5, [pc, #28]	@ (8004da0 <Get_SerialNum+0x34>)
 8004d84:	2208      	movs	r2, #8
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7ff ffcc 	bl	8004d24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f105 0110 	add.w	r1, r5, #16
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7ff ffc6 	bl	8004d24 <IntToUnicode>
}
 8004d98:	e7f2      	b.n	8004d80 <Get_SerialNum+0x14>
 8004d9a:	bf00      	nop
 8004d9c:	1fff7000 	.word	0x1fff7000
 8004da0:	200400b6 	.word	0x200400b6

08004da4 <USBD_FS_SerialStrDescriptor>:
{
 8004da4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004da6:	231a      	movs	r3, #26
 8004da8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004daa:	f7ff ffdf 	bl	8004d6c <Get_SerialNum>
}
 8004dae:	4801      	ldr	r0, [pc, #4]	@ (8004db4 <USBD_FS_SerialStrDescriptor+0x10>)
 8004db0:	bd08      	pop	{r3, pc}
 8004db2:	bf00      	nop
 8004db4:	200400b4 	.word	0x200400b4

08004db8 <USBD_FS_ProductStrDescriptor>:
{
 8004db8:	b508      	push	{r3, lr}
 8004dba:	460a      	mov	r2, r1
  if(speed == 0)
 8004dbc:	b928      	cbnz	r0, 8004dca <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004dbe:	4905      	ldr	r1, [pc, #20]	@ (8004dd4 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004dc0:	4805      	ldr	r0, [pc, #20]	@ (8004dd8 <USBD_FS_ProductStrDescriptor+0x20>)
 8004dc2:	f7ff ff26 	bl	8004c12 <USBD_GetString>
}
 8004dc6:	4803      	ldr	r0, [pc, #12]	@ (8004dd4 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004dc8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004dca:	4902      	ldr	r1, [pc, #8]	@ (8004dd4 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004dcc:	4802      	ldr	r0, [pc, #8]	@ (8004dd8 <USBD_FS_ProductStrDescriptor+0x20>)
 8004dce:	f7ff ff20 	bl	8004c12 <USBD_GetString>
 8004dd2:	e7f8      	b.n	8004dc6 <USBD_FS_ProductStrDescriptor+0xe>
 8004dd4:	2004054c 	.word	0x2004054c
 8004dd8:	08005300 	.word	0x08005300

08004ddc <USBD_FS_ManufacturerStrDescriptor>:
{
 8004ddc:	b510      	push	{r4, lr}
 8004dde:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004de0:	4c03      	ldr	r4, [pc, #12]	@ (8004df0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004de2:	4621      	mov	r1, r4
 8004de4:	4803      	ldr	r0, [pc, #12]	@ (8004df4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004de6:	f7ff ff14 	bl	8004c12 <USBD_GetString>
}
 8004dea:	4620      	mov	r0, r4
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	bf00      	nop
 8004df0:	2004054c 	.word	0x2004054c
 8004df4:	08005318 	.word	0x08005318

08004df8 <USBD_FS_ConfigStrDescriptor>:
{
 8004df8:	b508      	push	{r3, lr}
 8004dfa:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004dfc:	b928      	cbnz	r0, 8004e0a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004dfe:	4905      	ldr	r1, [pc, #20]	@ (8004e14 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e00:	4805      	ldr	r0, [pc, #20]	@ (8004e18 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004e02:	f7ff ff06 	bl	8004c12 <USBD_GetString>
}
 8004e06:	4803      	ldr	r0, [pc, #12]	@ (8004e14 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e08:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004e0a:	4902      	ldr	r1, [pc, #8]	@ (8004e14 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e0c:	4802      	ldr	r0, [pc, #8]	@ (8004e18 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004e0e:	f7ff ff00 	bl	8004c12 <USBD_GetString>
 8004e12:	e7f8      	b.n	8004e06 <USBD_FS_ConfigStrDescriptor+0xe>
 8004e14:	2004054c 	.word	0x2004054c
 8004e18:	0800532c 	.word	0x0800532c

08004e1c <USBD_FS_InterfaceStrDescriptor>:
{
 8004e1c:	b508      	push	{r3, lr}
 8004e1e:	460a      	mov	r2, r1
  if(speed == 0)
 8004e20:	b928      	cbnz	r0, 8004e2e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004e22:	4905      	ldr	r1, [pc, #20]	@ (8004e38 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e24:	4805      	ldr	r0, [pc, #20]	@ (8004e3c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004e26:	f7ff fef4 	bl	8004c12 <USBD_GetString>
}
 8004e2a:	4803      	ldr	r0, [pc, #12]	@ (8004e38 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e2c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004e2e:	4902      	ldr	r1, [pc, #8]	@ (8004e38 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e30:	4802      	ldr	r0, [pc, #8]	@ (8004e3c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004e32:	f7ff feee 	bl	8004c12 <USBD_GetString>
 8004e36:	e7f8      	b.n	8004e2a <USBD_FS_InterfaceStrDescriptor+0xe>
 8004e38:	2004054c 	.word	0x2004054c
 8004e3c:	08005338 	.word	0x08005338

08004e40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8004e40:	b508      	push	{r3, lr}
  SystemClock_Config();
 8004e42:	f7fb fc39 	bl	80006b8 <SystemClock_Config>
}
 8004e46:	bd08      	pop	{r3, pc}

08004e48 <HAL_PCD_MspInit>:
{
 8004e48:	b530      	push	{r4, r5, lr}
 8004e4a:	b0af      	sub	sp, #188	@ 0xbc
 8004e4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4e:	2100      	movs	r1, #0
 8004e50:	9129      	str	r1, [sp, #164]	@ 0xa4
 8004e52:	912a      	str	r1, [sp, #168]	@ 0xa8
 8004e54:	912b      	str	r1, [sp, #172]	@ 0xac
 8004e56:	912c      	str	r1, [sp, #176]	@ 0xb0
 8004e58:	912d      	str	r1, [sp, #180]	@ 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e5a:	2294      	movs	r2, #148	@ 0x94
 8004e5c:	a804      	add	r0, sp, #16
 8004e5e:	f000 f9de 	bl	800521e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e68:	d001      	beq.n	8004e6e <HAL_PCD_MspInit+0x26>
}
 8004e6a:	b02f      	add	sp, #188	@ 0xbc
 8004e6c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004e6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e72:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e74:	a804      	add	r0, sp, #16
 8004e76:	f7fd fc97 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d148      	bne.n	8004f10 <HAL_PCD_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7e:	4c27      	ldr	r4, [pc, #156]	@ (8004f1c <HAL_PCD_MspInit+0xd4>)
 8004e80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004e88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004e92:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004e96:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2500      	movs	r5, #0
 8004e9e:	952b      	str	r5, [sp, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	932c      	str	r3, [sp, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004ea4:	230a      	movs	r3, #10
 8004ea6:	932d      	str	r3, [sp, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea8:	a929      	add	r1, sp, #164	@ 0xa4
 8004eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004eae:	f7fb fe5f 	bl	8000b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eb6:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004eb8:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	952b      	str	r5, [sp, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004ebc:	a929      	add	r1, sp, #164	@ 0xa4
 8004ebe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ec2:	f7fb fe55 	bl	8000b70 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004ec6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ecc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004ece:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ed4:	9302      	str	r3, [sp, #8]
 8004ed6:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eda:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004ede:	d11a      	bne.n	8004f16 <HAL_PCD_MspInit+0xce>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004ee8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 8004ef2:	f7fc fd99 	bl	8001a28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004efe:	2200      	movs	r2, #0
 8004f00:	4611      	mov	r1, r2
 8004f02:	2043      	movs	r0, #67	@ 0x43
 8004f04:	f7fb fe0c 	bl	8000b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004f08:	2043      	movs	r0, #67	@ 0x43
 8004f0a:	f7fb fe19 	bl	8000b40 <HAL_NVIC_EnableIRQ>
}
 8004f0e:	e7ac      	b.n	8004e6a <HAL_PCD_MspInit+0x22>
      Error_Handler();
 8004f10:	f7fb fb6c 	bl	80005ec <Error_Handler>
 8004f14:	e7b3      	b.n	8004e7e <HAL_PCD_MspInit+0x36>
      HAL_PWREx_EnableVddUSB();
 8004f16:	f7fc fd87 	bl	8001a28 <HAL_PWREx_EnableVddUSB>
 8004f1a:	e7f0      	b.n	8004efe <HAL_PCD_MspInit+0xb6>
 8004f1c:	40021000 	.word	0x40021000

08004f20 <HAL_PCD_SetupStageCallback>:
{
 8004f20:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004f22:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8004f26:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f2a:	f7ff f926 	bl	800417a <USBD_LL_SetupStage>
}
 8004f2e:	bd08      	pop	{r3, pc}

08004f30 <HAL_PCD_DataOutStageCallback>:
{
 8004f30:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004f32:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004f36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f3a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8004f3e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f42:	f7ff f9ec 	bl	800431e <USBD_LL_DataOutStage>
}
 8004f46:	bd08      	pop	{r3, pc}

08004f48 <HAL_PCD_DataInStageCallback>:
{
 8004f48:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004f4a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004f4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f58:	f7ff fa44 	bl	80043e4 <USBD_LL_DataInStage>
}
 8004f5c:	bd08      	pop	{r3, pc}

08004f5e <HAL_PCD_SOFCallback>:
{
 8004f5e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004f60:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f64:	f7ff f986 	bl	8004274 <USBD_LL_SOF>
}
 8004f68:	bd08      	pop	{r3, pc}

08004f6a <HAL_PCD_ResetCallback>:
{
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004f6e:	79c3      	ldrb	r3, [r0, #7]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d109      	bne.n	8004f88 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004f74:	2101      	movs	r1, #1
 8004f76:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004f7a:	f7ff f95c 	bl	8004236 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004f7e:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004f82:	f7ff f926 	bl	80041d2 <USBD_LL_Reset>
}
 8004f86:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004f88:	f7fb fb30 	bl	80005ec <Error_Handler>
 8004f8c:	e7f2      	b.n	8004f74 <HAL_PCD_ResetCallback+0xa>
	...

08004f90 <HAL_PCD_SuspendCallback>:
{
 8004f90:	b510      	push	{r4, lr}
 8004f92:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004f94:	6802      	ldr	r2, [r0, #0]
 8004f96:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004fa2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004fa6:	f7ff f949 	bl	800423c <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004faa:	7ae3      	ldrb	r3, [r4, #11]
 8004fac:	b123      	cbz	r3, 8004fb8 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004fae:	4a03      	ldr	r2, [pc, #12]	@ (8004fbc <HAL_PCD_SuspendCallback+0x2c>)
 8004fb0:	6913      	ldr	r3, [r2, #16]
 8004fb2:	f043 0306 	orr.w	r3, r3, #6
 8004fb6:	6113      	str	r3, [r2, #16]
}
 8004fb8:	bd10      	pop	{r4, pc}
 8004fba:	bf00      	nop
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <HAL_PCD_ResumeCallback>:
{
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4604      	mov	r4, r0
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8004fc4:	6802      	ldr	r2, [r0, #0]
 8004fc6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  if (hpcd->Init.low_power_enable)
 8004fd2:	7ac3      	ldrb	r3, [r0, #11]
 8004fd4:	b923      	cbnz	r3, 8004fe0 <HAL_PCD_ResumeCallback+0x20>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004fd6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004fda:	f7ff f93e 	bl	800425a <USBD_LL_Resume>
}
 8004fde:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004fe0:	4a03      	ldr	r2, [pc, #12]	@ (8004ff0 <HAL_PCD_ResumeCallback+0x30>)
 8004fe2:	6913      	ldr	r3, [r2, #16]
 8004fe4:	f023 0306 	bic.w	r3, r3, #6
 8004fe8:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8004fea:	f7ff ff29 	bl	8004e40 <SystemClockConfig_Resume>
 8004fee:	e7f2      	b.n	8004fd6 <HAL_PCD_ResumeCallback+0x16>
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <HAL_PCD_ISOOUTIncompleteCallback>:
{
 8004ff4:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004ff6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004ffa:	f7ff f963 	bl	80042c4 <USBD_LL_IsoOUTIncomplete>
}
 8004ffe:	bd08      	pop	{r3, pc}

08005000 <HAL_PCD_ISOINIncompleteCallback>:
{
 8005000:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005002:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005006:	f7ff f946 	bl	8004296 <USBD_LL_IsoINIncomplete>
}
 800500a:	bd08      	pop	{r3, pc}

0800500c <HAL_PCD_ConnectCallback>:
{
 800500c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800500e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005012:	f7ff f96e 	bl	80042f2 <USBD_LL_DevConnected>
}
 8005016:	bd08      	pop	{r3, pc}

08005018 <HAL_PCD_DisconnectCallback>:
{
 8005018:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800501a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800501e:	f7ff f96a 	bl	80042f6 <USBD_LL_DevDisconnected>
}
 8005022:	bd08      	pop	{r3, pc}

08005024 <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 8005024:	7802      	ldrb	r2, [r0, #0]
 8005026:	b10a      	cbz	r2, 800502c <USBD_LL_Init+0x8>
}
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
{
 800502c:	b510      	push	{r4, lr}
 800502e:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8005030:	4815      	ldr	r0, [pc, #84]	@ (8005088 <USBD_LL_Init+0x64>)
 8005032:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8005036:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800503a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800503e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005040:	2306      	movs	r3, #6
 8005042:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005044:	2302      	movs	r3, #2
 8005046:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005048:	7243      	strb	r3, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800504a:	2301      	movs	r3, #1
 800504c:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800504e:	72c2      	strb	r2, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005050:	7302      	strb	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8005052:	7343      	strb	r3, [r0, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005054:	73c2      	strb	r2, [r0, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005056:	7383      	strb	r3, [r0, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005058:	f7fb feec 	bl	8000e34 <HAL_PCD_Init>
 800505c:	b980      	cbnz	r0, 8005080 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800505e:	4c0a      	ldr	r4, [pc, #40]	@ (8005088 <USBD_LL_Init+0x64>)
 8005060:	2180      	movs	r1, #128	@ 0x80
 8005062:	4620      	mov	r0, r4
 8005064:	f7fc fc30 	bl	80018c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005068:	2240      	movs	r2, #64	@ 0x40
 800506a:	2100      	movs	r1, #0
 800506c:	4620      	mov	r0, r4
 800506e:	f7fc fc05 	bl	800187c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	2101      	movs	r1, #1
 8005076:	4620      	mov	r0, r4
 8005078:	f7fc fc00 	bl	800187c <HAL_PCDEx_SetTxFiFo>
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005080:	f7fb fab4 	bl	80005ec <Error_Handler>
 8005084:	e7eb      	b.n	800505e <USBD_LL_Init+0x3a>
 8005086:	bf00      	nop
 8005088:	20040760 	.word	0x20040760

0800508c <USBD_LL_Start>:
{
 800508c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800508e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005092:	f7fb ff52 	bl	8000f3a <HAL_PCD_Start>
  switch (hal_status) {
 8005096:	2803      	cmp	r0, #3
 8005098:	d805      	bhi.n	80050a6 <USBD_LL_Start+0x1a>
 800509a:	e8df f000 	tbb	[pc, r0]
 800509e:	0403      	.short	0x0403
 80050a0:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 80050a2:	2001      	movs	r0, #1
}
 80050a4:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 80050a6:	2003      	movs	r0, #3
 80050a8:	e7fc      	b.n	80050a4 <USBD_LL_Start+0x18>

080050aa <USBD_LL_OpenEP>:
{
 80050aa:	b508      	push	{r3, lr}
 80050ac:	4694      	mov	ip, r2
 80050ae:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80050b0:	4663      	mov	r3, ip
 80050b2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80050b6:	f7fb ffac 	bl	8001012 <HAL_PCD_EP_Open>
  switch (hal_status) {
 80050ba:	2803      	cmp	r0, #3
 80050bc:	d805      	bhi.n	80050ca <USBD_LL_OpenEP+0x20>
 80050be:	e8df f000 	tbb	[pc, r0]
 80050c2:	0403      	.short	0x0403
 80050c4:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 80050c6:	2001      	movs	r0, #1
}
 80050c8:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 80050ca:	2003      	movs	r0, #3
 80050cc:	e7fc      	b.n	80050c8 <USBD_LL_OpenEP+0x1e>

080050ce <USBD_LL_CloseEP>:
{
 80050ce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80050d0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80050d4:	f7fb ffe3 	bl	800109e <HAL_PCD_EP_Close>
  switch (hal_status) {
 80050d8:	2803      	cmp	r0, #3
 80050da:	d805      	bhi.n	80050e8 <USBD_LL_CloseEP+0x1a>
 80050dc:	e8df f000 	tbb	[pc, r0]
 80050e0:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 80050e4:	2001      	movs	r0, #1
}
 80050e6:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 80050e8:	2003      	movs	r0, #3
 80050ea:	e7fc      	b.n	80050e6 <USBD_LL_CloseEP+0x18>

080050ec <USBD_LL_StallEP>:
{
 80050ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80050ee:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80050f2:	f7fc f848 	bl	8001186 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 80050f6:	2803      	cmp	r0, #3
 80050f8:	d805      	bhi.n	8005106 <USBD_LL_StallEP+0x1a>
 80050fa:	e8df f000 	tbb	[pc, r0]
 80050fe:	0403      	.short	0x0403
 8005100:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8005102:	2001      	movs	r0, #1
}
 8005104:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8005106:	2003      	movs	r0, #3
 8005108:	e7fc      	b.n	8005104 <USBD_LL_StallEP+0x18>

0800510a <USBD_LL_ClearStallEP>:
{
 800510a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800510c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005110:	f7fc f87b 	bl	800120a <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8005114:	2803      	cmp	r0, #3
 8005116:	d805      	bhi.n	8005124 <USBD_LL_ClearStallEP+0x1a>
 8005118:	e8df f000 	tbb	[pc, r0]
 800511c:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8005120:	2001      	movs	r0, #1
}
 8005122:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8005124:	2003      	movs	r0, #3
 8005126:	e7fc      	b.n	8005122 <USBD_LL_ClearStallEP+0x18>

08005128 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005128:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 800512c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005130:	d108      	bne.n	8005144 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005132:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005136:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800513a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800513e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 8005142:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005144:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005148:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800514c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005150:	7d98      	ldrb	r0, [r3, #22]
 8005152:	4770      	bx	lr

08005154 <USBD_LL_SetUSBAddress>:
{
 8005154:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005156:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800515a:	f7fb ff47 	bl	8000fec <HAL_PCD_SetAddress>
  switch (hal_status) {
 800515e:	2803      	cmp	r0, #3
 8005160:	d805      	bhi.n	800516e <USBD_LL_SetUSBAddress+0x1a>
 8005162:	e8df f000 	tbb	[pc, r0]
 8005166:	0403      	.short	0x0403
 8005168:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 800516a:	2001      	movs	r0, #1
}
 800516c:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800516e:	2003      	movs	r0, #3
 8005170:	e7fc      	b.n	800516c <USBD_LL_SetUSBAddress+0x18>

08005172 <USBD_LL_Transmit>:
{
 8005172:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005174:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005178:	f7fb ffe7 	bl	800114a <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 800517c:	2803      	cmp	r0, #3
 800517e:	d805      	bhi.n	800518c <USBD_LL_Transmit+0x1a>
 8005180:	e8df f000 	tbb	[pc, r0]
 8005184:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8005188:	2001      	movs	r0, #1
}
 800518a:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 800518c:	2003      	movs	r0, #3
 800518e:	e7fc      	b.n	800518a <USBD_LL_Transmit+0x18>

08005190 <USBD_LL_PrepareReceive>:
{
 8005190:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005192:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005196:	f7fb ffba 	bl	800110e <HAL_PCD_EP_Receive>
  switch (hal_status) {
 800519a:	2803      	cmp	r0, #3
 800519c:	d805      	bhi.n	80051aa <USBD_LL_PrepareReceive+0x1a>
 800519e:	e8df f000 	tbb	[pc, r0]
 80051a2:	0403      	.short	0x0403
 80051a4:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 80051a6:	2001      	movs	r0, #1
}
 80051a8:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 80051aa:	2003      	movs	r0, #3
 80051ac:	e7fc      	b.n	80051a8 <USBD_LL_PrepareReceive+0x18>
	...

080051b0 <HAL_PCDEx_LPM_Callback>:
{
 80051b0:	b510      	push	{r4, lr}
 80051b2:	4604      	mov	r4, r0
  switch (msg)
 80051b4:	b111      	cbz	r1, 80051bc <HAL_PCDEx_LPM_Callback+0xc>
 80051b6:	2901      	cmp	r1, #1
 80051b8:	d016      	beq.n	80051e8 <HAL_PCDEx_LPM_Callback+0x38>
}
 80051ba:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80051bc:	7ac3      	ldrb	r3, [r0, #11]
 80051be:	b95b      	cbnz	r3, 80051d8 <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Resume(hpcd->pData);
 80051ce:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 80051d2:	f7ff f842 	bl	800425a <USBD_LL_Resume>
    break;
 80051d6:	e7f0      	b.n	80051ba <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 80051d8:	f7ff fe32 	bl	8004e40 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80051dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005210 <HAL_PCDEx_LPM_Callback+0x60>)
 80051de:	6913      	ldr	r3, [r2, #16]
 80051e0:	f023 0306 	bic.w	r3, r3, #6
 80051e4:	6113      	str	r3, [r2, #16]
 80051e6:	e7eb      	b.n	80051c0 <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80051e8:	6802      	ldr	r2, [r0, #0]
 80051ea:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80051f6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80051fa:	f7ff f81f 	bl	800423c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80051fe:	7ae3      	ldrb	r3, [r4, #11]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0da      	beq.n	80051ba <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005204:	4a02      	ldr	r2, [pc, #8]	@ (8005210 <HAL_PCDEx_LPM_Callback+0x60>)
 8005206:	6913      	ldr	r3, [r2, #16]
 8005208:	f043 0306 	orr.w	r3, r3, #6
 800520c:	6113      	str	r3, [r2, #16]
}
 800520e:	e7d4      	b.n	80051ba <HAL_PCDEx_LPM_Callback+0xa>
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <USBD_static_malloc>:
}
 8005214:	4800      	ldr	r0, [pc, #0]	@ (8005218 <USBD_static_malloc+0x4>)
 8005216:	4770      	bx	lr
 8005218:	2004074c 	.word	0x2004074c

0800521c <USBD_static_free>:
}
 800521c:	4770      	bx	lr

0800521e <memset>:
 800521e:	4402      	add	r2, r0
 8005220:	4603      	mov	r3, r0
 8005222:	4293      	cmp	r3, r2
 8005224:	d100      	bne.n	8005228 <memset+0xa>
 8005226:	4770      	bx	lr
 8005228:	f803 1b01 	strb.w	r1, [r3], #1
 800522c:	e7f9      	b.n	8005222 <memset+0x4>
	...

08005230 <__libc_init_array>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4d0d      	ldr	r5, [pc, #52]	@ (8005268 <__libc_init_array+0x38>)
 8005234:	4c0d      	ldr	r4, [pc, #52]	@ (800526c <__libc_init_array+0x3c>)
 8005236:	1b64      	subs	r4, r4, r5
 8005238:	10a4      	asrs	r4, r4, #2
 800523a:	2600      	movs	r6, #0
 800523c:	42a6      	cmp	r6, r4
 800523e:	d109      	bne.n	8005254 <__libc_init_array+0x24>
 8005240:	4d0b      	ldr	r5, [pc, #44]	@ (8005270 <__libc_init_array+0x40>)
 8005242:	4c0c      	ldr	r4, [pc, #48]	@ (8005274 <__libc_init_array+0x44>)
 8005244:	f000 f818 	bl	8005278 <_init>
 8005248:	1b64      	subs	r4, r4, r5
 800524a:	10a4      	asrs	r4, r4, #2
 800524c:	2600      	movs	r6, #0
 800524e:	42a6      	cmp	r6, r4
 8005250:	d105      	bne.n	800525e <__libc_init_array+0x2e>
 8005252:	bd70      	pop	{r4, r5, r6, pc}
 8005254:	f855 3b04 	ldr.w	r3, [r5], #4
 8005258:	4798      	blx	r3
 800525a:	3601      	adds	r6, #1
 800525c:	e7ee      	b.n	800523c <__libc_init_array+0xc>
 800525e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005262:	4798      	blx	r3
 8005264:	3601      	adds	r6, #1
 8005266:	e7f2      	b.n	800524e <__libc_init_array+0x1e>
 8005268:	08005350 	.word	0x08005350
 800526c:	08005350 	.word	0x08005350
 8005270:	08005350 	.word	0x08005350
 8005274:	08005354 	.word	0x08005354

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
